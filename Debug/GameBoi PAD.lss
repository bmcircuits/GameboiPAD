
GameBoi PAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003430  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000e0  20000000  00003430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000037c  200000e0  00003510  000200e0  2**2
                  ALLOC
  3 .stack        00000604  2000045c  0000388c  000200e0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
  6 .debug_info   00024ac8  00000000  00000000  00020161  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004159  00000000  00000000  00044c29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005516  00000000  00000000  00048d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000690  00000000  00000000  0004e298  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000708  00000000  00000000  0004e928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019005  00000000  00000000  0004f030  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000dfdd  00000000  00000000  00068035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007a622  00000000  00000000  00076012  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000fcc  00000000  00000000  000f0634  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	60 0a 00 20 81 2d 00 00 7d 2d 00 00 7d 2d 00 00     `.. .-..}-..}-..
	...
      2c:	7d 2d 00 00 00 00 00 00 00 00 00 00 7d 2d 00 00     }-..........}-..
      3c:	65 2e 00 00 7d 2d 00 00 7d 2d 00 00 7d 2d 00 00     e...}-..}-..}-..
      4c:	7d 2d 00 00 7d 0d 00 00 7d 2d 00 00 7d 2d 00 00     }-..}...}-..}-..
      5c:	fd 28 00 00 7d 2d 00 00 7d 2d 00 00 7d 2d 00 00     .(..}-..}-..}-..
      6c:	7d 2d 00 00 7d 2d 00 00 7d 2d 00 00 7d 2d 00 00     }-..}-..}-..}-..
      7c:	7d 2d 00 00 7d 2d 00 00 7d 2d 00 00 7d 2d 00 00     }-..}-..}-..}-..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	200000e0 	.word	0x200000e0
      ac:	00000000 	.word	0x00000000
      b0:	00003430 	.word	0x00003430

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	200000e4 	.word	0x200000e4
      e0:	00003430 	.word	0x00003430
      e4:	00003430 	.word	0x00003430
      e8:	00000000 	.word	0x00000000

000000ec <ui_init>:

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
      ec:	2280      	movs	r2, #128	; 0x80
      ee:	0252      	lsls	r2, r2, #9
      f0:	4b01      	ldr	r3, [pc, #4]	; (f8 <ui_init+0xc>)
      f2:	615a      	str	r2, [r3, #20]

void ui_init(void)
{
	/* Initialize LEDs */
	LED_On(LED_0_PIN);
}
      f4:	4770      	bx	lr
      f6:	46c0      	nop			; (mov r8, r8)
      f8:	41004400 	.word	0x41004400

000000fc <ui_powerdown>:
		port_base->OUTSET.reg = pin_mask;
      fc:	2280      	movs	r2, #128	; 0x80
      fe:	0252      	lsls	r2, r2, #9
     100:	4b01      	ldr	r3, [pc, #4]	; (108 <ui_powerdown+0xc>)
     102:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
     104:	4770      	bx	lr
     106:	46c0      	nop			; (mov r8, r8)
     108:	41004400 	.word	0x41004400

0000010c <ui_wakeup_enable>:


void ui_wakeup_enable(void)
{

}
     10c:	4770      	bx	lr

0000010e <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{

}
     10e:	4770      	bx	lr

00000110 <ui_wakeup>:
		port_base->OUTCLR.reg = pin_mask;
     110:	2280      	movs	r2, #128	; 0x80
     112:	0252      	lsls	r2, r2, #9
     114:	4b01      	ldr	r3, [pc, #4]	; (11c <ui_wakeup+0xc>)
     116:	615a      	str	r2, [r3, #20]

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
     118:	4770      	bx	lr
     11a:	46c0      	nop			; (mov r8, r8)
     11c:	41004400 	.word	0x41004400

00000120 <ui_process>:

void ui_process(uint16_t framenumber)
{
     120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     122:	46ce      	mov	lr, r9
     124:	4647      	mov	r7, r8
     126:	b580      	push	{r7, lr}
	// bool b_btn_state;
	// static bool btn0_last_state = false;
	static uint8_t cpt_sof = 0;

	// Blink LED
	if (ui_b_led_blink) {
     128:	4b68      	ldr	r3, [pc, #416]	; (2cc <ui_process+0x1ac>)
     12a:	781b      	ldrb	r3, [r3, #0]
     12c:	2b00      	cmp	r3, #0
     12e:	d00a      	beq.n	146 <ui_process+0x26>
		if ((framenumber % 1000) == 0) {
     130:	21fa      	movs	r1, #250	; 0xfa
     132:	0089      	lsls	r1, r1, #2
     134:	4b66      	ldr	r3, [pc, #408]	; (2d0 <ui_process+0x1b0>)
     136:	4798      	blx	r3
     138:	b289      	uxth	r1, r1
     13a:	2900      	cmp	r1, #0
     13c:	d149      	bne.n	1d2 <ui_process+0xb2>
     13e:	2280      	movs	r2, #128	; 0x80
     140:	0252      	lsls	r2, r2, #9
     142:	4b64      	ldr	r3, [pc, #400]	; (2d4 <ui_process+0x1b4>)
     144:	615a      	str	r2, [r3, #20]
			LED_Off(LED_0_PIN);
		}
	}

	// Scan process running each 40ms
	cpt_sof++;
     146:	4b64      	ldr	r3, [pc, #400]	; (2d8 <ui_process+0x1b8>)
     148:	781b      	ldrb	r3, [r3, #0]
     14a:	3301      	adds	r3, #1
     14c:	b2db      	uxtb	r3, r3
	if (cpt_sof < 40) {
     14e:	2b27      	cmp	r3, #39	; 0x27
     150:	d948      	bls.n	1e4 <ui_process+0xc4>
		return;
	}
	cpt_sof = 0;
     152:	2200      	movs	r2, #0
     154:	4b60      	ldr	r3, [pc, #384]	; (2d8 <ui_process+0x1b8>)
     156:	701a      	strb	r2, [r3, #0]
	return (port_base->IN.reg & pin_mask);
     158:	4a5e      	ldr	r2, [pc, #376]	; (2d4 <ui_process+0x1b4>)
     15a:	6a13      	ldr	r3, [r2, #32]
     15c:	6a11      	ldr	r1, [r2, #32]
     15e:	468c      	mov	ip, r1
     160:	6a11      	ldr	r1, [r2, #32]
     162:	4688      	mov	r8, r1
     164:	6a11      	ldr	r1, [r2, #32]
     166:	6a10      	ldr	r0, [r2, #32]
     168:	2420      	movs	r4, #32
     16a:	4004      	ands	r4, r0
     16c:	6a15      	ldr	r5, [r2, #32]
     16e:	2080      	movs	r0, #128	; 0x80
     170:	0040      	lsls	r0, r0, #1
     172:	4005      	ands	r5, r0
     174:	6a10      	ldr	r0, [r2, #32]
     176:	2640      	movs	r6, #64	; 0x40
     178:	4030      	ands	r0, r6
     17a:	6a12      	ldr	r2, [r2, #32]
     17c:	3640      	adds	r6, #64	; 0x40
     17e:	4016      	ands	r6, r2

	// Scan buttons
    bool btn_select  =  !port_pin_get_input_level(BTN_SELECT);
     180:	089b      	lsrs	r3, r3, #2
     182:	2201      	movs	r2, #1
     184:	0017      	movs	r7, r2
     186:	439f      	bics	r7, r3
    bool btn_up      =  !port_pin_get_input_level(BTN_UP);
    bool btn_right   =  !port_pin_get_input_level(BTN_RIGHT);
    bool btn_down    =  !port_pin_get_input_level(BTN_DOWN);
    bool btn_left    =  !port_pin_get_input_level(BTN_LEFT);

	buttonPresses = ((btn_select << 3) | (btn_start << 2) | (btn_a << 1) | (btn_b));
     188:	00fb      	lsls	r3, r7, #3
     18a:	4699      	mov	r9, r3
    bool btn_start   =  !port_pin_get_input_level(BTN_START);
     18c:	4667      	mov	r7, ip
     18e:	08ff      	lsrs	r7, r7, #3
     190:	46bc      	mov	ip, r7
     192:	0017      	movs	r7, r2
     194:	4663      	mov	r3, ip
     196:	439f      	bics	r7, r3
	buttonPresses = ((btn_select << 3) | (btn_start << 2) | (btn_a << 1) | (btn_b));
     198:	00bb      	lsls	r3, r7, #2
     19a:	464f      	mov	r7, r9
     19c:	431f      	orrs	r7, r3
     19e:	003b      	movs	r3, r7
    bool btn_b       =  !port_pin_get_input_level(BTN_B);
     1a0:	0909      	lsrs	r1, r1, #4
     1a2:	4051      	eors	r1, r2
     1a4:	2701      	movs	r7, #1
     1a6:	4039      	ands	r1, r7
	buttonPresses = ((btn_select << 3) | (btn_start << 2) | (btn_a << 1) | (btn_b));
     1a8:	430b      	orrs	r3, r1
    bool btn_a       =  !port_pin_get_input_level(BTN_A);
     1aa:	4641      	mov	r1, r8
     1ac:	0a4f      	lsrs	r7, r1, #9
     1ae:	43ba      	bics	r2, r7
	buttonPresses = ((btn_select << 3) | (btn_start << 2) | (btn_a << 1) | (btn_b));
     1b0:	0052      	lsls	r2, r2, #1
     1b2:	4313      	orrs	r3, r2
     1b4:	4a49      	ldr	r2, [pc, #292]	; (2dc <ui_process+0x1bc>)
     1b6:	7013      	strb	r3, [r2, #0]
	//uint8_t hatButtonPresses =((btn_up << 3) | (btn_right << 2) | (btn_down << 1) | (btn_left));


    if (!btn_up && !btn_right && !btn_down && !btn_left)
     1b8:	2c00      	cmp	r4, #0
     1ba:	d058      	beq.n	26e <ui_process+0x14e>
     1bc:	2d00      	cmp	r5, #0
     1be:	d100      	bne.n	1c2 <ui_process+0xa2>
     1c0:	e075      	b.n	2ae <ui_process+0x18e>
     1c2:	2800      	cmp	r0, #0
     1c4:	d055      	beq.n	272 <ui_process+0x152>
     1c6:	2e00      	cmp	r6, #0
     1c8:	d053      	beq.n	272 <ui_process+0x152>
        hatPresses = HATSWITCH_NONE;  // Neutral state; adjust your descriptor if needed.
     1ca:	210f      	movs	r1, #15
     1cc:	4a44      	ldr	r2, [pc, #272]	; (2e0 <ui_process+0x1c0>)
     1ce:	7011      	strb	r1, [r2, #0]
     1d0:	e04f      	b.n	272 <ui_process+0x152>
		if ((framenumber % 1000) == 500) {
     1d2:	23fa      	movs	r3, #250	; 0xfa
     1d4:	005b      	lsls	r3, r3, #1
     1d6:	4299      	cmp	r1, r3
     1d8:	d1b5      	bne.n	146 <ui_process+0x26>
		port_base->OUTSET.reg = pin_mask;
     1da:	2280      	movs	r2, #128	; 0x80
     1dc:	0252      	lsls	r2, r2, #9
     1de:	4b3d      	ldr	r3, [pc, #244]	; (2d4 <ui_process+0x1b4>)
     1e0:	619a      	str	r2, [r3, #24]
     1e2:	e7b0      	b.n	146 <ui_process+0x26>
	cpt_sof++;
     1e4:	4a3c      	ldr	r2, [pc, #240]	; (2d8 <ui_process+0x1b8>)
     1e6:	7013      	strb	r3, [r2, #0]
     1e8:	e02f      	b.n	24a <ui_process+0x12a>

    // Check diagonal combinations first.
    if (btn_up && btn_right && !btn_down && !btn_left)
     1ea:	2800      	cmp	r0, #0
     1ec:	d043      	beq.n	276 <ui_process+0x156>
     1ee:	2e00      	cmp	r6, #0
     1f0:	d05f      	beq.n	2b2 <ui_process+0x192>
        hatPresses = HATSWITCH_UPRIGHT;  // Up-Right
     1f2:	2101      	movs	r1, #1
     1f4:	4a3a      	ldr	r2, [pc, #232]	; (2e0 <ui_process+0x1c0>)
     1f6:	7011      	strb	r1, [r2, #0]
     1f8:	e05b      	b.n	2b2 <ui_process+0x192>

    if (btn_right && btn_down && !btn_up && !btn_left)
     1fa:	2e00      	cmp	r6, #0
     1fc:	d00e      	beq.n	21c <ui_process+0xfc>
        hatPresses = HATSWITCH_DOWNRIGHT;  // Down-Right
     1fe:	2103      	movs	r1, #3
     200:	4a37      	ldr	r2, [pc, #220]	; (2e0 <ui_process+0x1c0>)
     202:	7011      	strb	r1, [r2, #0]

    if (btn_left && btn_up && !btn_right && !btn_down)
        hatPresses = HATSWITCH_UPLEFT;  // Up-Left

    // Now check for single directional presses.
    if (btn_up && !btn_right && !btn_down && !btn_left)
     204:	2c00      	cmp	r4, #0
     206:	d13f      	bne.n	288 <ui_process+0x168>
     208:	2d00      	cmp	r5, #0
     20a:	d00b      	beq.n	224 <ui_process+0x104>
     20c:	2800      	cmp	r0, #0
     20e:	d009      	beq.n	224 <ui_process+0x104>
     210:	2e00      	cmp	r6, #0
     212:	d007      	beq.n	224 <ui_process+0x104>
        hatPresses = HATSWITCH_UP;  // Up
     214:	2100      	movs	r1, #0
     216:	4a32      	ldr	r2, [pc, #200]	; (2e0 <ui_process+0x1c0>)
     218:	7011      	strb	r1, [r2, #0]
     21a:	e003      	b.n	224 <ui_process+0x104>

    if (btn_right && !btn_up && !btn_down && !btn_left)
     21c:	2d00      	cmp	r5, #0
     21e:	d13f      	bne.n	2a0 <ui_process+0x180>
     220:	2c00      	cmp	r4, #0
     222:	d116      	bne.n	252 <ui_process+0x132>
        hatPresses = HATSWITCH_RIGHT;  // Right

    if (btn_down && !btn_up && !btn_right && !btn_left)
     224:	2800      	cmp	r0, #0
     226:	d005      	beq.n	234 <ui_process+0x114>
        hatPresses = HATSWITCH_DOWN;  // Down

    if (btn_left && !btn_up && !btn_right && !btn_down)
     228:	2e00      	cmp	r6, #0
     22a:	d103      	bne.n	234 <ui_process+0x114>
     22c:	2c00      	cmp	r4, #0
     22e:	d001      	beq.n	234 <ui_process+0x114>
     230:	2d00      	cmp	r5, #0
     232:	d116      	bne.n	262 <ui_process+0x142>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
     234:	2180      	movs	r1, #128	; 0x80
     236:	03c9      	lsls	r1, r1, #15
     238:	4a26      	ldr	r2, [pc, #152]	; (2d4 <ui_process+0x1b4>)
     23a:	61d1      	str	r1, [r2, #28]
	// 	break;
	// }

	// if ((buttonPresses != lastButtonPresses) || (hatPresses != lastHatPresses)) {
		LED_Toggle(PIN_PA22);
		ui_hid_report[0] = buttonPresses;
     23c:	4829      	ldr	r0, [pc, #164]	; (2e4 <ui_process+0x1c4>)
     23e:	7003      	strb	r3, [r0, #0]
		ui_hid_report[1] = hatPresses;
     240:	4b27      	ldr	r3, [pc, #156]	; (2e0 <ui_process+0x1c0>)
     242:	781b      	ldrb	r3, [r3, #0]
     244:	7043      	strb	r3, [r0, #1]
		udi_hid_generic_send_report_in(ui_hid_report);
     246:	4b28      	ldr	r3, [pc, #160]	; (2e8 <ui_process+0x1c8>)
     248:	4798      	blx	r3
		lastButtonPresses = buttonPresses;
		lastHatPresses = hatPresses;
	// }
}
     24a:	bc0c      	pop	{r2, r3}
     24c:	4690      	mov	r8, r2
     24e:	4699      	mov	r9, r3
     250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (btn_right && !btn_up && !btn_down && !btn_left)
     252:	2800      	cmp	r0, #0
     254:	d0e8      	beq.n	228 <ui_process+0x108>
     256:	2e00      	cmp	r6, #0
     258:	d0e8      	beq.n	22c <ui_process+0x10c>
        hatPresses = HATSWITCH_RIGHT;  // Right
     25a:	2102      	movs	r1, #2
     25c:	4a20      	ldr	r2, [pc, #128]	; (2e0 <ui_process+0x1c0>)
     25e:	7011      	strb	r1, [r2, #0]
     260:	e7e8      	b.n	234 <ui_process+0x114>
    if (btn_left && !btn_up && !btn_right && !btn_down)
     262:	2800      	cmp	r0, #0
     264:	d0e6      	beq.n	234 <ui_process+0x114>
        hatPresses = HATSWITCH_LEFT;  // Left
     266:	2106      	movs	r1, #6
     268:	4a1d      	ldr	r2, [pc, #116]	; (2e0 <ui_process+0x1c0>)
     26a:	7011      	strb	r1, [r2, #0]
     26c:	e7e2      	b.n	234 <ui_process+0x114>
    if (btn_up && btn_right && !btn_down && !btn_left)
     26e:	2d00      	cmp	r5, #0
     270:	d0bb      	beq.n	1ea <ui_process+0xca>
    if (btn_down && btn_left && !btn_up && !btn_right)
     272:	2800      	cmp	r0, #0
     274:	d11d      	bne.n	2b2 <ui_process+0x192>
     276:	2e00      	cmp	r6, #0
     278:	d1c4      	bne.n	204 <ui_process+0xe4>
     27a:	2c00      	cmp	r4, #0
     27c:	d01d      	beq.n	2ba <ui_process+0x19a>
     27e:	2d00      	cmp	r5, #0
     280:	d002      	beq.n	288 <ui_process+0x168>
        hatPresses = HATSWITCH_DOWNLEFT;  // Down-Left
     282:	2105      	movs	r1, #5
     284:	4a16      	ldr	r2, [pc, #88]	; (2e0 <ui_process+0x1c0>)
     286:	7011      	strb	r1, [r2, #0]
    if (btn_right && !btn_up && !btn_down && !btn_left)
     288:	2d00      	cmp	r5, #0
     28a:	d0e2      	beq.n	252 <ui_process+0x132>
    if (btn_down && !btn_up && !btn_right && !btn_left)
     28c:	2800      	cmp	r0, #0
     28e:	d1cb      	bne.n	228 <ui_process+0x108>
     290:	2e00      	cmp	r6, #0
     292:	d0cf      	beq.n	234 <ui_process+0x114>
        hatPresses = HATSWITCH_DOWN;  // Down
     294:	2104      	movs	r1, #4
     296:	4a12      	ldr	r2, [pc, #72]	; (2e0 <ui_process+0x1c0>)
     298:	7011      	strb	r1, [r2, #0]
     29a:	e7cb      	b.n	234 <ui_process+0x114>
    if (btn_right && !btn_up && !btn_down && !btn_left)
     29c:	2d00      	cmp	r5, #0
     29e:	d0d8      	beq.n	252 <ui_process+0x132>
    if (btn_down && !btn_up && !btn_right && !btn_left)
     2a0:	2800      	cmp	r0, #0
     2a2:	d1c1      	bne.n	228 <ui_process+0x108>
     2a4:	2c00      	cmp	r4, #0
     2a6:	d0c5      	beq.n	234 <ui_process+0x114>
     2a8:	2d00      	cmp	r5, #0
     2aa:	d1f1      	bne.n	290 <ui_process+0x170>
     2ac:	e7c2      	b.n	234 <ui_process+0x114>
    if (btn_right && btn_down && !btn_up && !btn_left)
     2ae:	2800      	cmp	r0, #0
     2b0:	d0a3      	beq.n	1fa <ui_process+0xda>
    if (btn_left && btn_up && !btn_right && !btn_down)
     2b2:	2e00      	cmp	r6, #0
     2b4:	d1a6      	bne.n	204 <ui_process+0xe4>
     2b6:	2c00      	cmp	r4, #0
     2b8:	d1f0      	bne.n	29c <ui_process+0x17c>
     2ba:	2d00      	cmp	r5, #0
     2bc:	d0b0      	beq.n	220 <ui_process+0x100>
     2be:	2800      	cmp	r0, #0
     2c0:	d0ee      	beq.n	2a0 <ui_process+0x180>
        hatPresses = HATSWITCH_UPLEFT;  // Up-Left
     2c2:	2107      	movs	r1, #7
     2c4:	4a06      	ldr	r2, [pc, #24]	; (2e0 <ui_process+0x1c0>)
     2c6:	7011      	strb	r1, [r2, #0]
     2c8:	e7ea      	b.n	2a0 <ui_process+0x180>
     2ca:	46c0      	nop			; (mov r8, r8)
     2cc:	20000000 	.word	0x20000000
     2d0:	00003155 	.word	0x00003155
     2d4:	41004400 	.word	0x41004400
     2d8:	200000fd 	.word	0x200000fd
     2dc:	200000fc 	.word	0x200000fc
     2e0:	200000fe 	.word	0x200000fe
     2e4:	20000100 	.word	0x20000100
     2e8:	0000043d 	.word	0x0000043d

000002ec <ui_led_change>:

void ui_led_change(uint8_t *report)
{
	if (report[0]=='1') {
     2ec:	7803      	ldrb	r3, [r0, #0]
     2ee:	2b31      	cmp	r3, #49	; 0x31
     2f0:	d006      	beq.n	300 <ui_led_change+0x14>
			LED_On(LED_0_PIN);
			break;
		}
	} else {
		// A led can blink
		switch(report[1]) {
     2f2:	7843      	ldrb	r3, [r0, #1]
     2f4:	2b31      	cmp	r3, #49	; 0x31
     2f6:	d102      	bne.n	2fe <ui_led_change+0x12>
			case '1':
			ui_b_led_blink = true;
     2f8:	2201      	movs	r2, #1
     2fa:	4b07      	ldr	r3, [pc, #28]	; (318 <ui_led_change+0x2c>)
     2fc:	701a      	strb	r2, [r3, #0]
			break;
		}
	}
}
     2fe:	4770      	bx	lr
		switch(report[1]) {
     300:	7843      	ldrb	r3, [r0, #1]
     302:	2b31      	cmp	r3, #49	; 0x31
     304:	d1fb      	bne.n	2fe <ui_led_change+0x12>
			ui_b_led_blink = false;
     306:	2200      	movs	r2, #0
     308:	4b03      	ldr	r3, [pc, #12]	; (318 <ui_led_change+0x2c>)
     30a:	701a      	strb	r2, [r3, #0]
		port_base->OUTCLR.reg = pin_mask;
     30c:	2280      	movs	r2, #128	; 0x80
     30e:	0252      	lsls	r2, r2, #9
     310:	4b02      	ldr	r3, [pc, #8]	; (31c <ui_led_change+0x30>)
     312:	615a      	str	r2, [r3, #20]
     314:	e7f3      	b.n	2fe <ui_led_change+0x12>
     316:	46c0      	nop			; (mov r8, r8)
     318:	20000000 	.word	0x20000000
     31c:	41004400 	.word	0x41004400

00000320 <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
     320:	2000      	movs	r0, #0
     322:	4770      	bx	lr

00000324 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     324:	4b0b      	ldr	r3, [pc, #44]	; (354 <udi_hid_generic_setreport+0x30>)
     326:	885b      	ldrh	r3, [r3, #2]
     328:	0a1a      	lsrs	r2, r3, #8
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
		udd_g_ctrlreq.payload_size =
				sizeof(udi_hid_generic_report_feature);
		return true;
	}
	return false;
     32a:	2000      	movs	r0, #0
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     32c:	2a03      	cmp	r2, #3
     32e:	d000      	beq.n	332 <udi_hid_generic_setreport+0xe>
}
     330:	4770      	bx	lr
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     332:	32fc      	adds	r2, #252	; 0xfc
     334:	421a      	tst	r2, r3
     336:	d1fb      	bne.n	330 <udi_hid_generic_setreport+0xc>
					udd_g_ctrlreq.req.wLength)) {
     338:	4b06      	ldr	r3, [pc, #24]	; (354 <udi_hid_generic_setreport+0x30>)
			&& (sizeof(udi_hid_generic_report_feature) ==
     33a:	88db      	ldrh	r3, [r3, #6]
     33c:	2b04      	cmp	r3, #4
     33e:	d1f7      	bne.n	330 <udi_hid_generic_setreport+0xc>
		udd_g_ctrlreq.payload =
     340:	4b04      	ldr	r3, [pc, #16]	; (354 <udi_hid_generic_setreport+0x30>)
     342:	4a05      	ldr	r2, [pc, #20]	; (358 <udi_hid_generic_setreport+0x34>)
     344:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
     346:	4a05      	ldr	r2, [pc, #20]	; (35c <udi_hid_generic_setreport+0x38>)
     348:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size =
     34a:	2204      	movs	r2, #4
     34c:	819a      	strh	r2, [r3, #12]
		return true;
     34e:	3001      	adds	r0, #1
     350:	e7ee      	b.n	330 <udi_hid_generic_setreport+0xc>
     352:	46c0      	nop			; (mov r8, r8)
     354:	2000033c 	.word	0x2000033c
     358:	2000010c 	.word	0x2000010c
     35c:	0000041d 	.word	0x0000041d

00000360 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     360:	2201      	movs	r2, #1
     362:	4b01      	ldr	r3, [pc, #4]	; (368 <udi_hid_generic_report_in_sent+0x8>)
     364:	701a      	strb	r2, [r3, #0]
}
     366:	4770      	bx	lr
     368:	20000102 	.word	0x20000102

0000036c <udi_hid_generic_report_out_enable>:
{
     36c:	b510      	push	{r4, lr}
     36e:	b082      	sub	sp, #8
	return udd_ep_run(UDI_HID_GENERIC_EP_OUT,
     370:	4b04      	ldr	r3, [pc, #16]	; (384 <udi_hid_generic_report_out_enable+0x18>)
     372:	9300      	str	r3, [sp, #0]
     374:	2308      	movs	r3, #8
     376:	4a04      	ldr	r2, [pc, #16]	; (388 <udi_hid_generic_report_out_enable+0x1c>)
     378:	2100      	movs	r1, #0
     37a:	2002      	movs	r0, #2
     37c:	4c03      	ldr	r4, [pc, #12]	; (38c <udi_hid_generic_report_out_enable+0x20>)
     37e:	47a0      	blx	r4
}
     380:	b002      	add	sp, #8
     382:	bd10      	pop	{r4, pc}
     384:	000003c9 	.word	0x000003c9
     388:	20000114 	.word	0x20000114
     38c:	00001ec9 	.word	0x00001ec9

00000390 <udi_hid_generic_enable>:
{
     390:	b510      	push	{r4, lr}
	udi_hid_generic_rate = 0;
     392:	2300      	movs	r3, #0
     394:	4a07      	ldr	r2, [pc, #28]	; (3b4 <udi_hid_generic_enable+0x24>)
     396:	7013      	strb	r3, [r2, #0]
	udi_hid_generic_protocol = 0;
     398:	4a07      	ldr	r2, [pc, #28]	; (3b8 <udi_hid_generic_enable+0x28>)
     39a:	7013      	strb	r3, [r2, #0]
	udi_hid_generic_b_report_in_free = true;
     39c:	2201      	movs	r2, #1
     39e:	4b07      	ldr	r3, [pc, #28]	; (3bc <udi_hid_generic_enable+0x2c>)
     3a0:	701a      	strb	r2, [r3, #0]
	if (!udi_hid_generic_report_out_enable())
     3a2:	4b07      	ldr	r3, [pc, #28]	; (3c0 <udi_hid_generic_enable+0x30>)
     3a4:	4798      	blx	r3
     3a6:	2800      	cmp	r0, #0
     3a8:	d100      	bne.n	3ac <udi_hid_generic_enable+0x1c>
}
     3aa:	bd10      	pop	{r4, pc}
	return UDI_HID_GENERIC_ENABLE_EXT();
     3ac:	4b05      	ldr	r3, [pc, #20]	; (3c4 <udi_hid_generic_enable+0x34>)
     3ae:	4798      	blx	r3
     3b0:	e7fb      	b.n	3aa <udi_hid_generic_enable+0x1a>
     3b2:	46c0      	nop			; (mov r8, r8)
     3b4:	20000108 	.word	0x20000108
     3b8:	20000104 	.word	0x20000104
     3bc:	20000102 	.word	0x20000102
     3c0:	0000036d 	.word	0x0000036d
     3c4:	00002ffd 	.word	0x00002ffd

000003c8 <udi_hid_generic_report_out_received>:
{
     3c8:	b510      	push	{r4, lr}
	if (UDD_EP_TRANSFER_OK != status)
     3ca:	2800      	cmp	r0, #0
     3cc:	d103      	bne.n	3d6 <udi_hid_generic_report_out_received+0xe>
	if (sizeof(udi_hid_generic_report_out) == nb_received) {
     3ce:	2908      	cmp	r1, #8
     3d0:	d002      	beq.n	3d8 <udi_hid_generic_report_out_received+0x10>
	udi_hid_generic_report_out_enable();
     3d2:	4b03      	ldr	r3, [pc, #12]	; (3e0 <udi_hid_generic_report_out_received+0x18>)
     3d4:	4798      	blx	r3
}
     3d6:	bd10      	pop	{r4, pc}
		UDI_HID_GENERIC_REPORT_OUT(udi_hid_generic_report_out);
     3d8:	4802      	ldr	r0, [pc, #8]	; (3e4 <udi_hid_generic_report_out_received+0x1c>)
     3da:	4b03      	ldr	r3, [pc, #12]	; (3e8 <udi_hid_generic_report_out_received+0x20>)
     3dc:	4798      	blx	r3
     3de:	e7f8      	b.n	3d2 <udi_hid_generic_report_out_received+0xa>
     3e0:	0000036d 	.word	0x0000036d
     3e4:	20000114 	.word	0x20000114
     3e8:	000002ed 	.word	0x000002ed

000003ec <udi_hid_generic_disable>:
{
     3ec:	b510      	push	{r4, lr}
	UDI_HID_GENERIC_DISABLE_EXT();
     3ee:	4b01      	ldr	r3, [pc, #4]	; (3f4 <udi_hid_generic_disable+0x8>)
     3f0:	4798      	blx	r3
}
     3f2:	bd10      	pop	{r4, pc}
     3f4:	0000300d 	.word	0x0000300d

000003f8 <udi_hid_generic_setup>:
{
     3f8:	b510      	push	{r4, lr}
	return udi_hid_setup(&udi_hid_generic_rate,
     3fa:	4b03      	ldr	r3, [pc, #12]	; (408 <udi_hid_generic_setup+0x10>)
     3fc:	4a03      	ldr	r2, [pc, #12]	; (40c <udi_hid_generic_setup+0x14>)
     3fe:	4904      	ldr	r1, [pc, #16]	; (410 <udi_hid_generic_setup+0x18>)
     400:	4804      	ldr	r0, [pc, #16]	; (414 <udi_hid_generic_setup+0x1c>)
     402:	4c05      	ldr	r4, [pc, #20]	; (418 <udi_hid_generic_setup+0x20>)
     404:	47a0      	blx	r4
}
     406:	bd10      	pop	{r4, pc}
     408:	00000325 	.word	0x00000325
     40c:	20000018 	.word	0x20000018
     410:	20000104 	.word	0x20000104
     414:	20000108 	.word	0x20000108
     418:	000004bd 	.word	0x000004bd

0000041c <udi_hid_generic_setfeature_valid>:
{
     41c:	b510      	push	{r4, lr}
	if (sizeof(udi_hid_generic_report_feature) != udd_g_ctrlreq.payload_size)
     41e:	4b04      	ldr	r3, [pc, #16]	; (430 <udi_hid_generic_setfeature_valid+0x14>)
     420:	899b      	ldrh	r3, [r3, #12]
     422:	2b04      	cmp	r3, #4
     424:	d000      	beq.n	428 <udi_hid_generic_setfeature_valid+0xc>
}
     426:	bd10      	pop	{r4, pc}
	UDI_HID_GENERIC_SET_FEATURE(udi_hid_generic_report_feature);
     428:	4802      	ldr	r0, [pc, #8]	; (434 <udi_hid_generic_setfeature_valid+0x18>)
     42a:	4b03      	ldr	r3, [pc, #12]	; (438 <udi_hid_generic_setfeature_valid+0x1c>)
     42c:	4798      	blx	r3
     42e:	e7fa      	b.n	426 <udi_hid_generic_setfeature_valid+0xa>
     430:	2000033c 	.word	0x2000033c
     434:	2000010c 	.word	0x2000010c
     438:	00003019 	.word	0x00003019

0000043c <udi_hid_generic_send_report_in>:
{
     43c:	b530      	push	{r4, r5, lr}
     43e:	b085      	sub	sp, #20
     440:	0001      	movs	r1, r0
	if (!udi_hid_generic_b_report_in_free)
     442:	4b18      	ldr	r3, [pc, #96]	; (4a4 <udi_hid_generic_send_report_in+0x68>)
     444:	7818      	ldrb	r0, [r3, #0]
     446:	2800      	cmp	r0, #0
     448:	d101      	bne.n	44e <udi_hid_generic_send_report_in+0x12>
}
     44a:	b005      	add	sp, #20
     44c:	bd30      	pop	{r4, r5, pc}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     44e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     452:	425a      	negs	r2, r3
     454:	4153      	adcs	r3, r2
     456:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     458:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     45a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     45e:	2300      	movs	r3, #0
     460:	4a11      	ldr	r2, [pc, #68]	; (4a8 <udi_hid_generic_send_report_in+0x6c>)
     462:	7013      	strb	r3, [r2, #0]
	return flags;
     464:	9d03      	ldr	r5, [sp, #12]
	memset(&udi_hid_generic_report_in, 0, sizeof(udi_hid_generic_report_in));
     466:	4c11      	ldr	r4, [pc, #68]	; (4ac <udi_hid_generic_send_report_in+0x70>)
     468:	8023      	strh	r3, [r4, #0]
	memcpy(&udi_hid_generic_report_in, data, sizeof(udi_hid_generic_report_in));
     46a:	2202      	movs	r2, #2
     46c:	0020      	movs	r0, r4
     46e:	4b10      	ldr	r3, [pc, #64]	; (4b0 <udi_hid_generic_send_report_in+0x74>)
     470:	4798      	blx	r3
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     472:	4b10      	ldr	r3, [pc, #64]	; (4b4 <udi_hid_generic_send_report_in+0x78>)
     474:	9300      	str	r3, [sp, #0]
     476:	2302      	movs	r3, #2
     478:	0022      	movs	r2, r4
     47a:	2100      	movs	r1, #0
     47c:	2081      	movs	r0, #129	; 0x81
     47e:	4c0e      	ldr	r4, [pc, #56]	; (4b8 <udi_hid_generic_send_report_in+0x7c>)
     480:	47a0      	blx	r4
							udi_hid_generic_report_in_sent);
     482:	2301      	movs	r3, #1
     484:	4058      	eors	r0, r3
	udi_hid_generic_b_report_in_free =
     486:	4b07      	ldr	r3, [pc, #28]	; (4a4 <udi_hid_generic_send_report_in+0x68>)
     488:	7018      	strb	r0, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     48a:	2d00      	cmp	r5, #0
     48c:	d005      	beq.n	49a <udi_hid_generic_send_report_in+0x5e>
		cpu_irq_enable();
     48e:	2201      	movs	r2, #1
     490:	4b05      	ldr	r3, [pc, #20]	; (4a8 <udi_hid_generic_send_report_in+0x6c>)
     492:	701a      	strb	r2, [r3, #0]
     494:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     498:	b662      	cpsie	i
	return !udi_hid_generic_b_report_in_free;
     49a:	4b02      	ldr	r3, [pc, #8]	; (4a4 <udi_hid_generic_send_report_in+0x68>)
     49c:	7818      	ldrb	r0, [r3, #0]
     49e:	2301      	movs	r3, #1
     4a0:	4058      	eors	r0, r3
     4a2:	e7d2      	b.n	44a <udi_hid_generic_send_report_in+0xe>
     4a4:	20000102 	.word	0x20000102
     4a8:	200000df 	.word	0x200000df
     4ac:	20000110 	.word	0x20000110
     4b0:	0000337d 	.word	0x0000337d
     4b4:	00000361 	.word	0x00000361
     4b8:	00001ec9 	.word	0x00001ec9

000004bc <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
     4bc:	b570      	push	{r4, r5, r6, lr}
     4be:	0005      	movs	r5, r0
     4c0:	0014      	movs	r4, r2
	if (Udd_setup_is_in()) {
     4c2:	4a3b      	ldr	r2, [pc, #236]	; (5b0 <udi_hid_setup+0xf4>)
     4c4:	7812      	ldrb	r2, [r2, #0]
     4c6:	b250      	sxtb	r0, r2
     4c8:	2800      	cmp	r0, #0
     4ca:	db05      	blt.n	4d8 <udi_hid_setup+0x1c>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     4cc:	2460      	movs	r4, #96	; 0x60
     4ce:	4022      	ands	r2, r4
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
     4d0:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     4d2:	2a20      	cmp	r2, #32
     4d4:	d04f      	beq.n	576 <udi_hid_setup+0xba>
}
     4d6:	bd70      	pop	{r4, r5, r6, pc}
     4d8:	2060      	movs	r0, #96	; 0x60
     4da:	4002      	ands	r2, r0
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     4dc:	d103      	bne.n	4e6 <udi_hid_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
     4de:	4834      	ldr	r0, [pc, #208]	; (5b0 <udi_hid_setup+0xf4>)
     4e0:	7840      	ldrb	r0, [r0, #1]
     4e2:	2806      	cmp	r0, #6
     4e4:	d00d      	beq.n	502 <udi_hid_setup+0x46>
	return false;	// Request not supported
     4e6:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     4e8:	2a20      	cmp	r2, #32
     4ea:	d1f4      	bne.n	4d6 <udi_hid_setup+0x1a>
			switch (udd_g_ctrlreq.req.bRequest) {
     4ec:	4a30      	ldr	r2, [pc, #192]	; (5b0 <udi_hid_setup+0xf4>)
     4ee:	7852      	ldrb	r2, [r2, #1]
     4f0:	2a02      	cmp	r2, #2
     4f2:	d034      	beq.n	55e <udi_hid_setup+0xa2>
     4f4:	2a03      	cmp	r2, #3
     4f6:	d038      	beq.n	56a <udi_hid_setup+0xae>
	return false;	// Request not supported
     4f8:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     4fa:	2a01      	cmp	r2, #1
     4fc:	d1eb      	bne.n	4d6 <udi_hid_setup+0x1a>
				return setup_report();
     4fe:	4798      	blx	r3
     500:	e7e9      	b.n	4d6 <udi_hid_setup+0x1a>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
     502:	4b2c      	ldr	r3, [pc, #176]	; (5b4 <udi_hid_setup+0xf8>)
     504:	4798      	blx	r3
     506:	0003      	movs	r3, r0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     508:	7a82      	ldrb	r2, [r0, #10]
		return false;
     50a:	2000      	movs	r0, #0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     50c:	2a21      	cmp	r2, #33	; 0x21
     50e:	d1e2      	bne.n	4d6 <udi_hid_setup+0x1a>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     510:	4a27      	ldr	r2, [pc, #156]	; (5b0 <udi_hid_setup+0xf4>)
     512:	8852      	ldrh	r2, [r2, #2]
     514:	0a12      	lsrs	r2, r2, #8
     516:	2a21      	cmp	r2, #33	; 0x21
     518:	d013      	beq.n	542 <udi_hid_setup+0x86>
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
     51a:	7bd9      	ldrb	r1, [r3, #15]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
     51c:	2000      	movs	r0, #0
	if (ptr_hid_desc->bRDescriptorType ==
     51e:	4291      	cmp	r1, r2
     520:	d1d9      	bne.n	4d6 <udi_hid_setup+0x1a>
		udd_g_ctrlreq.payload = report_desc;
     522:	4a23      	ldr	r2, [pc, #140]	; (5b0 <udi_hid_setup+0xf4>)
     524:	6094      	str	r4, [r2, #8]
				min(udd_g_ctrlreq.req.wLength,
     526:	7c19      	ldrb	r1, [r3, #16]
     528:	3309      	adds	r3, #9
     52a:	7a1b      	ldrb	r3, [r3, #8]
     52c:	021b      	lsls	r3, r3, #8
     52e:	430b      	orrs	r3, r1
		udd_g_ctrlreq.payload_size =
     530:	88d0      	ldrh	r0, [r2, #6]
     532:	1c19      	adds	r1, r3, #0
     534:	b29b      	uxth	r3, r3
     536:	4283      	cmp	r3, r0
     538:	d900      	bls.n	53c <udi_hid_setup+0x80>
     53a:	1c01      	adds	r1, r0, #0
     53c:	8191      	strh	r1, [r2, #12]
		return true;
     53e:	2001      	movs	r0, #1
     540:	e7c9      	b.n	4d6 <udi_hid_setup+0x1a>
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     542:	4a1b      	ldr	r2, [pc, #108]	; (5b0 <udi_hid_setup+0xf4>)
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
     544:	0019      	movs	r1, r3
     546:	3109      	adds	r1, #9
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     548:	6091      	str	r1, [r2, #8]
				min(udd_g_ctrlreq.req.wLength,
     54a:	7a5b      	ldrb	r3, [r3, #9]
     54c:	88d0      	ldrh	r0, [r2, #6]
     54e:	1c19      	adds	r1, r3, #0
     550:	b29b      	uxth	r3, r3
     552:	4283      	cmp	r3, r0
     554:	d900      	bls.n	558 <udi_hid_setup+0x9c>
     556:	1c01      	adds	r1, r0, #0
		udd_g_ctrlreq.payload_size =
     558:	8191      	strh	r1, [r2, #12]
		return true;
     55a:	2001      	movs	r0, #1
     55c:	e7bb      	b.n	4d6 <udi_hid_setup+0x1a>
				udd_g_ctrlreq.payload = rate;
     55e:	4b14      	ldr	r3, [pc, #80]	; (5b0 <udi_hid_setup+0xf4>)
     560:	609d      	str	r5, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
     562:	2201      	movs	r2, #1
     564:	819a      	strh	r2, [r3, #12]
				return true;
     566:	2001      	movs	r0, #1
     568:	e7b5      	b.n	4d6 <udi_hid_setup+0x1a>
				udd_g_ctrlreq.payload = protocol;
     56a:	4b11      	ldr	r3, [pc, #68]	; (5b0 <udi_hid_setup+0xf4>)
     56c:	6099      	str	r1, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
     56e:	2201      	movs	r2, #1
     570:	819a      	strh	r2, [r3, #12]
				return true;
     572:	2001      	movs	r0, #1
     574:	e7af      	b.n	4d6 <udi_hid_setup+0x1a>
			switch (udd_g_ctrlreq.req.bRequest) {
     576:	4a0e      	ldr	r2, [pc, #56]	; (5b0 <udi_hid_setup+0xf4>)
     578:	7852      	ldrb	r2, [r2, #1]
     57a:	2a0a      	cmp	r2, #10
     57c:	d006      	beq.n	58c <udi_hid_setup+0xd0>
     57e:	2a0b      	cmp	r2, #11
     580:	d00a      	beq.n	598 <udi_hid_setup+0xdc>
	return false;	// Request not supported
     582:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     584:	2a09      	cmp	r2, #9
     586:	d1a6      	bne.n	4d6 <udi_hid_setup+0x1a>
				return setup_report();
     588:	4798      	blx	r3
     58a:	e7a4      	b.n	4d6 <udi_hid_setup+0x1a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
     58c:	4b08      	ldr	r3, [pc, #32]	; (5b0 <udi_hid_setup+0xf4>)
     58e:	885b      	ldrh	r3, [r3, #2]
     590:	0a1b      	lsrs	r3, r3, #8
     592:	702b      	strb	r3, [r5, #0]
				return true;
     594:	2001      	movs	r0, #1
     596:	e79e      	b.n	4d6 <udi_hid_setup+0x1a>
				if (0 != udd_g_ctrlreq.req.wLength)
     598:	4b05      	ldr	r3, [pc, #20]	; (5b0 <udi_hid_setup+0xf4>)
     59a:	88db      	ldrh	r3, [r3, #6]
					return false;
     59c:	2000      	movs	r0, #0
				if (0 != udd_g_ctrlreq.req.wLength)
     59e:	2b00      	cmp	r3, #0
     5a0:	d000      	beq.n	5a4 <udi_hid_setup+0xe8>
     5a2:	e798      	b.n	4d6 <udi_hid_setup+0x1a>
				*protocol = udd_g_ctrlreq.req.wValue;
     5a4:	4b02      	ldr	r3, [pc, #8]	; (5b0 <udi_hid_setup+0xf4>)
     5a6:	885b      	ldrh	r3, [r3, #2]
     5a8:	700b      	strb	r3, [r1, #0]
				return true;
     5aa:	3001      	adds	r0, #1
     5ac:	e793      	b.n	4d6 <udi_hid_setup+0x1a>
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	2000033c 	.word	0x2000033c
     5b4:	00000755 	.word	0x00000755

000005b8 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     5b8:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
     5ba:	4b11      	ldr	r3, [pc, #68]	; (600 <STACK_SIZE>)
     5bc:	681b      	ldr	r3, [r3, #0]
     5be:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     5c0:	7894      	ldrb	r4, [r2, #2]
     5c2:	78d3      	ldrb	r3, [r2, #3]
     5c4:	021b      	lsls	r3, r3, #8
     5c6:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     5c8:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
     5ca:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     5cc:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     5ce:	4290      	cmp	r0, r2
     5d0:	d210      	bcs.n	5f4 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     5d2:	7843      	ldrb	r3, [r0, #1]
     5d4:	2b04      	cmp	r3, #4
     5d6:	d00f      	beq.n	5f8 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     5d8:	428b      	cmp	r3, r1
     5da:	d00a      	beq.n	5f2 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
     5dc:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     5de:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
     5e0:	4290      	cmp	r0, r2
     5e2:	d205      	bcs.n	5f0 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     5e4:	7843      	ldrb	r3, [r0, #1]
     5e6:	2b04      	cmp	r3, #4
     5e8:	d008      	beq.n	5fc <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
     5ea:	428b      	cmp	r3, r1
     5ec:	d1f6      	bne.n	5dc <udc_next_desc_in_iface+0x24>
     5ee:	e000      	b.n	5f2 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
     5f0:	2000      	movs	r0, #0
}
     5f2:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
     5f4:	2000      	movs	r0, #0
     5f6:	e7fc      	b.n	5f2 <udc_next_desc_in_iface+0x3a>
     5f8:	2000      	movs	r0, #0
     5fa:	e7fa      	b.n	5f2 <udc_next_desc_in_iface+0x3a>
     5fc:	2000      	movs	r0, #0
     5fe:	e7f8      	b.n	5f2 <udc_next_desc_in_iface+0x3a>
     600:	20000128 	.word	0x20000128

00000604 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     604:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     606:	4b03      	ldr	r3, [pc, #12]	; (614 <udc_valid_address+0x10>)
     608:	885b      	ldrh	r3, [r3, #2]
     60a:	207f      	movs	r0, #127	; 0x7f
     60c:	4018      	ands	r0, r3
     60e:	4b02      	ldr	r3, [pc, #8]	; (618 <udc_valid_address+0x14>)
     610:	4798      	blx	r3
}
     612:	bd10      	pop	{r4, pc}
     614:	2000033c 	.word	0x2000033c
     618:	000020a1 	.word	0x000020a1

0000061c <udc_update_iface_desc>:
{
     61c:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
     61e:	4b19      	ldr	r3, [pc, #100]	; (684 <udc_update_iface_desc+0x68>)
     620:	781b      	ldrb	r3, [r3, #0]
		return false;
     622:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
     624:	2b00      	cmp	r3, #0
     626:	d029      	beq.n	67c <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     628:	4b17      	ldr	r3, [pc, #92]	; (688 <udc_update_iface_desc+0x6c>)
     62a:	681b      	ldr	r3, [r3, #0]
     62c:	681b      	ldr	r3, [r3, #0]
     62e:	791c      	ldrb	r4, [r3, #4]
     630:	4284      	cmp	r4, r0
     632:	d923      	bls.n	67c <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     634:	4a15      	ldr	r2, [pc, #84]	; (68c <udc_update_iface_desc+0x70>)
     636:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     638:	789a      	ldrb	r2, [r3, #2]
     63a:	78dc      	ldrb	r4, [r3, #3]
     63c:	0224      	lsls	r4, r4, #8
     63e:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     640:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
     642:	42a3      	cmp	r3, r4
     644:	d21c      	bcs.n	680 <udc_update_iface_desc+0x64>
     646:	2500      	movs	r5, #0
     648:	2601      	movs	r6, #1
     64a:	e007      	b.n	65c <udc_update_iface_desc+0x40>
     64c:	4a0f      	ldr	r2, [pc, #60]	; (68c <udc_update_iface_desc+0x70>)
     64e:	6013      	str	r3, [r2, #0]
     650:	e00f      	b.n	672 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
     652:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     654:	189b      	adds	r3, r3, r2
     656:	0035      	movs	r5, r6
	while (ptr_end_desc >
     658:	42a3      	cmp	r3, r4
     65a:	d20c      	bcs.n	676 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     65c:	785a      	ldrb	r2, [r3, #1]
     65e:	2a04      	cmp	r2, #4
     660:	d1f7      	bne.n	652 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     662:	789a      	ldrb	r2, [r3, #2]
     664:	4282      	cmp	r2, r0
     666:	d1f4      	bne.n	652 <udc_update_iface_desc+0x36>
     668:	78da      	ldrb	r2, [r3, #3]
     66a:	428a      	cmp	r2, r1
     66c:	d1f1      	bne.n	652 <udc_update_iface_desc+0x36>
     66e:	2d00      	cmp	r5, #0
     670:	d1ec      	bne.n	64c <udc_update_iface_desc+0x30>
				return true; // Interface found
     672:	2201      	movs	r2, #1
     674:	e002      	b.n	67c <udc_update_iface_desc+0x60>
     676:	4a05      	ldr	r2, [pc, #20]	; (68c <udc_update_iface_desc+0x70>)
     678:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
     67a:	2200      	movs	r2, #0
}
     67c:	0010      	movs	r0, r2
     67e:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
     680:	2200      	movs	r2, #0
     682:	e7fb      	b.n	67c <udc_update_iface_desc+0x60>
     684:	20000124 	.word	0x20000124
     688:	20000128 	.word	0x20000128
     68c:	2000012c 	.word	0x2000012c

00000690 <udc_iface_disable>:
{
     690:	b5f0      	push	{r4, r5, r6, r7, lr}
     692:	46c6      	mov	lr, r8
     694:	b500      	push	{lr}
     696:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
     698:	2100      	movs	r1, #0
     69a:	4b13      	ldr	r3, [pc, #76]	; (6e8 <udc_iface_disable+0x58>)
     69c:	4798      	blx	r3
     69e:	1e05      	subs	r5, r0, #0
     6a0:	d103      	bne.n	6aa <udc_iface_disable+0x1a>
}
     6a2:	0028      	movs	r0, r5
     6a4:	bc04      	pop	{r2}
     6a6:	4690      	mov	r8, r2
     6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     6aa:	4b10      	ldr	r3, [pc, #64]	; (6ec <udc_iface_disable+0x5c>)
     6ac:	681b      	ldr	r3, [r3, #0]
     6ae:	685b      	ldr	r3, [r3, #4]
     6b0:	00a2      	lsls	r2, r4, #2
     6b2:	58d3      	ldr	r3, [r2, r3]
     6b4:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     6b6:	68db      	ldr	r3, [r3, #12]
     6b8:	4798      	blx	r3
     6ba:	0001      	movs	r1, r0
     6bc:	0020      	movs	r0, r4
     6be:	4b0a      	ldr	r3, [pc, #40]	; (6e8 <udc_iface_disable+0x58>)
     6c0:	4798      	blx	r3
     6c2:	1e05      	subs	r5, r0, #0
     6c4:	d0ed      	beq.n	6a2 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     6c6:	4b0a      	ldr	r3, [pc, #40]	; (6f0 <udc_iface_disable+0x60>)
     6c8:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     6ca:	4e0a      	ldr	r6, [pc, #40]	; (6f4 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
     6cc:	4f0a      	ldr	r7, [pc, #40]	; (6f8 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     6ce:	2105      	movs	r1, #5
     6d0:	0020      	movs	r0, r4
     6d2:	47b0      	blx	r6
     6d4:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
     6d6:	d002      	beq.n	6de <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
     6d8:	7880      	ldrb	r0, [r0, #2]
     6da:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     6dc:	e7f7      	b.n	6ce <udc_iface_disable+0x3e>
	udi_api->disable();
     6de:	4643      	mov	r3, r8
     6e0:	685b      	ldr	r3, [r3, #4]
     6e2:	4798      	blx	r3
	return true;
     6e4:	e7dd      	b.n	6a2 <udc_iface_disable+0x12>
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	0000061d 	.word	0x0000061d
     6ec:	20000128 	.word	0x20000128
     6f0:	2000012c 	.word	0x2000012c
     6f4:	000005b9 	.word	0x000005b9
     6f8:	00001be1 	.word	0x00001be1

000006fc <udc_iface_enable>:
{
     6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6fe:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     700:	4b0f      	ldr	r3, [pc, #60]	; (740 <udc_iface_enable+0x44>)
     702:	4798      	blx	r3
     704:	2800      	cmp	r0, #0
     706:	d019      	beq.n	73c <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     708:	4b0e      	ldr	r3, [pc, #56]	; (744 <udc_iface_enable+0x48>)
     70a:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     70c:	4e0e      	ldr	r6, [pc, #56]	; (748 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     70e:	4f0f      	ldr	r7, [pc, #60]	; (74c <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     710:	2105      	movs	r1, #5
     712:	0020      	movs	r0, r4
     714:	47b0      	blx	r6
     716:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
     718:	d009      	beq.n	72e <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     71a:	7903      	ldrb	r3, [r0, #4]
     71c:	7942      	ldrb	r2, [r0, #5]
     71e:	0212      	lsls	r2, r2, #8
     720:	431a      	orrs	r2, r3
     722:	78c1      	ldrb	r1, [r0, #3]
     724:	7880      	ldrb	r0, [r0, #2]
     726:	47b8      	blx	r7
     728:	2800      	cmp	r0, #0
     72a:	d1f1      	bne.n	710 <udc_iface_enable+0x14>
     72c:	e006      	b.n	73c <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     72e:	4b08      	ldr	r3, [pc, #32]	; (750 <udc_iface_enable+0x54>)
     730:	681b      	ldr	r3, [r3, #0]
     732:	685b      	ldr	r3, [r3, #4]
     734:	00ad      	lsls	r5, r5, #2
     736:	58eb      	ldr	r3, [r5, r3]
     738:	681b      	ldr	r3, [r3, #0]
     73a:	4798      	blx	r3
}
     73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     73e:	46c0      	nop			; (mov r8, r8)
     740:	0000061d 	.word	0x0000061d
     744:	2000012c 	.word	0x2000012c
     748:	000005b9 	.word	0x000005b9
     74c:	00001c39 	.word	0x00001c39
     750:	20000128 	.word	0x20000128

00000754 <udc_get_interface_desc>:
	return udc_ptr_iface;
     754:	4b01      	ldr	r3, [pc, #4]	; (75c <udc_get_interface_desc+0x8>)
     756:	6818      	ldr	r0, [r3, #0]
}
     758:	4770      	bx	lr
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	2000012c 	.word	0x2000012c

00000760 <udc_start>:
{
     760:	b510      	push	{r4, lr}
	udd_enable();
     762:	4b01      	ldr	r3, [pc, #4]	; (768 <udc_start+0x8>)
     764:	4798      	blx	r3
}
     766:	bd10      	pop	{r4, pc}
     768:	00002171 	.word	0x00002171

0000076c <udc_reset>:
{
     76c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     76e:	4b12      	ldr	r3, [pc, #72]	; (7b8 <udc_reset+0x4c>)
     770:	781b      	ldrb	r3, [r3, #0]
     772:	2b00      	cmp	r3, #0
     774:	d011      	beq.n	79a <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     776:	4b11      	ldr	r3, [pc, #68]	; (7bc <udc_reset+0x50>)
     778:	681b      	ldr	r3, [r3, #0]
     77a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     77c:	791b      	ldrb	r3, [r3, #4]
     77e:	2b00      	cmp	r3, #0
     780:	d00b      	beq.n	79a <udc_reset+0x2e>
     782:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
     784:	4e0e      	ldr	r6, [pc, #56]	; (7c0 <udc_reset+0x54>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     786:	4d0d      	ldr	r5, [pc, #52]	; (7bc <udc_reset+0x50>)
			udc_iface_disable(iface_num);
     788:	0020      	movs	r0, r4
     78a:	47b0      	blx	r6
				iface_num++) {
     78c:	3401      	adds	r4, #1
     78e:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     790:	682b      	ldr	r3, [r5, #0]
     792:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     794:	791b      	ldrb	r3, [r3, #4]
     796:	42a3      	cmp	r3, r4
     798:	d8f6      	bhi.n	788 <udc_reset+0x1c>
	udc_num_configuration = 0;
     79a:	2200      	movs	r2, #0
     79c:	4b06      	ldr	r3, [pc, #24]	; (7b8 <udc_reset+0x4c>)
     79e:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
     7a0:	4b08      	ldr	r3, [pc, #32]	; (7c4 <udc_reset+0x58>)
     7a2:	881b      	ldrh	r3, [r3, #0]
     7a4:	079b      	lsls	r3, r3, #30
     7a6:	d403      	bmi.n	7b0 <udc_reset+0x44>
	udc_device_status =
     7a8:	2200      	movs	r2, #0
     7aa:	4b06      	ldr	r3, [pc, #24]	; (7c4 <udc_reset+0x58>)
     7ac:	801a      	strh	r2, [r3, #0]
}
     7ae:	bd70      	pop	{r4, r5, r6, pc}
		UDC_REMOTEWAKEUP_DISABLE();
     7b0:	4b05      	ldr	r3, [pc, #20]	; (7c8 <udc_reset+0x5c>)
     7b2:	4798      	blx	r3
     7b4:	e7f8      	b.n	7a8 <udc_reset+0x3c>
     7b6:	46c0      	nop			; (mov r8, r8)
     7b8:	20000124 	.word	0x20000124
     7bc:	20000128 	.word	0x20000128
     7c0:	00000691 	.word	0x00000691
     7c4:	2000011c 	.word	0x2000011c
     7c8:	00002ff1 	.word	0x00002ff1

000007cc <udc_stop>:
{
     7cc:	b510      	push	{r4, lr}
	udd_disable();
     7ce:	4b02      	ldr	r3, [pc, #8]	; (7d8 <udc_stop+0xc>)
     7d0:	4798      	blx	r3
	udc_reset();
     7d2:	4b02      	ldr	r3, [pc, #8]	; (7dc <udc_stop+0x10>)
     7d4:	4798      	blx	r3
}
     7d6:	bd10      	pop	{r4, pc}
     7d8:	0000220d 	.word	0x0000220d
     7dc:	0000076d 	.word	0x0000076d

000007e0 <udc_sof_notify>:
{
     7e0:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     7e2:	4b0e      	ldr	r3, [pc, #56]	; (81c <udc_sof_notify+0x3c>)
     7e4:	781b      	ldrb	r3, [r3, #0]
     7e6:	2b00      	cmp	r3, #0
     7e8:	d017      	beq.n	81a <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     7ea:	4b0d      	ldr	r3, [pc, #52]	; (820 <udc_sof_notify+0x40>)
     7ec:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     7ee:	681a      	ldr	r2, [r3, #0]
     7f0:	7912      	ldrb	r2, [r2, #4]
     7f2:	2a00      	cmp	r2, #0
     7f4:	d011      	beq.n	81a <udc_sof_notify+0x3a>
     7f6:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     7f8:	4d09      	ldr	r5, [pc, #36]	; (820 <udc_sof_notify+0x40>)
     7fa:	e006      	b.n	80a <udc_sof_notify+0x2a>
				iface_num++) {
     7fc:	3401      	adds	r4, #1
     7fe:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     800:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
     802:	681a      	ldr	r2, [r3, #0]
     804:	7912      	ldrb	r2, [r2, #4]
     806:	42a2      	cmp	r2, r4
     808:	d907      	bls.n	81a <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     80a:	685b      	ldr	r3, [r3, #4]
     80c:	00a2      	lsls	r2, r4, #2
     80e:	58d3      	ldr	r3, [r2, r3]
     810:	691b      	ldr	r3, [r3, #16]
     812:	2b00      	cmp	r3, #0
     814:	d0f2      	beq.n	7fc <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     816:	4798      	blx	r3
     818:	e7f0      	b.n	7fc <udc_sof_notify+0x1c>
}
     81a:	bd70      	pop	{r4, r5, r6, pc}
     81c:	20000124 	.word	0x20000124
     820:	20000128 	.word	0x20000128

00000824 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     826:	4bb3      	ldr	r3, [pc, #716]	; (af4 <udc_process_setup+0x2d0>)
     828:	2200      	movs	r2, #0
     82a:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
     82c:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
     82e:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
     830:	781b      	ldrb	r3, [r3, #0]
     832:	b25a      	sxtb	r2, r3
     834:	2a00      	cmp	r2, #0
     836:	db13      	blt.n	860 <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     838:	2260      	movs	r2, #96	; 0x60
     83a:	421a      	tst	r2, r3
     83c:	d100      	bne.n	840 <udc_process_setup+0x1c>
     83e:	e0d2      	b.n	9e6 <udc_process_setup+0x1c2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     840:	4bac      	ldr	r3, [pc, #688]	; (af4 <udc_process_setup+0x2d0>)
     842:	781a      	ldrb	r2, [r3, #0]
     844:	231f      	movs	r3, #31
     846:	4013      	ands	r3, r2
     848:	2b01      	cmp	r3, #1
     84a:	d100      	bne.n	84e <udc_process_setup+0x2a>
     84c:	e188      	b.n	b60 <udc_process_setup+0x33c>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     84e:	4ba9      	ldr	r3, [pc, #676]	; (af4 <udc_process_setup+0x2d0>)
     850:	781a      	ldrb	r2, [r3, #0]
     852:	231f      	movs	r3, #31
     854:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     856:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     858:	2b02      	cmp	r3, #2
     85a:	d100      	bne.n	85e <udc_process_setup+0x3a>
     85c:	e1d9      	b.n	c12 <udc_process_setup+0x3ee>
#endif
}
     85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
     860:	4aa4      	ldr	r2, [pc, #656]	; (af4 <udc_process_setup+0x2d0>)
     862:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
     864:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
     866:	2a00      	cmp	r2, #0
     868:	d0f9      	beq.n	85e <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     86a:	2160      	movs	r1, #96	; 0x60
     86c:	4219      	tst	r1, r3
     86e:	d1e7      	bne.n	840 <udc_process_setup+0x1c>
     870:	211f      	movs	r1, #31
     872:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     874:	d108      	bne.n	888 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
     876:	499f      	ldr	r1, [pc, #636]	; (af4 <udc_process_setup+0x2d0>)
     878:	7849      	ldrb	r1, [r1, #1]
     87a:	2906      	cmp	r1, #6
     87c:	d023      	beq.n	8c6 <udc_process_setup+0xa2>
     87e:	2908      	cmp	r1, #8
     880:	d100      	bne.n	884 <udc_process_setup+0x60>
     882:	e07f      	b.n	984 <udc_process_setup+0x160>
     884:	2900      	cmp	r1, #0
     886:	d017      	beq.n	8b8 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     888:	2b01      	cmp	r3, #1
     88a:	d100      	bne.n	88e <udc_process_setup+0x6a>
     88c:	e082      	b.n	994 <udc_process_setup+0x170>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     88e:	2b02      	cmp	r3, #2
     890:	d1d6      	bne.n	840 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     892:	4b98      	ldr	r3, [pc, #608]	; (af4 <udc_process_setup+0x2d0>)
     894:	785b      	ldrb	r3, [r3, #1]
	return false;
     896:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     898:	2b00      	cmp	r3, #0
     89a:	d000      	beq.n	89e <udc_process_setup+0x7a>
     89c:	e126      	b.n	aec <udc_process_setup+0x2c8>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     89e:	2a02      	cmp	r2, #2
     8a0:	d1d5      	bne.n	84e <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     8a2:	4b94      	ldr	r3, [pc, #592]	; (af4 <udc_process_setup+0x2d0>)
     8a4:	7918      	ldrb	r0, [r3, #4]
     8a6:	4b94      	ldr	r3, [pc, #592]	; (af8 <udc_process_setup+0x2d4>)
     8a8:	4798      	blx	r3
     8aa:	4b94      	ldr	r3, [pc, #592]	; (afc <udc_process_setup+0x2d8>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
     8ac:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     8ae:	2102      	movs	r1, #2
     8b0:	0018      	movs	r0, r3
     8b2:	4b93      	ldr	r3, [pc, #588]	; (b00 <udc_process_setup+0x2dc>)
     8b4:	4798      	blx	r3
     8b6:	e0f8      	b.n	aaa <udc_process_setup+0x286>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     8b8:	2a02      	cmp	r2, #2
     8ba:	d1c8      	bne.n	84e <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     8bc:	3102      	adds	r1, #2
     8be:	4891      	ldr	r0, [pc, #580]	; (b04 <udc_process_setup+0x2e0>)
     8c0:	4b8f      	ldr	r3, [pc, #572]	; (b00 <udc_process_setup+0x2dc>)
     8c2:	4798      	blx	r3
     8c4:	e0f1      	b.n	aaa <udc_process_setup+0x286>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     8c6:	4b8b      	ldr	r3, [pc, #556]	; (af4 <udc_process_setup+0x2d0>)
     8c8:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     8ca:	0a13      	lsrs	r3, r2, #8
     8cc:	2b02      	cmp	r3, #2
     8ce:	d023      	beq.n	918 <udc_process_setup+0xf4>
     8d0:	b2d9      	uxtb	r1, r3
     8d2:	2902      	cmp	r1, #2
     8d4:	d90f      	bls.n	8f6 <udc_process_setup+0xd2>
     8d6:	2b03      	cmp	r3, #3
     8d8:	d034      	beq.n	944 <udc_process_setup+0x120>
     8da:	2b0f      	cmp	r3, #15
     8dc:	d000      	beq.n	8e0 <udc_process_setup+0xbc>
     8de:	e196      	b.n	c0e <udc_process_setup+0x3ea>
		if (udc_config.conf_bos == NULL) {
     8e0:	4b89      	ldr	r3, [pc, #548]	; (b08 <udc_process_setup+0x2e4>)
     8e2:	6898      	ldr	r0, [r3, #8]
     8e4:	2800      	cmp	r0, #0
     8e6:	d0b2      	beq.n	84e <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     8e8:	7883      	ldrb	r3, [r0, #2]
     8ea:	78c1      	ldrb	r1, [r0, #3]
     8ec:	0209      	lsls	r1, r1, #8
     8ee:	4319      	orrs	r1, r3
     8f0:	4b83      	ldr	r3, [pc, #524]	; (b00 <udc_process_setup+0x2dc>)
     8f2:	4798      	blx	r3
     8f4:	e007      	b.n	906 <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     8f6:	2b01      	cmp	r3, #1
     8f8:	d000      	beq.n	8fc <udc_process_setup+0xd8>
     8fa:	e188      	b.n	c0e <udc_process_setup+0x3ea>
				(uint8_t *) udc_config.confdev_lsfs,
     8fc:	4b82      	ldr	r3, [pc, #520]	; (b08 <udc_process_setup+0x2e4>)
     8fe:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
     900:	7801      	ldrb	r1, [r0, #0]
     902:	4b7f      	ldr	r3, [pc, #508]	; (b00 <udc_process_setup+0x2dc>)
     904:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     906:	4b7b      	ldr	r3, [pc, #492]	; (af4 <udc_process_setup+0x2d0>)
     908:	88da      	ldrh	r2, [r3, #6]
     90a:	899b      	ldrh	r3, [r3, #12]
     90c:	4293      	cmp	r3, r2
     90e:	d800      	bhi.n	912 <udc_process_setup+0xee>
     910:	e0cb      	b.n	aaa <udc_process_setup+0x286>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     912:	4b78      	ldr	r3, [pc, #480]	; (af4 <udc_process_setup+0x2d0>)
     914:	819a      	strh	r2, [r3, #12]
     916:	e0c8      	b.n	aaa <udc_process_setup+0x286>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     918:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
     91a:	4b7b      	ldr	r3, [pc, #492]	; (b08 <udc_process_setup+0x2e4>)
     91c:	681b      	ldr	r3, [r3, #0]
     91e:	7c5b      	ldrb	r3, [r3, #17]
     920:	4293      	cmp	r3, r2
     922:	d800      	bhi.n	926 <udc_process_setup+0x102>
     924:	e793      	b.n	84e <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
     926:	4b78      	ldr	r3, [pc, #480]	; (b08 <udc_process_setup+0x2e4>)
     928:	685b      	ldr	r3, [r3, #4]
     92a:	00d2      	lsls	r2, r2, #3
     92c:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
     92e:	7883      	ldrb	r3, [r0, #2]
     930:	78c1      	ldrb	r1, [r0, #3]
     932:	0209      	lsls	r1, r1, #8
     934:	4319      	orrs	r1, r3
     936:	4b72      	ldr	r3, [pc, #456]	; (b00 <udc_process_setup+0x2dc>)
     938:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     93a:	4b6e      	ldr	r3, [pc, #440]	; (af4 <udc_process_setup+0x2d0>)
     93c:	689b      	ldr	r3, [r3, #8]
     93e:	2202      	movs	r2, #2
     940:	705a      	strb	r2, [r3, #1]
     942:	e7e0      	b.n	906 <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     944:	23ff      	movs	r3, #255	; 0xff
     946:	401a      	ands	r2, r3
     948:	2a01      	cmp	r2, #1
     94a:	d019      	beq.n	980 <udc_process_setup+0x15c>
     94c:	2a00      	cmp	r2, #0
     94e:	d012      	beq.n	976 <udc_process_setup+0x152>
     950:	2a02      	cmp	r2, #2
     952:	d000      	beq.n	956 <udc_process_setup+0x132>
     954:	e774      	b.n	840 <udc_process_setup+0x1c>
		str = udc_string_product_name;
     956:	4a6d      	ldr	r2, [pc, #436]	; (b0c <udc_process_setup+0x2e8>)
     958:	496d      	ldr	r1, [pc, #436]	; (b10 <udc_process_setup+0x2ec>)
     95a:	1c8b      	adds	r3, r1, #2
     95c:	3116      	adds	r1, #22
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     95e:	7810      	ldrb	r0, [r2, #0]
     960:	8018      	strh	r0, [r3, #0]
     962:	3201      	adds	r2, #1
     964:	3302      	adds	r3, #2
		for(i = 0; i < str_length; i++) {
     966:	428b      	cmp	r3, r1
     968:	d1f9      	bne.n	95e <udc_process_setup+0x13a>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     96a:	4869      	ldr	r0, [pc, #420]	; (b10 <udc_process_setup+0x2ec>)
     96c:	2116      	movs	r1, #22
     96e:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
     970:	4b63      	ldr	r3, [pc, #396]	; (b00 <udc_process_setup+0x2dc>)
     972:	4798      	blx	r3
     974:	e7c7      	b.n	906 <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     976:	2104      	movs	r1, #4
     978:	4866      	ldr	r0, [pc, #408]	; (b14 <udc_process_setup+0x2f0>)
     97a:	4b61      	ldr	r3, [pc, #388]	; (b00 <udc_process_setup+0x2dc>)
     97c:	4798      	blx	r3
     97e:	e7c2      	b.n	906 <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
     980:	4a65      	ldr	r2, [pc, #404]	; (b18 <udc_process_setup+0x2f4>)
     982:	e7e9      	b.n	958 <udc_process_setup+0x134>
	if (udd_g_ctrlreq.req.wLength != 1) {
     984:	2a01      	cmp	r2, #1
     986:	d000      	beq.n	98a <udc_process_setup+0x166>
     988:	e761      	b.n	84e <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
     98a:	2101      	movs	r1, #1
     98c:	4863      	ldr	r0, [pc, #396]	; (b1c <udc_process_setup+0x2f8>)
     98e:	4b5c      	ldr	r3, [pc, #368]	; (b00 <udc_process_setup+0x2dc>)
     990:	4798      	blx	r3
     992:	e08a      	b.n	aaa <udc_process_setup+0x286>
			switch (udd_g_ctrlreq.req.bRequest) {
     994:	4957      	ldr	r1, [pc, #348]	; (af4 <udc_process_setup+0x2d0>)
     996:	7849      	ldrb	r1, [r1, #1]
     998:	290a      	cmp	r1, #10
     99a:	d000      	beq.n	99e <udc_process_setup+0x17a>
     99c:	e777      	b.n	88e <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
     99e:	2a01      	cmp	r2, #1
     9a0:	d000      	beq.n	9a4 <udc_process_setup+0x180>
     9a2:	e0dd      	b.n	b60 <udc_process_setup+0x33c>
	if (!udc_num_configuration) {
     9a4:	4b5d      	ldr	r3, [pc, #372]	; (b1c <udc_process_setup+0x2f8>)
     9a6:	781b      	ldrb	r3, [r3, #0]
     9a8:	2b00      	cmp	r3, #0
     9aa:	d100      	bne.n	9ae <udc_process_setup+0x18a>
     9ac:	e0d8      	b.n	b60 <udc_process_setup+0x33c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     9ae:	4b51      	ldr	r3, [pc, #324]	; (af4 <udc_process_setup+0x2d0>)
     9b0:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     9b2:	4b5b      	ldr	r3, [pc, #364]	; (b20 <udc_process_setup+0x2fc>)
     9b4:	681d      	ldr	r5, [r3, #0]
     9b6:	682b      	ldr	r3, [r5, #0]
     9b8:	791b      	ldrb	r3, [r3, #4]
     9ba:	42a3      	cmp	r3, r4
     9bc:	d800      	bhi.n	9c0 <udc_process_setup+0x19c>
     9be:	e0cf      	b.n	b60 <udc_process_setup+0x33c>
	if (!udc_update_iface_desc(iface_num, 0)) {
     9c0:	2100      	movs	r1, #0
     9c2:	0020      	movs	r0, r4
     9c4:	4b57      	ldr	r3, [pc, #348]	; (b24 <udc_process_setup+0x300>)
     9c6:	4798      	blx	r3
     9c8:	2800      	cmp	r0, #0
     9ca:	d100      	bne.n	9ce <udc_process_setup+0x1aa>
     9cc:	e738      	b.n	840 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     9ce:	686b      	ldr	r3, [r5, #4]
     9d0:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
     9d2:	58e3      	ldr	r3, [r4, r3]
     9d4:	68db      	ldr	r3, [r3, #12]
     9d6:	4798      	blx	r3
     9d8:	4b53      	ldr	r3, [pc, #332]	; (b28 <udc_process_setup+0x304>)
     9da:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
     9dc:	2101      	movs	r1, #1
     9de:	0018      	movs	r0, r3
     9e0:	4b47      	ldr	r3, [pc, #284]	; (b00 <udc_process_setup+0x2dc>)
     9e2:	4798      	blx	r3
     9e4:	e061      	b.n	aaa <udc_process_setup+0x286>
     9e6:	221f      	movs	r2, #31
     9e8:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     9ea:	d172      	bne.n	ad2 <udc_process_setup+0x2ae>
			switch (udd_g_ctrlreq.req.bRequest) {
     9ec:	4a41      	ldr	r2, [pc, #260]	; (af4 <udc_process_setup+0x2d0>)
     9ee:	7852      	ldrb	r2, [r2, #1]
     9f0:	2a03      	cmp	r2, #3
     9f2:	d05c      	beq.n	aae <udc_process_setup+0x28a>
     9f4:	b2d1      	uxtb	r1, r2
     9f6:	2903      	cmp	r1, #3
     9f8:	d93b      	bls.n	a72 <udc_process_setup+0x24e>
     9fa:	2a05      	cmp	r2, #5
     9fc:	d04d      	beq.n	a9a <udc_process_setup+0x276>
     9fe:	2a09      	cmp	r2, #9
     a00:	d167      	bne.n	ad2 <udc_process_setup+0x2ae>
	if (udd_g_ctrlreq.req.wLength) {
     a02:	4b3c      	ldr	r3, [pc, #240]	; (af4 <udc_process_setup+0x2d0>)
     a04:	88db      	ldrh	r3, [r3, #6]
     a06:	2b00      	cmp	r3, #0
     a08:	d000      	beq.n	a0c <udc_process_setup+0x1e8>
     a0a:	e720      	b.n	84e <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
     a0c:	4b47      	ldr	r3, [pc, #284]	; (b2c <udc_process_setup+0x308>)
     a0e:	4798      	blx	r3
     a10:	2800      	cmp	r0, #0
     a12:	d100      	bne.n	a16 <udc_process_setup+0x1f2>
     a14:	e714      	b.n	840 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     a16:	4b37      	ldr	r3, [pc, #220]	; (af4 <udc_process_setup+0x2d0>)
     a18:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
     a1a:	4b3b      	ldr	r3, [pc, #236]	; (b08 <udc_process_setup+0x2e4>)
     a1c:	681b      	ldr	r3, [r3, #0]
     a1e:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     a20:	429a      	cmp	r2, r3
     a22:	dd00      	ble.n	a26 <udc_process_setup+0x202>
     a24:	e70c      	b.n	840 <udc_process_setup+0x1c>
	udc_reset();
     a26:	4b42      	ldr	r3, [pc, #264]	; (b30 <udc_process_setup+0x30c>)
     a28:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     a2a:	4b32      	ldr	r3, [pc, #200]	; (af4 <udc_process_setup+0x2d0>)
     a2c:	789b      	ldrb	r3, [r3, #2]
     a2e:	4a3b      	ldr	r2, [pc, #236]	; (b1c <udc_process_setup+0x2f8>)
     a30:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
     a32:	2b00      	cmp	r3, #0
     a34:	d039      	beq.n	aaa <udc_process_setup+0x286>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     a36:	4a3f      	ldr	r2, [pc, #252]	; (b34 <udc_process_setup+0x310>)
     a38:	4694      	mov	ip, r2
     a3a:	4463      	add	r3, ip
     a3c:	00db      	lsls	r3, r3, #3
     a3e:	4a32      	ldr	r2, [pc, #200]	; (b08 <udc_process_setup+0x2e4>)
     a40:	6852      	ldr	r2, [r2, #4]
     a42:	18d3      	adds	r3, r2, r3
     a44:	4a36      	ldr	r2, [pc, #216]	; (b20 <udc_process_setup+0x2fc>)
     a46:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     a48:	681b      	ldr	r3, [r3, #0]
     a4a:	791b      	ldrb	r3, [r3, #4]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d02c      	beq.n	aaa <udc_process_setup+0x286>
     a50:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
     a52:	4d39      	ldr	r5, [pc, #228]	; (b38 <udc_process_setup+0x314>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     a54:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
     a56:	2100      	movs	r1, #0
     a58:	0020      	movs	r0, r4
     a5a:	47a8      	blx	r5
     a5c:	2800      	cmp	r0, #0
     a5e:	d100      	bne.n	a62 <udc_process_setup+0x23e>
     a60:	e6ee      	b.n	840 <udc_process_setup+0x1c>
			iface_num++) {
     a62:	3401      	adds	r4, #1
     a64:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     a66:	6833      	ldr	r3, [r6, #0]
     a68:	681b      	ldr	r3, [r3, #0]
     a6a:	791b      	ldrb	r3, [r3, #4]
     a6c:	42a3      	cmp	r3, r4
     a6e:	d8f2      	bhi.n	a56 <udc_process_setup+0x232>
     a70:	e01b      	b.n	aaa <udc_process_setup+0x286>
			switch (udd_g_ctrlreq.req.bRequest) {
     a72:	2a01      	cmp	r2, #1
     a74:	d12d      	bne.n	ad2 <udc_process_setup+0x2ae>
	if (udd_g_ctrlreq.req.wLength) {
     a76:	4b1f      	ldr	r3, [pc, #124]	; (af4 <udc_process_setup+0x2d0>)
     a78:	88db      	ldrh	r3, [r3, #6]
     a7a:	2b00      	cmp	r3, #0
     a7c:	d000      	beq.n	a80 <udc_process_setup+0x25c>
     a7e:	e6e6      	b.n	84e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     a80:	4b1c      	ldr	r3, [pc, #112]	; (af4 <udc_process_setup+0x2d0>)
     a82:	885b      	ldrh	r3, [r3, #2]
     a84:	2b01      	cmp	r3, #1
     a86:	d000      	beq.n	a8a <udc_process_setup+0x266>
     a88:	e6e1      	b.n	84e <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     a8a:	4a1e      	ldr	r2, [pc, #120]	; (b04 <udc_process_setup+0x2e0>)
     a8c:	8813      	ldrh	r3, [r2, #0]
     a8e:	2102      	movs	r1, #2
     a90:	438b      	bics	r3, r1
     a92:	8013      	strh	r3, [r2, #0]
		UDC_REMOTEWAKEUP_DISABLE();
     a94:	4b29      	ldr	r3, [pc, #164]	; (b3c <udc_process_setup+0x318>)
     a96:	4798      	blx	r3
     a98:	e007      	b.n	aaa <udc_process_setup+0x286>
	if (udd_g_ctrlreq.req.wLength) {
     a9a:	4b16      	ldr	r3, [pc, #88]	; (af4 <udc_process_setup+0x2d0>)
     a9c:	88db      	ldrh	r3, [r3, #6]
     a9e:	2b00      	cmp	r3, #0
     aa0:	d000      	beq.n	aa4 <udc_process_setup+0x280>
     aa2:	e6d4      	b.n	84e <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
     aa4:	4a26      	ldr	r2, [pc, #152]	; (b40 <udc_process_setup+0x31c>)
     aa6:	4b13      	ldr	r3, [pc, #76]	; (af4 <udc_process_setup+0x2d0>)
     aa8:	611a      	str	r2, [r3, #16]
			return true;
     aaa:	2001      	movs	r0, #1
     aac:	e6d7      	b.n	85e <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
     aae:	4b11      	ldr	r3, [pc, #68]	; (af4 <udc_process_setup+0x2d0>)
     ab0:	88db      	ldrh	r3, [r3, #6]
     ab2:	2b00      	cmp	r3, #0
     ab4:	d000      	beq.n	ab8 <udc_process_setup+0x294>
     ab6:	e6ca      	b.n	84e <udc_process_setup+0x2a>
	switch (udd_g_ctrlreq.req.wValue) {
     ab8:	4b0e      	ldr	r3, [pc, #56]	; (af4 <udc_process_setup+0x2d0>)
     aba:	885b      	ldrh	r3, [r3, #2]
	return false;
     abc:	2000      	movs	r0, #0
	switch (udd_g_ctrlreq.req.wValue) {
     abe:	2b01      	cmp	r3, #1
     ac0:	d114      	bne.n	aec <udc_process_setup+0x2c8>
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
     ac2:	4a10      	ldr	r2, [pc, #64]	; (b04 <udc_process_setup+0x2e0>)
     ac4:	8813      	ldrh	r3, [r2, #0]
     ac6:	2102      	movs	r1, #2
     ac8:	430b      	orrs	r3, r1
     aca:	8013      	strh	r3, [r2, #0]
		UDC_REMOTEWAKEUP_ENABLE();
     acc:	4b1d      	ldr	r3, [pc, #116]	; (b44 <udc_process_setup+0x320>)
     ace:	4798      	blx	r3
     ad0:	e7eb      	b.n	aaa <udc_process_setup+0x286>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     ad2:	2b01      	cmp	r3, #1
     ad4:	d038      	beq.n	b48 <udc_process_setup+0x324>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     ad6:	2b02      	cmp	r3, #2
     ad8:	d000      	beq.n	adc <udc_process_setup+0x2b8>
     ada:	e6b1      	b.n	840 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     adc:	4b05      	ldr	r3, [pc, #20]	; (af4 <udc_process_setup+0x2d0>)
     ade:	785b      	ldrb	r3, [r3, #1]
     ae0:	2b01      	cmp	r3, #1
     ae2:	d073      	beq.n	bcc <udc_process_setup+0x3a8>
     ae4:	2b03      	cmp	r3, #3
     ae6:	d100      	bne.n	aea <udc_process_setup+0x2c6>
     ae8:	e07f      	b.n	bea <udc_process_setup+0x3c6>
	return false;
     aea:	2000      	movs	r0, #0
		if (udc_reqstd()) {
     aec:	2800      	cmp	r0, #0
     aee:	d000      	beq.n	af2 <udc_process_setup+0x2ce>
     af0:	e6b5      	b.n	85e <udc_process_setup+0x3a>
     af2:	e6a5      	b.n	840 <udc_process_setup+0x1c>
     af4:	2000033c 	.word	0x2000033c
     af8:	00001d41 	.word	0x00001d41
     afc:	2000011e 	.word	0x2000011e
     b00:	000020c1 	.word	0x000020c1
     b04:	2000011c 	.word	0x2000011c
     b08:	20000054 	.word	0x20000054
     b0c:	200000d4 	.word	0x200000d4
     b10:	200000ac 	.word	0x200000ac
     b14:	200000c4 	.word	0x200000c4
     b18:	200000c8 	.word	0x200000c8
     b1c:	20000124 	.word	0x20000124
     b20:	20000128 	.word	0x20000128
     b24:	0000061d 	.word	0x0000061d
     b28:	20000120 	.word	0x20000120
     b2c:	000020b1 	.word	0x000020b1
     b30:	0000076d 	.word	0x0000076d
     b34:	1fffffff 	.word	0x1fffffff
     b38:	000006fd 	.word	0x000006fd
     b3c:	00002ff1 	.word	0x00002ff1
     b40:	00000605 	.word	0x00000605
     b44:	00002fe5 	.word	0x00002fe5
			switch (udd_g_ctrlreq.req.bRequest) {
     b48:	4a46      	ldr	r2, [pc, #280]	; (c64 <udc_process_setup+0x440>)
     b4a:	7852      	ldrb	r2, [r2, #1]
     b4c:	2a0b      	cmp	r2, #11
     b4e:	d1c2      	bne.n	ad6 <udc_process_setup+0x2b2>
	if (udd_g_ctrlreq.req.wLength) {
     b50:	4b44      	ldr	r3, [pc, #272]	; (c64 <udc_process_setup+0x440>)
     b52:	88db      	ldrh	r3, [r3, #6]
     b54:	2b00      	cmp	r3, #0
     b56:	d103      	bne.n	b60 <udc_process_setup+0x33c>
	if (!udc_num_configuration) {
     b58:	4b43      	ldr	r3, [pc, #268]	; (c68 <udc_process_setup+0x444>)
     b5a:	781b      	ldrb	r3, [r3, #0]
     b5c:	2b00      	cmp	r3, #0
     b5e:	d127      	bne.n	bb0 <udc_process_setup+0x38c>
	if (0 == udc_num_configuration) {
     b60:	4b41      	ldr	r3, [pc, #260]	; (c68 <udc_process_setup+0x444>)
     b62:	781b      	ldrb	r3, [r3, #0]
	return false;
     b64:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
     b66:	2b00      	cmp	r3, #0
     b68:	d100      	bne.n	b6c <udc_process_setup+0x348>
     b6a:	e678      	b.n	85e <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     b6c:	4b3d      	ldr	r3, [pc, #244]	; (c64 <udc_process_setup+0x440>)
     b6e:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     b70:	4b3e      	ldr	r3, [pc, #248]	; (c6c <udc_process_setup+0x448>)
     b72:	681d      	ldr	r5, [r3, #0]
     b74:	682b      	ldr	r3, [r5, #0]
     b76:	791b      	ldrb	r3, [r3, #4]
     b78:	42a3      	cmp	r3, r4
     b7a:	d800      	bhi.n	b7e <udc_process_setup+0x35a>
     b7c:	e66f      	b.n	85e <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
     b7e:	2100      	movs	r1, #0
     b80:	0020      	movs	r0, r4
     b82:	4b3b      	ldr	r3, [pc, #236]	; (c70 <udc_process_setup+0x44c>)
     b84:	4798      	blx	r3
     b86:	2800      	cmp	r0, #0
     b88:	d100      	bne.n	b8c <udc_process_setup+0x368>
     b8a:	e660      	b.n	84e <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     b8c:	686b      	ldr	r3, [r5, #4]
     b8e:	00a2      	lsls	r2, r4, #2
     b90:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     b92:	68eb      	ldr	r3, [r5, #12]
     b94:	4798      	blx	r3
     b96:	0001      	movs	r1, r0
     b98:	0020      	movs	r0, r4
     b9a:	4b35      	ldr	r3, [pc, #212]	; (c70 <udc_process_setup+0x44c>)
     b9c:	4798      	blx	r3
     b9e:	2800      	cmp	r0, #0
     ba0:	d100      	bne.n	ba4 <udc_process_setup+0x380>
     ba2:	e654      	b.n	84e <udc_process_setup+0x2a>
	return udi_api->setup();
     ba4:	68ab      	ldr	r3, [r5, #8]
     ba6:	4798      	blx	r3
		if (udc_req_iface()) {
     ba8:	2800      	cmp	r0, #0
     baa:	d000      	beq.n	bae <udc_process_setup+0x38a>
     bac:	e657      	b.n	85e <udc_process_setup+0x3a>
     bae:	e64e      	b.n	84e <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     bb0:	4b2c      	ldr	r3, [pc, #176]	; (c64 <udc_process_setup+0x440>)
     bb2:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     bb4:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
     bb6:	0028      	movs	r0, r5
     bb8:	4b2e      	ldr	r3, [pc, #184]	; (c74 <udc_process_setup+0x450>)
     bba:	4798      	blx	r3
     bbc:	2800      	cmp	r0, #0
     bbe:	d100      	bne.n	bc2 <udc_process_setup+0x39e>
     bc0:	e63e      	b.n	840 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
     bc2:	b2e1      	uxtb	r1, r4
     bc4:	0028      	movs	r0, r5
     bc6:	4b2c      	ldr	r3, [pc, #176]	; (c78 <udc_process_setup+0x454>)
     bc8:	4798      	blx	r3
     bca:	e78f      	b.n	aec <udc_process_setup+0x2c8>
	if (udd_g_ctrlreq.req.wLength) {
     bcc:	4b25      	ldr	r3, [pc, #148]	; (c64 <udc_process_setup+0x440>)
     bce:	88db      	ldrh	r3, [r3, #6]
     bd0:	2b00      	cmp	r3, #0
     bd2:	d000      	beq.n	bd6 <udc_process_setup+0x3b2>
     bd4:	e63b      	b.n	84e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     bd6:	4b23      	ldr	r3, [pc, #140]	; (c64 <udc_process_setup+0x440>)
     bd8:	885b      	ldrh	r3, [r3, #2]
     bda:	2b00      	cmp	r3, #0
     bdc:	d000      	beq.n	be0 <udc_process_setup+0x3bc>
     bde:	e636      	b.n	84e <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     be0:	4b20      	ldr	r3, [pc, #128]	; (c64 <udc_process_setup+0x440>)
     be2:	7918      	ldrb	r0, [r3, #4]
     be4:	4b25      	ldr	r3, [pc, #148]	; (c7c <udc_process_setup+0x458>)
     be6:	4798      	blx	r3
     be8:	e780      	b.n	aec <udc_process_setup+0x2c8>
	if (udd_g_ctrlreq.req.wLength) {
     bea:	4b1e      	ldr	r3, [pc, #120]	; (c64 <udc_process_setup+0x440>)
     bec:	88db      	ldrh	r3, [r3, #6]
     bee:	2b00      	cmp	r3, #0
     bf0:	d000      	beq.n	bf4 <udc_process_setup+0x3d0>
     bf2:	e62c      	b.n	84e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     bf4:	4b1b      	ldr	r3, [pc, #108]	; (c64 <udc_process_setup+0x440>)
     bf6:	885b      	ldrh	r3, [r3, #2]
     bf8:	2b00      	cmp	r3, #0
     bfa:	d000      	beq.n	bfe <udc_process_setup+0x3da>
     bfc:	e627      	b.n	84e <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     bfe:	4c19      	ldr	r4, [pc, #100]	; (c64 <udc_process_setup+0x440>)
     c00:	7920      	ldrb	r0, [r4, #4]
     c02:	4b1f      	ldr	r3, [pc, #124]	; (c80 <udc_process_setup+0x45c>)
     c04:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     c06:	7920      	ldrb	r0, [r4, #4]
     c08:	4b1e      	ldr	r3, [pc, #120]	; (c84 <udc_process_setup+0x460>)
     c0a:	4798      	blx	r3
     c0c:	e76e      	b.n	aec <udc_process_setup+0x2c8>
		return false;
     c0e:	2000      	movs	r0, #0
     c10:	e76c      	b.n	aec <udc_process_setup+0x2c8>
	if (0 == udc_num_configuration) {
     c12:	4b15      	ldr	r3, [pc, #84]	; (c68 <udc_process_setup+0x444>)
     c14:	781b      	ldrb	r3, [r3, #0]
     c16:	2b00      	cmp	r3, #0
     c18:	d100      	bne.n	c1c <udc_process_setup+0x3f8>
     c1a:	e620      	b.n	85e <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c1c:	4b13      	ldr	r3, [pc, #76]	; (c6c <udc_process_setup+0x448>)
     c1e:	681b      	ldr	r3, [r3, #0]
     c20:	681a      	ldr	r2, [r3, #0]
     c22:	7912      	ldrb	r2, [r2, #4]
     c24:	2a00      	cmp	r2, #0
     c26:	d01a      	beq.n	c5e <udc_process_setup+0x43a>
     c28:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     c2a:	4e11      	ldr	r6, [pc, #68]	; (c70 <udc_process_setup+0x44c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c2c:	4f0f      	ldr	r7, [pc, #60]	; (c6c <udc_process_setup+0x448>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     c2e:	685b      	ldr	r3, [r3, #4]
     c30:	00aa      	lsls	r2, r5, #2
     c32:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     c34:	68e3      	ldr	r3, [r4, #12]
     c36:	4798      	blx	r3
     c38:	0001      	movs	r1, r0
     c3a:	0028      	movs	r0, r5
     c3c:	47b0      	blx	r6
     c3e:	2800      	cmp	r0, #0
     c40:	d100      	bne.n	c44 <udc_process_setup+0x420>
     c42:	e60c      	b.n	85e <udc_process_setup+0x3a>
		if (udi_api->setup()) {
     c44:	68a3      	ldr	r3, [r4, #8]
     c46:	4798      	blx	r3
     c48:	2800      	cmp	r0, #0
     c4a:	d000      	beq.n	c4e <udc_process_setup+0x42a>
     c4c:	e607      	b.n	85e <udc_process_setup+0x3a>
			iface_num++) {
     c4e:	3501      	adds	r5, #1
     c50:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c52:	683b      	ldr	r3, [r7, #0]
     c54:	681a      	ldr	r2, [r3, #0]
     c56:	7912      	ldrb	r2, [r2, #4]
     c58:	42aa      	cmp	r2, r5
     c5a:	d8e8      	bhi.n	c2e <udc_process_setup+0x40a>
     c5c:	e5ff      	b.n	85e <udc_process_setup+0x3a>
	return false;
     c5e:	2000      	movs	r0, #0
     c60:	e5fd      	b.n	85e <udc_process_setup+0x3a>
     c62:	46c0      	nop			; (mov r8, r8)
     c64:	2000033c 	.word	0x2000033c
     c68:	20000124 	.word	0x20000124
     c6c:	20000128 	.word	0x20000128
     c70:	0000061d 	.word	0x0000061d
     c74:	00000691 	.word	0x00000691
     c78:	000006fd 	.word	0x000006fd
     c7c:	00001e85 	.word	0x00001e85
     c80:	00001b95 	.word	0x00001b95
     c84:	00001d55 	.word	0x00001d55

00000c88 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     c88:	4b0c      	ldr	r3, [pc, #48]	; (cbc <cpu_irq_enter_critical+0x34>)
     c8a:	681b      	ldr	r3, [r3, #0]
     c8c:	2b00      	cmp	r3, #0
     c8e:	d106      	bne.n	c9e <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     c90:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     c94:	2b00      	cmp	r3, #0
     c96:	d007      	beq.n	ca8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     c98:	2200      	movs	r2, #0
     c9a:	4b09      	ldr	r3, [pc, #36]	; (cc0 <cpu_irq_enter_critical+0x38>)
     c9c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     c9e:	4a07      	ldr	r2, [pc, #28]	; (cbc <cpu_irq_enter_critical+0x34>)
     ca0:	6813      	ldr	r3, [r2, #0]
     ca2:	3301      	adds	r3, #1
     ca4:	6013      	str	r3, [r2, #0]
}
     ca6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     ca8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     caa:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     cae:	2200      	movs	r2, #0
     cb0:	4b04      	ldr	r3, [pc, #16]	; (cc4 <cpu_irq_enter_critical+0x3c>)
     cb2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     cb4:	3201      	adds	r2, #1
     cb6:	4b02      	ldr	r3, [pc, #8]	; (cc0 <cpu_irq_enter_critical+0x38>)
     cb8:	701a      	strb	r2, [r3, #0]
     cba:	e7f0      	b.n	c9e <cpu_irq_enter_critical+0x16>
     cbc:	20000130 	.word	0x20000130
     cc0:	20000134 	.word	0x20000134
     cc4:	200000df 	.word	0x200000df

00000cc8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     cc8:	4b08      	ldr	r3, [pc, #32]	; (cec <cpu_irq_leave_critical+0x24>)
     cca:	681a      	ldr	r2, [r3, #0]
     ccc:	3a01      	subs	r2, #1
     cce:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     cd0:	681b      	ldr	r3, [r3, #0]
     cd2:	2b00      	cmp	r3, #0
     cd4:	d109      	bne.n	cea <cpu_irq_leave_critical+0x22>
     cd6:	4b06      	ldr	r3, [pc, #24]	; (cf0 <cpu_irq_leave_critical+0x28>)
     cd8:	781b      	ldrb	r3, [r3, #0]
     cda:	2b00      	cmp	r3, #0
     cdc:	d005      	beq.n	cea <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     cde:	2201      	movs	r2, #1
     ce0:	4b04      	ldr	r3, [pc, #16]	; (cf4 <cpu_irq_leave_critical+0x2c>)
     ce2:	701a      	strb	r2, [r3, #0]
     ce4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     ce8:	b662      	cpsie	i
	}
}
     cea:	4770      	bx	lr
     cec:	20000130 	.word	0x20000130
     cf0:	20000134 	.word	0x20000134
     cf4:	200000df 	.word	0x200000df

00000cf8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
     cfa:	46c6      	mov	lr, r8
     cfc:	b500      	push	{lr}
     cfe:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
     d00:	ac01      	add	r4, sp, #4
     d02:	2701      	movs	r7, #1
     d04:	7067      	strb	r7, [r4, #1]
	config->powersave  = false;
     d06:	2600      	movs	r6, #0
     d08:	70a6      	strb	r6, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     d0a:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     d0c:	0021      	movs	r1, r4
     d0e:	2010      	movs	r0, #16
     d10:	4d18      	ldr	r5, [pc, #96]	; (d74 <system_board_init+0x7c>)
     d12:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     d14:	4b18      	ldr	r3, [pc, #96]	; (d78 <system_board_init+0x80>)
     d16:	4698      	mov	r8, r3
     d18:	2380      	movs	r3, #128	; 0x80
     d1a:	025b      	lsls	r3, r3, #9
     d1c:	4642      	mov	r2, r8
     d1e:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	//added
	port_pin_set_config(PIN_PA23, &pin_conf);
     d20:	0021      	movs	r1, r4
     d22:	2017      	movs	r0, #23
     d24:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
     d26:	2380      	movs	r3, #128	; 0x80
     d28:	041b      	lsls	r3, r3, #16
     d2a:	4642      	mov	r2, r8
     d2c:	6153      	str	r3, [r2, #20]
	port_pin_set_output_level(PIN_PA23, LED_0_ACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     d2e:	7026      	strb	r6, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     d30:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     d32:	0021      	movs	r1, r4
     d34:	200e      	movs	r0, #14
     d36:	47a8      	blx	r5
	//Added
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     d38:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(PIN_PA05, &pin_conf);
     d3a:	0021      	movs	r1, r4
     d3c:	2005      	movs	r0, #5
     d3e:	47a8      	blx	r5
	port_pin_set_config(PIN_PA08, &pin_conf);
     d40:	0021      	movs	r1, r4
     d42:	2008      	movs	r0, #8
     d44:	47a8      	blx	r5
	port_pin_set_config(PIN_PA06, &pin_conf);
     d46:	0021      	movs	r1, r4
     d48:	2006      	movs	r0, #6
     d4a:	47a8      	blx	r5
	port_pin_set_config(PIN_PA07, &pin_conf);
     d4c:	0021      	movs	r1, r4
     d4e:	2007      	movs	r0, #7
     d50:	47a8      	blx	r5
	port_pin_set_config(PIN_PA02, &pin_conf);
     d52:	0021      	movs	r1, r4
     d54:	2002      	movs	r0, #2
     d56:	47a8      	blx	r5
	port_pin_set_config(PIN_PA03, &pin_conf);
     d58:	0021      	movs	r1, r4
     d5a:	2003      	movs	r0, #3
     d5c:	47a8      	blx	r5
	port_pin_set_config(PIN_PA09, &pin_conf);
     d5e:	0021      	movs	r1, r4
     d60:	2009      	movs	r0, #9
     d62:	47a8      	blx	r5
	port_pin_set_config(PIN_PA04, &pin_conf);
     d64:	0021      	movs	r1, r4
     d66:	2004      	movs	r0, #4
     d68:	47a8      	blx	r5
// #define BTN_LEFT			PIN_PA07
// #define BTN_SELECT			PIN_PA02
// #define BTN_START			PIN_PA03
// #define BTN_A				PIN_PA09
// #define BTN_B				PIN_PA04
}
     d6a:	b002      	add	sp, #8
     d6c:	bc04      	pop	{r2}
     d6e:	4690      	mov	r8, r2
     d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d72:	46c0      	nop			; (mov r8, r8)
     d74:	00000e55 	.word	0x00000e55
     d78:	41004400 	.word	0x41004400

00000d7c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     d7c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     d7e:	2200      	movs	r2, #0
     d80:	4b10      	ldr	r3, [pc, #64]	; (dc4 <EIC_Handler+0x48>)
     d82:	701a      	strb	r2, [r3, #0]
     d84:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     d86:	4910      	ldr	r1, [pc, #64]	; (dc8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     d88:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     d8a:	4e10      	ldr	r6, [pc, #64]	; (dcc <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     d8c:	4c0d      	ldr	r4, [pc, #52]	; (dc4 <EIC_Handler+0x48>)
     d8e:	e00a      	b.n	da6 <EIC_Handler+0x2a>
		return eics[eic_index];
     d90:	490d      	ldr	r1, [pc, #52]	; (dc8 <EIC_Handler+0x4c>)
     d92:	e008      	b.n	da6 <EIC_Handler+0x2a>
     d94:	7823      	ldrb	r3, [r4, #0]
     d96:	3301      	adds	r3, #1
     d98:	b2db      	uxtb	r3, r3
     d9a:	7023      	strb	r3, [r4, #0]
     d9c:	2b0f      	cmp	r3, #15
     d9e:	d810      	bhi.n	dc2 <EIC_Handler+0x46>
		return NULL;
     da0:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     da2:	2b1f      	cmp	r3, #31
     da4:	d9f4      	bls.n	d90 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     da6:	0028      	movs	r0, r5
     da8:	4018      	ands	r0, r3
     daa:	2201      	movs	r2, #1
     dac:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     dae:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     db0:	4210      	tst	r0, r2
     db2:	d0ef      	beq.n	d94 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     db4:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     db6:	009b      	lsls	r3, r3, #2
     db8:	599b      	ldr	r3, [r3, r6]
     dba:	2b00      	cmp	r3, #0
     dbc:	d0ea      	beq.n	d94 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     dbe:	4798      	blx	r3
     dc0:	e7e8      	b.n	d94 <EIC_Handler+0x18>
			}
		}
	}
}
     dc2:	bd70      	pop	{r4, r5, r6, pc}
     dc4:	200001c5 	.word	0x200001c5
     dc8:	40001800 	.word	0x40001800
     dcc:	200001c8 	.word	0x200001c8

00000dd0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     dd0:	4a04      	ldr	r2, [pc, #16]	; (de4 <_extint_enable+0x14>)
     dd2:	7813      	ldrb	r3, [r2, #0]
     dd4:	2102      	movs	r1, #2
     dd6:	430b      	orrs	r3, r1
     dd8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     dda:	7853      	ldrb	r3, [r2, #1]
     ddc:	b25b      	sxtb	r3, r3
     dde:	2b00      	cmp	r3, #0
     de0:	dbfb      	blt.n	dda <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     de2:	4770      	bx	lr
     de4:	40001800 	.word	0x40001800

00000de8 <_system_extint_init>:
{
     de8:	b500      	push	{lr}
     dea:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     dec:	4a12      	ldr	r2, [pc, #72]	; (e38 <_system_extint_init+0x50>)
     dee:	6993      	ldr	r3, [r2, #24]
     df0:	2140      	movs	r1, #64	; 0x40
     df2:	430b      	orrs	r3, r1
     df4:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     df6:	a901      	add	r1, sp, #4
     df8:	2300      	movs	r3, #0
     dfa:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     dfc:	2005      	movs	r0, #5
     dfe:	4b0f      	ldr	r3, [pc, #60]	; (e3c <_system_extint_init+0x54>)
     e00:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     e02:	2005      	movs	r0, #5
     e04:	4b0e      	ldr	r3, [pc, #56]	; (e40 <_system_extint_init+0x58>)
     e06:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     e08:	4a0e      	ldr	r2, [pc, #56]	; (e44 <_system_extint_init+0x5c>)
     e0a:	7813      	ldrb	r3, [r2, #0]
     e0c:	2101      	movs	r1, #1
     e0e:	430b      	orrs	r3, r1
     e10:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     e12:	7853      	ldrb	r3, [r2, #1]
     e14:	b25b      	sxtb	r3, r3
     e16:	2b00      	cmp	r3, #0
     e18:	dbfb      	blt.n	e12 <_system_extint_init+0x2a>
     e1a:	4b0b      	ldr	r3, [pc, #44]	; (e48 <_system_extint_init+0x60>)
     e1c:	0019      	movs	r1, r3
     e1e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     e20:	2200      	movs	r2, #0
     e22:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     e24:	4299      	cmp	r1, r3
     e26:	d1fc      	bne.n	e22 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     e28:	2210      	movs	r2, #16
     e2a:	4b08      	ldr	r3, [pc, #32]	; (e4c <_system_extint_init+0x64>)
     e2c:	601a      	str	r2, [r3, #0]
	_extint_enable();
     e2e:	4b08      	ldr	r3, [pc, #32]	; (e50 <_system_extint_init+0x68>)
     e30:	4798      	blx	r3
}
     e32:	b003      	add	sp, #12
     e34:	bd00      	pop	{pc}
     e36:	46c0      	nop			; (mov r8, r8)
     e38:	40000400 	.word	0x40000400
     e3c:	000013c1 	.word	0x000013c1
     e40:	00001335 	.word	0x00001335
     e44:	40001800 	.word	0x40001800
     e48:	200001c8 	.word	0x200001c8
     e4c:	e000e100 	.word	0xe000e100
     e50:	00000dd1 	.word	0x00000dd1

00000e54 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     e54:	b500      	push	{lr}
     e56:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e58:	ab01      	add	r3, sp, #4
     e5a:	2280      	movs	r2, #128	; 0x80
     e5c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     e5e:	780a      	ldrb	r2, [r1, #0]
     e60:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     e62:	784a      	ldrb	r2, [r1, #1]
     e64:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     e66:	788a      	ldrb	r2, [r1, #2]
     e68:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     e6a:	0019      	movs	r1, r3
     e6c:	4b01      	ldr	r3, [pc, #4]	; (e74 <port_pin_set_config+0x20>)
     e6e:	4798      	blx	r3
}
     e70:	b003      	add	sp, #12
     e72:	bd00      	pop	{pc}
     e74:	000014b9 	.word	0x000014b9

00000e78 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     e78:	b510      	push	{r4, lr}
	switch (clock_source) {
     e7a:	2808      	cmp	r0, #8
     e7c:	d803      	bhi.n	e86 <system_clock_source_get_hz+0xe>
     e7e:	0080      	lsls	r0, r0, #2
     e80:	4b1c      	ldr	r3, [pc, #112]	; (ef4 <system_clock_source_get_hz+0x7c>)
     e82:	581b      	ldr	r3, [r3, r0]
     e84:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     e86:	2000      	movs	r0, #0
     e88:	e032      	b.n	ef0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     e8a:	4b1b      	ldr	r3, [pc, #108]	; (ef8 <system_clock_source_get_hz+0x80>)
     e8c:	6918      	ldr	r0, [r3, #16]
     e8e:	e02f      	b.n	ef0 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     e90:	4b1a      	ldr	r3, [pc, #104]	; (efc <system_clock_source_get_hz+0x84>)
     e92:	6a1b      	ldr	r3, [r3, #32]
     e94:	059b      	lsls	r3, r3, #22
     e96:	0f9b      	lsrs	r3, r3, #30
     e98:	4819      	ldr	r0, [pc, #100]	; (f00 <system_clock_source_get_hz+0x88>)
     e9a:	40d8      	lsrs	r0, r3
     e9c:	e028      	b.n	ef0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     e9e:	4b16      	ldr	r3, [pc, #88]	; (ef8 <system_clock_source_get_hz+0x80>)
     ea0:	6958      	ldr	r0, [r3, #20]
     ea2:	e025      	b.n	ef0 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     ea4:	4b14      	ldr	r3, [pc, #80]	; (ef8 <system_clock_source_get_hz+0x80>)
     ea6:	681b      	ldr	r3, [r3, #0]
			return 0;
     ea8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     eaa:	079b      	lsls	r3, r3, #30
     eac:	d520      	bpl.n	ef0 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     eae:	4913      	ldr	r1, [pc, #76]	; (efc <system_clock_source_get_hz+0x84>)
     eb0:	2210      	movs	r2, #16
     eb2:	68cb      	ldr	r3, [r1, #12]
     eb4:	421a      	tst	r2, r3
     eb6:	d0fc      	beq.n	eb2 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     eb8:	4b0f      	ldr	r3, [pc, #60]	; (ef8 <system_clock_source_get_hz+0x80>)
     eba:	681a      	ldr	r2, [r3, #0]
     ebc:	2324      	movs	r3, #36	; 0x24
     ebe:	4013      	ands	r3, r2
     ec0:	2b04      	cmp	r3, #4
     ec2:	d001      	beq.n	ec8 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     ec4:	480f      	ldr	r0, [pc, #60]	; (f04 <system_clock_source_get_hz+0x8c>)
     ec6:	e013      	b.n	ef0 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     ec8:	2000      	movs	r0, #0
     eca:	4b0f      	ldr	r3, [pc, #60]	; (f08 <system_clock_source_get_hz+0x90>)
     ecc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     ece:	4b0a      	ldr	r3, [pc, #40]	; (ef8 <system_clock_source_get_hz+0x80>)
     ed0:	689b      	ldr	r3, [r3, #8]
     ed2:	041b      	lsls	r3, r3, #16
     ed4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     ed6:	4358      	muls	r0, r3
     ed8:	e00a      	b.n	ef0 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     eda:	2350      	movs	r3, #80	; 0x50
     edc:	4a07      	ldr	r2, [pc, #28]	; (efc <system_clock_source_get_hz+0x84>)
     ede:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     ee0:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     ee2:	075b      	lsls	r3, r3, #29
     ee4:	d504      	bpl.n	ef0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     ee6:	4b04      	ldr	r3, [pc, #16]	; (ef8 <system_clock_source_get_hz+0x80>)
     ee8:	68d8      	ldr	r0, [r3, #12]
     eea:	e001      	b.n	ef0 <system_clock_source_get_hz+0x78>
		return 32768UL;
     eec:	2080      	movs	r0, #128	; 0x80
     eee:	0200      	lsls	r0, r0, #8
	}
}
     ef0:	bd10      	pop	{r4, pc}
     ef2:	46c0      	nop			; (mov r8, r8)
     ef4:	000033a0 	.word	0x000033a0
     ef8:	20000138 	.word	0x20000138
     efc:	40000800 	.word	0x40000800
     f00:	007a1200 	.word	0x007a1200
     f04:	02dc6c00 	.word	0x02dc6c00
     f08:	000013dd 	.word	0x000013dd

00000f0c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     f0c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     f0e:	490c      	ldr	r1, [pc, #48]	; (f40 <system_clock_source_osc8m_set_config+0x34>)
     f10:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     f12:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     f14:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     f16:	7840      	ldrb	r0, [r0, #1]
     f18:	2201      	movs	r2, #1
     f1a:	4010      	ands	r0, r2
     f1c:	0180      	lsls	r0, r0, #6
     f1e:	2640      	movs	r6, #64	; 0x40
     f20:	43b3      	bics	r3, r6
     f22:	4303      	orrs	r3, r0
     f24:	402a      	ands	r2, r5
     f26:	01d2      	lsls	r2, r2, #7
     f28:	2080      	movs	r0, #128	; 0x80
     f2a:	4383      	bics	r3, r0
     f2c:	4313      	orrs	r3, r2
     f2e:	2203      	movs	r2, #3
     f30:	4022      	ands	r2, r4
     f32:	0212      	lsls	r2, r2, #8
     f34:	4803      	ldr	r0, [pc, #12]	; (f44 <system_clock_source_osc8m_set_config+0x38>)
     f36:	4003      	ands	r3, r0
     f38:	4313      	orrs	r3, r2
     f3a:	620b      	str	r3, [r1, #32]
}
     f3c:	bd70      	pop	{r4, r5, r6, pc}
     f3e:	46c0      	nop			; (mov r8, r8)
     f40:	40000800 	.word	0x40000800
     f44:	fffffcff 	.word	0xfffffcff

00000f48 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     f48:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     f4a:	7a03      	ldrb	r3, [r0, #8]
     f4c:	069b      	lsls	r3, r3, #26
     f4e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     f50:	8942      	ldrh	r2, [r0, #10]
     f52:	0592      	lsls	r2, r2, #22
     f54:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     f56:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
     f58:	4918      	ldr	r1, [pc, #96]	; (fbc <system_clock_source_dfll_set_config+0x74>)
     f5a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     f5c:	7983      	ldrb	r3, [r0, #6]
     f5e:	79c2      	ldrb	r2, [r0, #7]
     f60:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
     f62:	8842      	ldrh	r2, [r0, #2]
     f64:	8884      	ldrh	r4, [r0, #4]
     f66:	4322      	orrs	r2, r4
     f68:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     f6a:	7842      	ldrb	r2, [r0, #1]
     f6c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
     f6e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
     f70:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     f72:	7803      	ldrb	r3, [r0, #0]
     f74:	2b04      	cmp	r3, #4
     f76:	d011      	beq.n	f9c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     f78:	2b20      	cmp	r3, #32
     f7a:	d10e      	bne.n	f9a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     f7c:	7b03      	ldrb	r3, [r0, #12]
     f7e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     f80:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     f82:	4313      	orrs	r3, r2
     f84:	89c2      	ldrh	r2, [r0, #14]
     f86:	0412      	lsls	r2, r2, #16
     f88:	490d      	ldr	r1, [pc, #52]	; (fc0 <system_clock_source_dfll_set_config+0x78>)
     f8a:	400a      	ands	r2, r1
     f8c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     f8e:	4a0b      	ldr	r2, [pc, #44]	; (fbc <system_clock_source_dfll_set_config+0x74>)
     f90:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
     f92:	6811      	ldr	r1, [r2, #0]
     f94:	4b0b      	ldr	r3, [pc, #44]	; (fc4 <system_clock_source_dfll_set_config+0x7c>)
     f96:	430b      	orrs	r3, r1
     f98:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
     f9a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     f9c:	7b03      	ldrb	r3, [r0, #12]
     f9e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     fa0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     fa2:	4313      	orrs	r3, r2
     fa4:	89c2      	ldrh	r2, [r0, #14]
     fa6:	0412      	lsls	r2, r2, #16
     fa8:	4905      	ldr	r1, [pc, #20]	; (fc0 <system_clock_source_dfll_set_config+0x78>)
     faa:	400a      	ands	r2, r1
     fac:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     fae:	4a03      	ldr	r2, [pc, #12]	; (fbc <system_clock_source_dfll_set_config+0x74>)
     fb0:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     fb2:	6813      	ldr	r3, [r2, #0]
     fb4:	2104      	movs	r1, #4
     fb6:	430b      	orrs	r3, r1
     fb8:	6013      	str	r3, [r2, #0]
     fba:	e7ee      	b.n	f9a <system_clock_source_dfll_set_config+0x52>
     fbc:	20000138 	.word	0x20000138
     fc0:	03ff0000 	.word	0x03ff0000
     fc4:	00000424 	.word	0x00000424

00000fc8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     fc8:	2808      	cmp	r0, #8
     fca:	d803      	bhi.n	fd4 <system_clock_source_enable+0xc>
     fcc:	0080      	lsls	r0, r0, #2
     fce:	4b25      	ldr	r3, [pc, #148]	; (1064 <system_clock_source_enable+0x9c>)
     fd0:	581b      	ldr	r3, [r3, r0]
     fd2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     fd4:	2017      	movs	r0, #23
     fd6:	e044      	b.n	1062 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     fd8:	4a23      	ldr	r2, [pc, #140]	; (1068 <system_clock_source_enable+0xa0>)
     fda:	6a13      	ldr	r3, [r2, #32]
     fdc:	2102      	movs	r1, #2
     fde:	430b      	orrs	r3, r1
     fe0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     fe2:	2000      	movs	r0, #0
     fe4:	e03d      	b.n	1062 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     fe6:	4a20      	ldr	r2, [pc, #128]	; (1068 <system_clock_source_enable+0xa0>)
     fe8:	6993      	ldr	r3, [r2, #24]
     fea:	2102      	movs	r1, #2
     fec:	430b      	orrs	r3, r1
     fee:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     ff0:	2000      	movs	r0, #0
		break;
     ff2:	e036      	b.n	1062 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     ff4:	4a1c      	ldr	r2, [pc, #112]	; (1068 <system_clock_source_enable+0xa0>)
     ff6:	8a13      	ldrh	r3, [r2, #16]
     ff8:	2102      	movs	r1, #2
     ffa:	430b      	orrs	r3, r1
     ffc:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     ffe:	2000      	movs	r0, #0
		break;
    1000:	e02f      	b.n	1062 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1002:	4a19      	ldr	r2, [pc, #100]	; (1068 <system_clock_source_enable+0xa0>)
    1004:	8a93      	ldrh	r3, [r2, #20]
    1006:	2102      	movs	r1, #2
    1008:	430b      	orrs	r3, r1
    100a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    100c:	2000      	movs	r0, #0
		break;
    100e:	e028      	b.n	1062 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1010:	4916      	ldr	r1, [pc, #88]	; (106c <system_clock_source_enable+0xa4>)
    1012:	680b      	ldr	r3, [r1, #0]
    1014:	2202      	movs	r2, #2
    1016:	4313      	orrs	r3, r2
    1018:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    101a:	4b13      	ldr	r3, [pc, #76]	; (1068 <system_clock_source_enable+0xa0>)
    101c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    101e:	0019      	movs	r1, r3
    1020:	320e      	adds	r2, #14
    1022:	68cb      	ldr	r3, [r1, #12]
    1024:	421a      	tst	r2, r3
    1026:	d0fc      	beq.n	1022 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1028:	4a10      	ldr	r2, [pc, #64]	; (106c <system_clock_source_enable+0xa4>)
    102a:	6891      	ldr	r1, [r2, #8]
    102c:	4b0e      	ldr	r3, [pc, #56]	; (1068 <system_clock_source_enable+0xa0>)
    102e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1030:	6852      	ldr	r2, [r2, #4]
    1032:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1034:	2200      	movs	r2, #0
    1036:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1038:	0019      	movs	r1, r3
    103a:	3210      	adds	r2, #16
    103c:	68cb      	ldr	r3, [r1, #12]
    103e:	421a      	tst	r2, r3
    1040:	d0fc      	beq.n	103c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1042:	4b0a      	ldr	r3, [pc, #40]	; (106c <system_clock_source_enable+0xa4>)
    1044:	681b      	ldr	r3, [r3, #0]
    1046:	b29b      	uxth	r3, r3
    1048:	4a07      	ldr	r2, [pc, #28]	; (1068 <system_clock_source_enable+0xa0>)
    104a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    104c:	2000      	movs	r0, #0
    104e:	e008      	b.n	1062 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1050:	4905      	ldr	r1, [pc, #20]	; (1068 <system_clock_source_enable+0xa0>)
    1052:	2244      	movs	r2, #68	; 0x44
    1054:	5c8b      	ldrb	r3, [r1, r2]
    1056:	2002      	movs	r0, #2
    1058:	4303      	orrs	r3, r0
    105a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    105c:	2000      	movs	r0, #0
		break;
    105e:	e000      	b.n	1062 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1060:	2000      	movs	r0, #0
}
    1062:	4770      	bx	lr
    1064:	000033c4 	.word	0x000033c4
    1068:	40000800 	.word	0x40000800
    106c:	20000138 	.word	0x20000138

00001070 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1070:	b570      	push	{r4, r5, r6, lr}
    1072:	b08a      	sub	sp, #40	; 0x28
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1074:	22c2      	movs	r2, #194	; 0xc2
    1076:	00d2      	lsls	r2, r2, #3
    1078:	4b36      	ldr	r3, [pc, #216]	; (1154 <system_clock_init+0xe4>)
    107a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    107c:	4a36      	ldr	r2, [pc, #216]	; (1158 <system_clock_init+0xe8>)
    107e:	6853      	ldr	r3, [r2, #4]
    1080:	211e      	movs	r1, #30
    1082:	438b      	bics	r3, r1
    1084:	391a      	subs	r1, #26
    1086:	430b      	orrs	r3, r1
    1088:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    108a:	2201      	movs	r2, #1
    108c:	ab01      	add	r3, sp, #4
    108e:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1090:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1092:	4d32      	ldr	r5, [pc, #200]	; (115c <system_clock_init+0xec>)
    1094:	b2e0      	uxtb	r0, r4
    1096:	a901      	add	r1, sp, #4
    1098:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    109a:	3401      	adds	r4, #1
    109c:	2c18      	cmp	r4, #24
    109e:	d1f9      	bne.n	1094 <system_clock_init+0x24>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    10a0:	ab05      	add	r3, sp, #20
    10a2:	2200      	movs	r2, #0
    10a4:	2100      	movs	r1, #0
    10a6:	8059      	strh	r1, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    10a8:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    10aa:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    10ac:	3120      	adds	r1, #32
    10ae:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    10b0:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    10b2:	4b2b      	ldr	r3, [pc, #172]	; (1160 <system_clock_init+0xf0>)
    10b4:	681b      	ldr	r3, [r3, #0]
    10b6:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    10b8:	2b3f      	cmp	r3, #63	; 0x3f
    10ba:	d049      	beq.n	1150 <system_clock_init+0xe0>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    10bc:	a805      	add	r0, sp, #20
    10be:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    10c0:	2307      	movs	r3, #7
    10c2:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10;
    10c4:	3303      	adds	r3, #3
    10c6:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    10c8:	4b26      	ldr	r3, [pc, #152]	; (1164 <system_clock_init+0xf4>)
    10ca:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    10cc:	3bff      	subs	r3, #255	; 0xff
    10ce:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    10d0:	4b25      	ldr	r3, [pc, #148]	; (1168 <system_clock_init+0xf8>)
    10d2:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    10d4:	4b25      	ldr	r3, [pc, #148]	; (116c <system_clock_init+0xfc>)
    10d6:	4798      	blx	r3
	config->run_in_standby  = false;
    10d8:	a804      	add	r0, sp, #16
    10da:	2400      	movs	r4, #0
    10dc:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    10de:	2601      	movs	r6, #1
    10e0:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    10e2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    10e4:	4b22      	ldr	r3, [pc, #136]	; (1170 <system_clock_init+0x100>)
    10e6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    10e8:	2006      	movs	r0, #6
    10ea:	4d22      	ldr	r5, [pc, #136]	; (1174 <system_clock_init+0x104>)
    10ec:	47a8      	blx	r5


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    10ee:	4b22      	ldr	r3, [pc, #136]	; (1178 <system_clock_init+0x108>)
    10f0:	4798      	blx	r3
	config->division_factor    = 1;
    10f2:	a901      	add	r1, sp, #4
    10f4:	604e      	str	r6, [r1, #4]
	config->high_when_disabled = false;
    10f6:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    10f8:	2306      	movs	r3, #6
    10fa:	700b      	strb	r3, [r1, #0]
	config->run_in_standby     = false;
    10fc:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    10fe:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1100:	2003      	movs	r0, #3
    1102:	4b1e      	ldr	r3, [pc, #120]	; (117c <system_clock_init+0x10c>)
    1104:	4798      	blx	r3
    1106:	2003      	movs	r0, #3
    1108:	4b1d      	ldr	r3, [pc, #116]	; (1180 <system_clock_init+0x110>)
    110a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    110c:	2007      	movs	r0, #7
    110e:	47a8      	blx	r5
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1110:	4910      	ldr	r1, [pc, #64]	; (1154 <system_clock_init+0xe4>)
    1112:	2210      	movs	r2, #16
    1114:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1116:	421a      	tst	r2, r3
    1118:	d0fc      	beq.n	1114 <system_clock_init+0xa4>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    111a:	4a0e      	ldr	r2, [pc, #56]	; (1154 <system_clock_init+0xe4>)
    111c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    111e:	2180      	movs	r1, #128	; 0x80
    1120:	430b      	orrs	r3, r1
    1122:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    1124:	4a17      	ldr	r2, [pc, #92]	; (1184 <system_clock_init+0x114>)
    1126:	2300      	movs	r3, #0
    1128:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    112a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    112c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    112e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1130:	a901      	add	r1, sp, #4
    1132:	2201      	movs	r2, #1
    1134:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1136:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    1138:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    113a:	3307      	adds	r3, #7
    113c:	700b      	strb	r3, [r1, #0]
    113e:	720a      	strb	r2, [r1, #8]
    1140:	2000      	movs	r0, #0
    1142:	4b0e      	ldr	r3, [pc, #56]	; (117c <system_clock_init+0x10c>)
    1144:	4798      	blx	r3
    1146:	2000      	movs	r0, #0
    1148:	4b0d      	ldr	r3, [pc, #52]	; (1180 <system_clock_init+0x110>)
    114a:	4798      	blx	r3
#endif
}
    114c:	b00a      	add	sp, #40	; 0x28
    114e:	bd70      	pop	{r4, r5, r6, pc}
		coarse = 0x1f;
    1150:	3b20      	subs	r3, #32
    1152:	e7b3      	b.n	10bc <system_clock_init+0x4c>
    1154:	40000800 	.word	0x40000800
    1158:	41004000 	.word	0x41004000
    115c:	000013c1 	.word	0x000013c1
    1160:	00806024 	.word	0x00806024
    1164:	000001ff 	.word	0x000001ff
    1168:	ffffbb80 	.word	0xffffbb80
    116c:	00000f49 	.word	0x00000f49
    1170:	00000f0d 	.word	0x00000f0d
    1174:	00000fc9 	.word	0x00000fc9
    1178:	00001189 	.word	0x00001189
    117c:	000011ad 	.word	0x000011ad
    1180:	00001265 	.word	0x00001265
    1184:	40000400 	.word	0x40000400

00001188 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1188:	4a06      	ldr	r2, [pc, #24]	; (11a4 <system_gclk_init+0x1c>)
    118a:	6993      	ldr	r3, [r2, #24]
    118c:	2108      	movs	r1, #8
    118e:	430b      	orrs	r3, r1
    1190:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1192:	2201      	movs	r2, #1
    1194:	4b04      	ldr	r3, [pc, #16]	; (11a8 <system_gclk_init+0x20>)
    1196:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1198:	0019      	movs	r1, r3
    119a:	780b      	ldrb	r3, [r1, #0]
    119c:	4213      	tst	r3, r2
    119e:	d1fc      	bne.n	119a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    11a0:	4770      	bx	lr
    11a2:	46c0      	nop			; (mov r8, r8)
    11a4:	40000400 	.word	0x40000400
    11a8:	40000c00 	.word	0x40000c00

000011ac <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    11ac:	b570      	push	{r4, r5, r6, lr}
    11ae:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    11b0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    11b2:	780d      	ldrb	r5, [r1, #0]
    11b4:	022d      	lsls	r5, r5, #8
    11b6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    11b8:	784b      	ldrb	r3, [r1, #1]
    11ba:	2b00      	cmp	r3, #0
    11bc:	d002      	beq.n	11c4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    11be:	2380      	movs	r3, #128	; 0x80
    11c0:	02db      	lsls	r3, r3, #11
    11c2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    11c4:	7a4b      	ldrb	r3, [r1, #9]
    11c6:	2b00      	cmp	r3, #0
    11c8:	d002      	beq.n	11d0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    11ca:	2380      	movs	r3, #128	; 0x80
    11cc:	031b      	lsls	r3, r3, #12
    11ce:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    11d0:	6848      	ldr	r0, [r1, #4]
    11d2:	2801      	cmp	r0, #1
    11d4:	d910      	bls.n	11f8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    11d6:	1e43      	subs	r3, r0, #1
    11d8:	4218      	tst	r0, r3
    11da:	d134      	bne.n	1246 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    11dc:	2802      	cmp	r0, #2
    11de:	d930      	bls.n	1242 <system_gclk_gen_set_config+0x96>
    11e0:	2302      	movs	r3, #2
    11e2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    11e4:	3201      	adds	r2, #1
						mask <<= 1) {
    11e6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    11e8:	4298      	cmp	r0, r3
    11ea:	d8fb      	bhi.n	11e4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    11ec:	0212      	lsls	r2, r2, #8
    11ee:	4332      	orrs	r2, r6
    11f0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    11f2:	2380      	movs	r3, #128	; 0x80
    11f4:	035b      	lsls	r3, r3, #13
    11f6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    11f8:	7a0b      	ldrb	r3, [r1, #8]
    11fa:	2b00      	cmp	r3, #0
    11fc:	d002      	beq.n	1204 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    11fe:	2380      	movs	r3, #128	; 0x80
    1200:	039b      	lsls	r3, r3, #14
    1202:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1204:	4a13      	ldr	r2, [pc, #76]	; (1254 <system_gclk_gen_set_config+0xa8>)
    1206:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1208:	b25b      	sxtb	r3, r3
    120a:	2b00      	cmp	r3, #0
    120c:	dbfb      	blt.n	1206 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    120e:	4b12      	ldr	r3, [pc, #72]	; (1258 <system_gclk_gen_set_config+0xac>)
    1210:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1212:	4b12      	ldr	r3, [pc, #72]	; (125c <system_gclk_gen_set_config+0xb0>)
    1214:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1216:	4a0f      	ldr	r2, [pc, #60]	; (1254 <system_gclk_gen_set_config+0xa8>)
    1218:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    121a:	b25b      	sxtb	r3, r3
    121c:	2b00      	cmp	r3, #0
    121e:	dbfb      	blt.n	1218 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1220:	4b0c      	ldr	r3, [pc, #48]	; (1254 <system_gclk_gen_set_config+0xa8>)
    1222:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1224:	001a      	movs	r2, r3
    1226:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1228:	b25b      	sxtb	r3, r3
    122a:	2b00      	cmp	r3, #0
    122c:	dbfb      	blt.n	1226 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    122e:	4a09      	ldr	r2, [pc, #36]	; (1254 <system_gclk_gen_set_config+0xa8>)
    1230:	6853      	ldr	r3, [r2, #4]
    1232:	2180      	movs	r1, #128	; 0x80
    1234:	0249      	lsls	r1, r1, #9
    1236:	400b      	ands	r3, r1
    1238:	431d      	orrs	r5, r3
    123a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    123c:	4b08      	ldr	r3, [pc, #32]	; (1260 <system_gclk_gen_set_config+0xb4>)
    123e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1240:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1242:	2200      	movs	r2, #0
    1244:	e7d2      	b.n	11ec <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1246:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1248:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    124a:	2380      	movs	r3, #128	; 0x80
    124c:	029b      	lsls	r3, r3, #10
    124e:	431d      	orrs	r5, r3
    1250:	e7d2      	b.n	11f8 <system_gclk_gen_set_config+0x4c>
    1252:	46c0      	nop			; (mov r8, r8)
    1254:	40000c00 	.word	0x40000c00
    1258:	00000c89 	.word	0x00000c89
    125c:	40000c08 	.word	0x40000c08
    1260:	00000cc9 	.word	0x00000cc9

00001264 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1264:	b510      	push	{r4, lr}
    1266:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1268:	4a0b      	ldr	r2, [pc, #44]	; (1298 <system_gclk_gen_enable+0x34>)
    126a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    126c:	b25b      	sxtb	r3, r3
    126e:	2b00      	cmp	r3, #0
    1270:	dbfb      	blt.n	126a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1272:	4b0a      	ldr	r3, [pc, #40]	; (129c <system_gclk_gen_enable+0x38>)
    1274:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1276:	4b0a      	ldr	r3, [pc, #40]	; (12a0 <system_gclk_gen_enable+0x3c>)
    1278:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    127a:	4a07      	ldr	r2, [pc, #28]	; (1298 <system_gclk_gen_enable+0x34>)
    127c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    127e:	b25b      	sxtb	r3, r3
    1280:	2b00      	cmp	r3, #0
    1282:	dbfb      	blt.n	127c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1284:	4a04      	ldr	r2, [pc, #16]	; (1298 <system_gclk_gen_enable+0x34>)
    1286:	6851      	ldr	r1, [r2, #4]
    1288:	2380      	movs	r3, #128	; 0x80
    128a:	025b      	lsls	r3, r3, #9
    128c:	430b      	orrs	r3, r1
    128e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1290:	4b04      	ldr	r3, [pc, #16]	; (12a4 <system_gclk_gen_enable+0x40>)
    1292:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1294:	bd10      	pop	{r4, pc}
    1296:	46c0      	nop			; (mov r8, r8)
    1298:	40000c00 	.word	0x40000c00
    129c:	00000c89 	.word	0x00000c89
    12a0:	40000c04 	.word	0x40000c04
    12a4:	00000cc9 	.word	0x00000cc9

000012a8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    12a8:	b570      	push	{r4, r5, r6, lr}
    12aa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12ac:	4a1a      	ldr	r2, [pc, #104]	; (1318 <system_gclk_gen_get_hz+0x70>)
    12ae:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    12b0:	b25b      	sxtb	r3, r3
    12b2:	2b00      	cmp	r3, #0
    12b4:	dbfb      	blt.n	12ae <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    12b6:	4b19      	ldr	r3, [pc, #100]	; (131c <system_gclk_gen_get_hz+0x74>)
    12b8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    12ba:	4b19      	ldr	r3, [pc, #100]	; (1320 <system_gclk_gen_get_hz+0x78>)
    12bc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12be:	4a16      	ldr	r2, [pc, #88]	; (1318 <system_gclk_gen_get_hz+0x70>)
    12c0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    12c2:	b25b      	sxtb	r3, r3
    12c4:	2b00      	cmp	r3, #0
    12c6:	dbfb      	blt.n	12c0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    12c8:	4e13      	ldr	r6, [pc, #76]	; (1318 <system_gclk_gen_get_hz+0x70>)
    12ca:	6870      	ldr	r0, [r6, #4]
    12cc:	04c0      	lsls	r0, r0, #19
    12ce:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    12d0:	4b14      	ldr	r3, [pc, #80]	; (1324 <system_gclk_gen_get_hz+0x7c>)
    12d2:	4798      	blx	r3
    12d4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    12d6:	4b12      	ldr	r3, [pc, #72]	; (1320 <system_gclk_gen_get_hz+0x78>)
    12d8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    12da:	6876      	ldr	r6, [r6, #4]
    12dc:	02f6      	lsls	r6, r6, #11
    12de:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    12e0:	4b11      	ldr	r3, [pc, #68]	; (1328 <system_gclk_gen_get_hz+0x80>)
    12e2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12e4:	4a0c      	ldr	r2, [pc, #48]	; (1318 <system_gclk_gen_get_hz+0x70>)
    12e6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    12e8:	b25b      	sxtb	r3, r3
    12ea:	2b00      	cmp	r3, #0
    12ec:	dbfb      	blt.n	12e6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    12ee:	4b0a      	ldr	r3, [pc, #40]	; (1318 <system_gclk_gen_get_hz+0x70>)
    12f0:	689c      	ldr	r4, [r3, #8]
    12f2:	0224      	lsls	r4, r4, #8
    12f4:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    12f6:	4b0d      	ldr	r3, [pc, #52]	; (132c <system_gclk_gen_get_hz+0x84>)
    12f8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    12fa:	2e00      	cmp	r6, #0
    12fc:	d107      	bne.n	130e <system_gclk_gen_get_hz+0x66>
    12fe:	2c01      	cmp	r4, #1
    1300:	d907      	bls.n	1312 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1302:	0021      	movs	r1, r4
    1304:	0028      	movs	r0, r5
    1306:	4b0a      	ldr	r3, [pc, #40]	; (1330 <system_gclk_gen_get_hz+0x88>)
    1308:	4798      	blx	r3
    130a:	0005      	movs	r5, r0
    130c:	e001      	b.n	1312 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    130e:	3401      	adds	r4, #1
    1310:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1312:	0028      	movs	r0, r5
    1314:	bd70      	pop	{r4, r5, r6, pc}
    1316:	46c0      	nop			; (mov r8, r8)
    1318:	40000c00 	.word	0x40000c00
    131c:	00000c89 	.word	0x00000c89
    1320:	40000c04 	.word	0x40000c04
    1324:	00000e79 	.word	0x00000e79
    1328:	40000c08 	.word	0x40000c08
    132c:	00000cc9 	.word	0x00000cc9
    1330:	00003049 	.word	0x00003049

00001334 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1334:	b510      	push	{r4, lr}
    1336:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1338:	4b06      	ldr	r3, [pc, #24]	; (1354 <system_gclk_chan_enable+0x20>)
    133a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    133c:	4b06      	ldr	r3, [pc, #24]	; (1358 <system_gclk_chan_enable+0x24>)
    133e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1340:	4a06      	ldr	r2, [pc, #24]	; (135c <system_gclk_chan_enable+0x28>)
    1342:	8853      	ldrh	r3, [r2, #2]
    1344:	2180      	movs	r1, #128	; 0x80
    1346:	01c9      	lsls	r1, r1, #7
    1348:	430b      	orrs	r3, r1
    134a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    134c:	4b04      	ldr	r3, [pc, #16]	; (1360 <system_gclk_chan_enable+0x2c>)
    134e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1350:	bd10      	pop	{r4, pc}
    1352:	46c0      	nop			; (mov r8, r8)
    1354:	00000c89 	.word	0x00000c89
    1358:	40000c02 	.word	0x40000c02
    135c:	40000c00 	.word	0x40000c00
    1360:	00000cc9 	.word	0x00000cc9

00001364 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1364:	b510      	push	{r4, lr}
    1366:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1368:	4b0f      	ldr	r3, [pc, #60]	; (13a8 <system_gclk_chan_disable+0x44>)
    136a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    136c:	4b0f      	ldr	r3, [pc, #60]	; (13ac <system_gclk_chan_disable+0x48>)
    136e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1370:	4a0f      	ldr	r2, [pc, #60]	; (13b0 <system_gclk_chan_disable+0x4c>)
    1372:	8853      	ldrh	r3, [r2, #2]
    1374:	051b      	lsls	r3, r3, #20
    1376:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1378:	8853      	ldrh	r3, [r2, #2]
    137a:	490e      	ldr	r1, [pc, #56]	; (13b4 <system_gclk_chan_disable+0x50>)
    137c:	400b      	ands	r3, r1
    137e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1380:	8853      	ldrh	r3, [r2, #2]
    1382:	490d      	ldr	r1, [pc, #52]	; (13b8 <system_gclk_chan_disable+0x54>)
    1384:	400b      	ands	r3, r1
    1386:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1388:	0011      	movs	r1, r2
    138a:	2280      	movs	r2, #128	; 0x80
    138c:	01d2      	lsls	r2, r2, #7
    138e:	884b      	ldrh	r3, [r1, #2]
    1390:	4213      	tst	r3, r2
    1392:	d1fc      	bne.n	138e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1394:	4906      	ldr	r1, [pc, #24]	; (13b0 <system_gclk_chan_disable+0x4c>)
    1396:	884a      	ldrh	r2, [r1, #2]
    1398:	0203      	lsls	r3, r0, #8
    139a:	4806      	ldr	r0, [pc, #24]	; (13b4 <system_gclk_chan_disable+0x50>)
    139c:	4002      	ands	r2, r0
    139e:	4313      	orrs	r3, r2
    13a0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    13a2:	4b06      	ldr	r3, [pc, #24]	; (13bc <system_gclk_chan_disable+0x58>)
    13a4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    13a6:	bd10      	pop	{r4, pc}
    13a8:	00000c89 	.word	0x00000c89
    13ac:	40000c02 	.word	0x40000c02
    13b0:	40000c00 	.word	0x40000c00
    13b4:	fffff0ff 	.word	0xfffff0ff
    13b8:	ffffbfff 	.word	0xffffbfff
    13bc:	00000cc9 	.word	0x00000cc9

000013c0 <system_gclk_chan_set_config>:
{
    13c0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    13c2:	780c      	ldrb	r4, [r1, #0]
    13c4:	0224      	lsls	r4, r4, #8
    13c6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    13c8:	4b02      	ldr	r3, [pc, #8]	; (13d4 <system_gclk_chan_set_config+0x14>)
    13ca:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    13cc:	b2a4      	uxth	r4, r4
    13ce:	4b02      	ldr	r3, [pc, #8]	; (13d8 <system_gclk_chan_set_config+0x18>)
    13d0:	805c      	strh	r4, [r3, #2]
}
    13d2:	bd10      	pop	{r4, pc}
    13d4:	00001365 	.word	0x00001365
    13d8:	40000c00 	.word	0x40000c00

000013dc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    13dc:	b510      	push	{r4, lr}
    13de:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    13e0:	4b06      	ldr	r3, [pc, #24]	; (13fc <system_gclk_chan_get_hz+0x20>)
    13e2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    13e4:	4b06      	ldr	r3, [pc, #24]	; (1400 <system_gclk_chan_get_hz+0x24>)
    13e6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    13e8:	4b06      	ldr	r3, [pc, #24]	; (1404 <system_gclk_chan_get_hz+0x28>)
    13ea:	885c      	ldrh	r4, [r3, #2]
    13ec:	0524      	lsls	r4, r4, #20
    13ee:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    13f0:	4b05      	ldr	r3, [pc, #20]	; (1408 <system_gclk_chan_get_hz+0x2c>)
    13f2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    13f4:	0020      	movs	r0, r4
    13f6:	4b05      	ldr	r3, [pc, #20]	; (140c <system_gclk_chan_get_hz+0x30>)
    13f8:	4798      	blx	r3
}
    13fa:	bd10      	pop	{r4, pc}
    13fc:	00000c89 	.word	0x00000c89
    1400:	40000c02 	.word	0x40000c02
    1404:	40000c00 	.word	0x40000c00
    1408:	00000cc9 	.word	0x00000cc9
    140c:	000012a9 	.word	0x000012a9

00001410 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1410:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1412:	78d3      	ldrb	r3, [r2, #3]
    1414:	2b00      	cmp	r3, #0
    1416:	d135      	bne.n	1484 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1418:	7813      	ldrb	r3, [r2, #0]
    141a:	2b80      	cmp	r3, #128	; 0x80
    141c:	d029      	beq.n	1472 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    141e:	061b      	lsls	r3, r3, #24
    1420:	2480      	movs	r4, #128	; 0x80
    1422:	0264      	lsls	r4, r4, #9
    1424:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1426:	7854      	ldrb	r4, [r2, #1]
    1428:	2502      	movs	r5, #2
    142a:	43ac      	bics	r4, r5
    142c:	d106      	bne.n	143c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    142e:	7894      	ldrb	r4, [r2, #2]
    1430:	2c00      	cmp	r4, #0
    1432:	d120      	bne.n	1476 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1434:	2480      	movs	r4, #128	; 0x80
    1436:	02a4      	lsls	r4, r4, #10
    1438:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    143a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    143c:	7854      	ldrb	r4, [r2, #1]
    143e:	3c01      	subs	r4, #1
    1440:	2c01      	cmp	r4, #1
    1442:	d91c      	bls.n	147e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1444:	040d      	lsls	r5, r1, #16
    1446:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1448:	24a0      	movs	r4, #160	; 0xa0
    144a:	05e4      	lsls	r4, r4, #23
    144c:	432c      	orrs	r4, r5
    144e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1450:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1452:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1454:	24d0      	movs	r4, #208	; 0xd0
    1456:	0624      	lsls	r4, r4, #24
    1458:	432c      	orrs	r4, r5
    145a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    145c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    145e:	78d4      	ldrb	r4, [r2, #3]
    1460:	2c00      	cmp	r4, #0
    1462:	d122      	bne.n	14aa <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1464:	035b      	lsls	r3, r3, #13
    1466:	d51c      	bpl.n	14a2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1468:	7893      	ldrb	r3, [r2, #2]
    146a:	2b01      	cmp	r3, #1
    146c:	d01e      	beq.n	14ac <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    146e:	6141      	str	r1, [r0, #20]
    1470:	e017      	b.n	14a2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1472:	2300      	movs	r3, #0
    1474:	e7d7      	b.n	1426 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1476:	24c0      	movs	r4, #192	; 0xc0
    1478:	02e4      	lsls	r4, r4, #11
    147a:	4323      	orrs	r3, r4
    147c:	e7dd      	b.n	143a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    147e:	4c0d      	ldr	r4, [pc, #52]	; (14b4 <_system_pinmux_config+0xa4>)
    1480:	4023      	ands	r3, r4
    1482:	e7df      	b.n	1444 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1484:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1486:	040c      	lsls	r4, r1, #16
    1488:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    148a:	23a0      	movs	r3, #160	; 0xa0
    148c:	05db      	lsls	r3, r3, #23
    148e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1490:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1492:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1494:	23d0      	movs	r3, #208	; 0xd0
    1496:	061b      	lsls	r3, r3, #24
    1498:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    149a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    149c:	78d3      	ldrb	r3, [r2, #3]
    149e:	2b00      	cmp	r3, #0
    14a0:	d103      	bne.n	14aa <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    14a2:	7853      	ldrb	r3, [r2, #1]
    14a4:	3b01      	subs	r3, #1
    14a6:	2b01      	cmp	r3, #1
    14a8:	d902      	bls.n	14b0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    14aa:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    14ac:	6181      	str	r1, [r0, #24]
    14ae:	e7f8      	b.n	14a2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    14b0:	6081      	str	r1, [r0, #8]
}
    14b2:	e7fa      	b.n	14aa <_system_pinmux_config+0x9a>
    14b4:	fffbffff 	.word	0xfffbffff

000014b8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    14b8:	b510      	push	{r4, lr}
    14ba:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    14bc:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    14be:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    14c0:	2900      	cmp	r1, #0
    14c2:	d104      	bne.n	14ce <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    14c4:	0943      	lsrs	r3, r0, #5
    14c6:	01db      	lsls	r3, r3, #7
    14c8:	4905      	ldr	r1, [pc, #20]	; (14e0 <system_pinmux_pin_set_config+0x28>)
    14ca:	468c      	mov	ip, r1
    14cc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    14ce:	241f      	movs	r4, #31
    14d0:	4020      	ands	r0, r4
    14d2:	2101      	movs	r1, #1
    14d4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    14d6:	0018      	movs	r0, r3
    14d8:	4b02      	ldr	r3, [pc, #8]	; (14e4 <system_pinmux_pin_set_config+0x2c>)
    14da:	4798      	blx	r3
}
    14dc:	bd10      	pop	{r4, pc}
    14de:	46c0      	nop			; (mov r8, r8)
    14e0:	41004400 	.word	0x41004400
    14e4:	00001411 	.word	0x00001411

000014e8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    14e8:	4770      	bx	lr
	...

000014ec <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
 {
    14ec:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    14ee:	4b05      	ldr	r3, [pc, #20]	; (1504 <system_init+0x18>)
    14f0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    14f2:	4b05      	ldr	r3, [pc, #20]	; (1508 <system_init+0x1c>)
    14f4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    14f6:	4b05      	ldr	r3, [pc, #20]	; (150c <system_init+0x20>)
    14f8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    14fa:	4b05      	ldr	r3, [pc, #20]	; (1510 <system_init+0x24>)
    14fc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    14fe:	4b05      	ldr	r3, [pc, #20]	; (1514 <system_init+0x28>)
    1500:	4798      	blx	r3
}
    1502:	bd10      	pop	{r4, pc}
    1504:	00001071 	.word	0x00001071
    1508:	00000cf9 	.word	0x00000cf9
    150c:	000014e9 	.word	0x000014e9
    1510:	00000de9 	.word	0x00000de9
    1514:	000014e9 	.word	0x000014e9

00001518 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    1518:	b510      	push	{r4, lr}
    151a:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    151c:	ab03      	add	r3, sp, #12
    151e:	2200      	movs	r2, #0
    1520:	701a      	strb	r2, [r3, #0]
    1522:	3203      	adds	r2, #3
    1524:	705a      	strb	r2, [r3, #1]
    1526:	3a01      	subs	r2, #1
    1528:	709a      	strb	r2, [r3, #2]
    152a:	3a01      	subs	r2, #1
    152c:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    152e:	4b27      	ldr	r3, [pc, #156]	; (15cc <udd_sleep_mode+0xb4>)
    1530:	781b      	ldrb	r3, [r3, #0]
    1532:	4283      	cmp	r3, r0
    1534:	d007      	beq.n	1546 <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    1536:	2800      	cmp	r0, #0
    1538:	d107      	bne.n	154a <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    153a:	4b24      	ldr	r3, [pc, #144]	; (15cc <udd_sleep_mode+0xb4>)
    153c:	781b      	ldrb	r3, [r3, #0]
    153e:	2b00      	cmp	r3, #0
    1540:	d123      	bne.n	158a <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    1542:	4b22      	ldr	r3, [pc, #136]	; (15cc <udd_sleep_mode+0xb4>)
    1544:	7018      	strb	r0, [r3, #0]
}
    1546:	b004      	add	sp, #16
    1548:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    154a:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    154c:	5c1b      	ldrb	r3, [r3, r0]
    154e:	4a20      	ldr	r2, [pc, #128]	; (15d0 <udd_sleep_mode+0xb8>)
    1550:	5cd2      	ldrb	r2, [r2, r3]
    1552:	2aff      	cmp	r2, #255	; 0xff
    1554:	d100      	bne.n	1558 <udd_sleep_mode+0x40>
    1556:	e7fe      	b.n	1556 <udd_sleep_mode+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1558:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    155c:	4251      	negs	r1, r2
    155e:	414a      	adcs	r2, r1
    1560:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1562:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1564:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1568:	2100      	movs	r1, #0
    156a:	4a1a      	ldr	r2, [pc, #104]	; (15d4 <udd_sleep_mode+0xbc>)
    156c:	7011      	strb	r1, [r2, #0]
	return flags;
    156e:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1570:	4917      	ldr	r1, [pc, #92]	; (15d0 <udd_sleep_mode+0xb8>)
    1572:	5cca      	ldrb	r2, [r1, r3]
    1574:	3201      	adds	r2, #1
    1576:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    1578:	2c00      	cmp	r4, #0
    157a:	d0de      	beq.n	153a <udd_sleep_mode+0x22>
		cpu_irq_enable();
    157c:	2201      	movs	r2, #1
    157e:	4b15      	ldr	r3, [pc, #84]	; (15d4 <udd_sleep_mode+0xbc>)
    1580:	701a      	strb	r2, [r3, #0]
    1582:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1586:	b662      	cpsie	i
    1588:	e7d7      	b.n	153a <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    158a:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    158c:	5cd3      	ldrb	r3, [r2, r3]
    158e:	4a10      	ldr	r2, [pc, #64]	; (15d0 <udd_sleep_mode+0xb8>)
    1590:	5cd2      	ldrb	r2, [r2, r3]
    1592:	2a00      	cmp	r2, #0
    1594:	d100      	bne.n	1598 <udd_sleep_mode+0x80>
    1596:	e7fe      	b.n	1596 <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1598:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    159c:	4251      	negs	r1, r2
    159e:	414a      	adcs	r2, r1
    15a0:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    15a2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    15a4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    15a8:	2100      	movs	r1, #0
    15aa:	4a0a      	ldr	r2, [pc, #40]	; (15d4 <udd_sleep_mode+0xbc>)
    15ac:	7011      	strb	r1, [r2, #0]
	return flags;
    15ae:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    15b0:	4907      	ldr	r1, [pc, #28]	; (15d0 <udd_sleep_mode+0xb8>)
    15b2:	5cca      	ldrb	r2, [r1, r3]
    15b4:	3a01      	subs	r2, #1
    15b6:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    15b8:	2c00      	cmp	r4, #0
    15ba:	d0c2      	beq.n	1542 <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    15bc:	2201      	movs	r2, #1
    15be:	4b05      	ldr	r3, [pc, #20]	; (15d4 <udd_sleep_mode+0xbc>)
    15c0:	701a      	strb	r2, [r3, #0]
    15c2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    15c6:	b662      	cpsie	i
    15c8:	e7bb      	b.n	1542 <udd_sleep_mode+0x2a>
    15ca:	46c0      	nop			; (mov r8, r8)
    15cc:	200001a8 	.word	0x200001a8
    15d0:	200001c0 	.word	0x200001c0
    15d4:	200000df 	.word	0x200000df

000015d8 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    15d8:	0643      	lsls	r3, r0, #25
    15da:	d00b      	beq.n	15f4 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    15dc:	230f      	movs	r3, #15
    15de:	4003      	ands	r3, r0
    15e0:	005b      	lsls	r3, r3, #1
    15e2:	09c0      	lsrs	r0, r0, #7
    15e4:	1818      	adds	r0, r3, r0
    15e6:	3802      	subs	r0, #2
    15e8:	0083      	lsls	r3, r0, #2
    15ea:	1818      	adds	r0, r3, r0
    15ec:	0080      	lsls	r0, r0, #2
    15ee:	4b02      	ldr	r3, [pc, #8]	; (15f8 <udd_ep_get_job+0x20>)
    15f0:	1818      	adds	r0, r3, r0
	}
}
    15f2:	4770      	bx	lr
		return NULL;
    15f4:	2000      	movs	r0, #0
    15f6:	e7fc      	b.n	15f2 <udd_ep_get_job+0x1a>
    15f8:	20000158 	.word	0x20000158

000015fc <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    15fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    15fe:	46d6      	mov	lr, sl
    1600:	464f      	mov	r7, r9
    1602:	4646      	mov	r6, r8
    1604:	b5c0      	push	{r6, r7, lr}
    1606:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    1608:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    160a:	b26b      	sxtb	r3, r5
    160c:	2b00      	cmp	r3, #0
    160e:	db26      	blt.n	165e <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    1610:	0028      	movs	r0, r5
    1612:	4b5e      	ldr	r3, [pc, #376]	; (178c <udd_ep_transfer_process+0x190>)
    1614:	4798      	blx	r3
    1616:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    1618:	270f      	movs	r7, #15
    161a:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    161c:	8a03      	ldrh	r3, [r0, #16]
    161e:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    1620:	464b      	mov	r3, r9
    1622:	881b      	ldrh	r3, [r3, #0]
    1624:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    1626:	7c83      	ldrb	r3, [r0, #18]
    1628:	075b      	lsls	r3, r3, #29
    162a:	d46a      	bmi.n	1702 <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    162c:	68e3      	ldr	r3, [r4, #12]
    162e:	4453      	add	r3, sl
    1630:	001e      	movs	r6, r3
    1632:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    1634:	68a3      	ldr	r3, [r4, #8]
    1636:	429e      	cmp	r6, r3
    1638:	d800      	bhi.n	163c <udd_ep_transfer_process+0x40>
    163a:	e074      	b.n	1726 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    163c:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    163e:	7ca3      	ldrb	r3, [r4, #18]
    1640:	2201      	movs	r2, #1
    1642:	4393      	bics	r3, r2
    1644:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    1646:	6823      	ldr	r3, [r4, #0]
    1648:	2b00      	cmp	r3, #0
    164a:	d003      	beq.n	1654 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    164c:	68e1      	ldr	r1, [r4, #12]
    164e:	002a      	movs	r2, r5
    1650:	2000      	movs	r0, #0
    1652:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    1654:	bc1c      	pop	{r2, r3, r4}
    1656:	4690      	mov	r8, r2
    1658:	4699      	mov	r9, r3
    165a:	46a2      	mov	sl, r4
    165c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    165e:	0028      	movs	r0, r5
    1660:	4b4a      	ldr	r3, [pc, #296]	; (178c <udd_ep_transfer_process+0x190>)
    1662:	4798      	blx	r3
    1664:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    1666:	270f      	movs	r7, #15
    1668:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    166a:	8a03      	ldrh	r3, [r0, #16]
    166c:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    166e:	464b      	mov	r3, r9
    1670:	885e      	ldrh	r6, [r3, #2]
    1672:	68c3      	ldr	r3, [r0, #12]
    1674:	469c      	mov	ip, r3
    1676:	4466      	add	r6, ip
    1678:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    167a:	6881      	ldr	r1, [r0, #8]
    167c:	428e      	cmp	r6, r1
    167e:	d025      	beq.n	16cc <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1680:	1b8d      	subs	r5, r1, r6
    1682:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1684:	4b42      	ldr	r3, [pc, #264]	; (1790 <udd_ep_transfer_process+0x194>)
    1686:	429d      	cmp	r5, r3
    1688:	d906      	bls.n	1698 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    168a:	001d      	movs	r5, r3
    168c:	4641      	mov	r1, r8
    168e:	0018      	movs	r0, r3
    1690:	4b40      	ldr	r3, [pc, #256]	; (1794 <udd_ep_transfer_process+0x198>)
    1692:	4798      	blx	r3
    1694:	1a6d      	subs	r5, r5, r1
    1696:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    1698:	7ca2      	ldrb	r2, [r4, #18]
    169a:	2300      	movs	r3, #0
    169c:	0792      	lsls	r2, r2, #30
    169e:	d507      	bpl.n	16b0 <udd_ep_transfer_process+0xb4>
    16a0:	4641      	mov	r1, r8
    16a2:	0028      	movs	r0, r5
    16a4:	4b3c      	ldr	r3, [pc, #240]	; (1798 <udd_ep_transfer_process+0x19c>)
    16a6:	4798      	blx	r3
    16a8:	b289      	uxth	r1, r1
    16aa:	424b      	negs	r3, r1
    16ac:	414b      	adcs	r3, r1
    16ae:	b2db      	uxtb	r3, r3
    16b0:	005b      	lsls	r3, r3, #1
    16b2:	7ca2      	ldrb	r2, [r4, #18]
    16b4:	2102      	movs	r1, #2
    16b6:	438a      	bics	r2, r1
    16b8:	4313      	orrs	r3, r2
    16ba:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    16bc:	6862      	ldr	r2, [r4, #4]
    16be:	1992      	adds	r2, r2, r6
    16c0:	002b      	movs	r3, r5
    16c2:	0039      	movs	r1, r7
    16c4:	4835      	ldr	r0, [pc, #212]	; (179c <udd_ep_transfer_process+0x1a0>)
    16c6:	4c36      	ldr	r4, [pc, #216]	; (17a0 <udd_ep_transfer_process+0x1a4>)
    16c8:	47a0      	blx	r4
    16ca:	e7c3      	b.n	1654 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    16cc:	7c83      	ldrb	r3, [r0, #18]
    16ce:	079b      	lsls	r3, r3, #30
    16d0:	d40b      	bmi.n	16ea <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    16d2:	7c83      	ldrb	r3, [r0, #18]
    16d4:	2201      	movs	r2, #1
    16d6:	4393      	bics	r3, r2
    16d8:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    16da:	6803      	ldr	r3, [r0, #0]
    16dc:	2b00      	cmp	r3, #0
    16de:	d0b9      	beq.n	1654 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    16e0:	002a      	movs	r2, r5
    16e2:	0031      	movs	r1, r6
    16e4:	2000      	movs	r0, #0
    16e6:	4798      	blx	r3
    16e8:	e7b4      	b.n	1654 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    16ea:	7c83      	ldrb	r3, [r0, #18]
    16ec:	2202      	movs	r2, #2
    16ee:	4393      	bics	r3, r2
    16f0:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    16f2:	6842      	ldr	r2, [r0, #4]
    16f4:	1992      	adds	r2, r2, r6
    16f6:	2300      	movs	r3, #0
    16f8:	0039      	movs	r1, r7
    16fa:	4828      	ldr	r0, [pc, #160]	; (179c <udd_ep_transfer_process+0x1a0>)
    16fc:	4c28      	ldr	r4, [pc, #160]	; (17a0 <udd_ep_transfer_process+0x1a4>)
    16fe:	47a0      	blx	r4
    1700:	e7a8      	b.n	1654 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    1702:	6843      	ldr	r3, [r0, #4]
    1704:	68c2      	ldr	r2, [r0, #12]
    1706:	4694      	mov	ip, r2
    1708:	4463      	add	r3, ip
    170a:	001e      	movs	r6, r3
    170c:	4641      	mov	r1, r8
    170e:	6880      	ldr	r0, [r0, #8]
    1710:	4b21      	ldr	r3, [pc, #132]	; (1798 <udd_ep_transfer_process+0x19c>)
    1712:	4798      	blx	r3
    1714:	000a      	movs	r2, r1
    1716:	1e7b      	subs	r3, r7, #1
    1718:	019b      	lsls	r3, r3, #6
    171a:	4922      	ldr	r1, [pc, #136]	; (17a4 <udd_ep_transfer_process+0x1a8>)
    171c:	1859      	adds	r1, r3, r1
    171e:	0030      	movs	r0, r6
    1720:	4b21      	ldr	r3, [pc, #132]	; (17a8 <udd_ep_transfer_process+0x1ac>)
    1722:	4798      	blx	r3
    1724:	e782      	b.n	162c <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    1726:	464a      	mov	r2, r9
    1728:	8892      	ldrh	r2, [r2, #4]
    172a:	4552      	cmp	r2, sl
    172c:	d000      	beq.n	1730 <udd_ep_transfer_process+0x134>
    172e:	e786      	b.n	163e <udd_ep_transfer_process+0x42>
    1730:	429e      	cmp	r6, r3
    1732:	d100      	bne.n	1736 <udd_ep_transfer_process+0x13a>
    1734:	e783      	b.n	163e <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1736:	1b9b      	subs	r3, r3, r6
    1738:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    173a:	4b15      	ldr	r3, [pc, #84]	; (1790 <udd_ep_transfer_process+0x194>)
    173c:	429d      	cmp	r5, r3
    173e:	d916      	bls.n	176e <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    1740:	001d      	movs	r5, r3
    1742:	4641      	mov	r1, r8
    1744:	0018      	movs	r0, r3
    1746:	4b13      	ldr	r3, [pc, #76]	; (1794 <udd_ep_transfer_process+0x198>)
    1748:	4798      	blx	r3
    174a:	1a6b      	subs	r3, r5, r1
    174c:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    174e:	4598      	cmp	r8, r3
    1750:	d914      	bls.n	177c <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    1752:	7ca3      	ldrb	r3, [r4, #18]
    1754:	2204      	movs	r2, #4
    1756:	4313      	orrs	r3, r2
    1758:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    175a:	1e7a      	subs	r2, r7, #1
    175c:	0192      	lsls	r2, r2, #6
    175e:	4b11      	ldr	r3, [pc, #68]	; (17a4 <udd_ep_transfer_process+0x1a8>)
    1760:	18d2      	adds	r2, r2, r3
    1762:	4643      	mov	r3, r8
    1764:	0039      	movs	r1, r7
    1766:	480d      	ldr	r0, [pc, #52]	; (179c <udd_ep_transfer_process+0x1a0>)
    1768:	4c10      	ldr	r4, [pc, #64]	; (17ac <udd_ep_transfer_process+0x1b0>)
    176a:	47a0      	blx	r4
    176c:	e772      	b.n	1654 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    176e:	4641      	mov	r1, r8
    1770:	0028      	movs	r0, r5
    1772:	4b09      	ldr	r3, [pc, #36]	; (1798 <udd_ep_transfer_process+0x19c>)
    1774:	4798      	blx	r3
    1776:	1a6b      	subs	r3, r5, r1
    1778:	b29b      	uxth	r3, r3
    177a:	e7e8      	b.n	174e <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    177c:	6862      	ldr	r2, [r4, #4]
    177e:	1992      	adds	r2, r2, r6
    1780:	0039      	movs	r1, r7
    1782:	4806      	ldr	r0, [pc, #24]	; (179c <udd_ep_transfer_process+0x1a0>)
    1784:	4c09      	ldr	r4, [pc, #36]	; (17ac <udd_ep_transfer_process+0x1b0>)
    1786:	47a0      	blx	r4
    1788:	e764      	b.n	1654 <udd_ep_transfer_process+0x58>
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	000015d9 	.word	0x000015d9
    1790:	00001fff 	.word	0x00001fff
    1794:	00003329 	.word	0x00003329
    1798:	00003155 	.word	0x00003155
    179c:	20000288 	.word	0x20000288
    17a0:	00002815 	.word	0x00002815
    17a4:	20000208 	.word	0x20000208
    17a8:	0000337d 	.word	0x0000337d
    17ac:	00002869 	.word	0x00002869

000017b0 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    17b0:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    17b2:	2205      	movs	r2, #5
    17b4:	4b05      	ldr	r3, [pc, #20]	; (17cc <udd_ctrl_stall_data+0x1c>)
    17b6:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    17b8:	4c05      	ldr	r4, [pc, #20]	; (17d0 <udd_ctrl_stall_data+0x20>)
    17ba:	2180      	movs	r1, #128	; 0x80
    17bc:	0020      	movs	r0, r4
    17be:	4b05      	ldr	r3, [pc, #20]	; (17d4 <udd_ctrl_stall_data+0x24>)
    17c0:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    17c2:	2100      	movs	r1, #0
    17c4:	0020      	movs	r0, r4
    17c6:	4b04      	ldr	r3, [pc, #16]	; (17d8 <udd_ctrl_stall_data+0x28>)
    17c8:	4798      	blx	r3
}
    17ca:	bd10      	pop	{r4, pc}
    17cc:	20000156 	.word	0x20000156
    17d0:	20000288 	.word	0x20000288
    17d4:	00002769 	.word	0x00002769
    17d8:	0000278f 	.word	0x0000278f

000017dc <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    17dc:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    17de:	4c08      	ldr	r4, [pc, #32]	; (1800 <_usb_device_lpm_suspend+0x24>)
    17e0:	2106      	movs	r1, #6
    17e2:	0020      	movs	r0, r4
    17e4:	4d07      	ldr	r5, [pc, #28]	; (1804 <_usb_device_lpm_suspend+0x28>)
    17e6:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    17e8:	2104      	movs	r1, #4
    17ea:	0020      	movs	r0, r4
    17ec:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    17ee:	2102      	movs	r1, #2
    17f0:	0020      	movs	r0, r4
    17f2:	4b05      	ldr	r3, [pc, #20]	; (1808 <_usb_device_lpm_suspend+0x2c>)
    17f4:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    17f6:	2002      	movs	r0, #2
    17f8:	4b04      	ldr	r3, [pc, #16]	; (180c <_usb_device_lpm_suspend+0x30>)
    17fa:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    17fc:	bd70      	pop	{r4, r5, r6, pc}
    17fe:	46c0      	nop			; (mov r8, r8)
    1800:	20000288 	.word	0x20000288
    1804:	000022b1 	.word	0x000022b1
    1808:	00002291 	.word	0x00002291
    180c:	00001519 	.word	0x00001519

00001810 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    1810:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    1812:	4b13      	ldr	r3, [pc, #76]	; (1860 <_usb_on_wakeup+0x50>)
    1814:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1816:	069b      	lsls	r3, r3, #26
    1818:	d41c      	bmi.n	1854 <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    181a:	4911      	ldr	r1, [pc, #68]	; (1860 <_usb_on_wakeup+0x50>)
    181c:	22d0      	movs	r2, #208	; 0xd0
    181e:	68cb      	ldr	r3, [r1, #12]
    1820:	4013      	ands	r3, r2
    1822:	2bd0      	cmp	r3, #208	; 0xd0
    1824:	d1fb      	bne.n	181e <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1826:	4c0f      	ldr	r4, [pc, #60]	; (1864 <_usb_on_wakeup+0x54>)
    1828:	2102      	movs	r1, #2
    182a:	0020      	movs	r0, r4
    182c:	4b0e      	ldr	r3, [pc, #56]	; (1868 <_usb_on_wakeup+0x58>)
    182e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1830:	2104      	movs	r1, #4
    1832:	0020      	movs	r0, r4
    1834:	4d0d      	ldr	r5, [pc, #52]	; (186c <_usb_on_wakeup+0x5c>)
    1836:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    1838:	4a0d      	ldr	r2, [pc, #52]	; (1870 <_usb_on_wakeup+0x60>)
    183a:	2106      	movs	r1, #6
    183c:	0020      	movs	r0, r4
    183e:	4b0d      	ldr	r3, [pc, #52]	; (1874 <_usb_on_wakeup+0x64>)
    1840:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1842:	2106      	movs	r1, #6
    1844:	0020      	movs	r0, r4
    1846:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    1848:	2003      	movs	r0, #3
    184a:	4b0b      	ldr	r3, [pc, #44]	; (1878 <_usb_on_wakeup+0x68>)
    184c:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    184e:	4b0b      	ldr	r3, [pc, #44]	; (187c <_usb_on_wakeup+0x6c>)
    1850:	4798      	blx	r3
#endif
}
    1852:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    1854:	4902      	ldr	r1, [pc, #8]	; (1860 <_usb_on_wakeup+0x50>)
    1856:	2210      	movs	r2, #16
    1858:	68cb      	ldr	r3, [r1, #12]
    185a:	421a      	tst	r2, r3
    185c:	d0fc      	beq.n	1858 <_usb_on_wakeup+0x48>
    185e:	e7e2      	b.n	1826 <_usb_on_wakeup+0x16>
    1860:	40000800 	.word	0x40000800
    1864:	20000288 	.word	0x20000288
    1868:	000022b1 	.word	0x000022b1
    186c:	00002291 	.word	0x00002291
    1870:	000017dd 	.word	0x000017dd
    1874:	00002271 	.word	0x00002271
    1878:	00001519 	.word	0x00001519
    187c:	00002fb5 	.word	0x00002fb5

00001880 <_usb_on_bus_reset>:
{
    1880:	b570      	push	{r4, r5, r6, lr}
    1882:	b082      	sub	sp, #8
    1884:	0004      	movs	r4, r0
	udc_reset();
    1886:	4b1e      	ldr	r3, [pc, #120]	; (1900 <_usb_on_bus_reset+0x80>)
    1888:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    188a:	2380      	movs	r3, #128	; 0x80
    188c:	6822      	ldr	r2, [r4, #0]
    188e:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    1890:	ad01      	add	r5, sp, #4
    1892:	0028      	movs	r0, r5
    1894:	4b1b      	ldr	r3, [pc, #108]	; (1904 <_usb_on_bus_reset+0x84>)
    1896:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    1898:	2600      	movs	r6, #0
    189a:	706e      	strb	r6, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    189c:	0029      	movs	r1, r5
    189e:	0020      	movs	r0, r4
    18a0:	4b19      	ldr	r3, [pc, #100]	; (1908 <_usb_on_bus_reset+0x88>)
    18a2:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    18a4:	4919      	ldr	r1, [pc, #100]	; (190c <_usb_on_bus_reset+0x8c>)
    18a6:	0020      	movs	r0, r4
    18a8:	4b19      	ldr	r3, [pc, #100]	; (1910 <_usb_on_bus_reset+0x90>)
    18aa:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    18ac:	4b19      	ldr	r3, [pc, #100]	; (1914 <_usb_on_bus_reset+0x94>)
    18ae:	2202      	movs	r2, #2
    18b0:	2100      	movs	r1, #0
    18b2:	0020      	movs	r0, r4
    18b4:	4d18      	ldr	r5, [pc, #96]	; (1918 <_usb_on_bus_reset+0x98>)
    18b6:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    18b8:	4b18      	ldr	r3, [pc, #96]	; (191c <_usb_on_bus_reset+0x9c>)
    18ba:	2200      	movs	r2, #0
    18bc:	2100      	movs	r1, #0
    18be:	0020      	movs	r0, r4
    18c0:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    18c2:	4b17      	ldr	r3, [pc, #92]	; (1920 <_usb_on_bus_reset+0xa0>)
    18c4:	2201      	movs	r2, #1
    18c6:	2100      	movs	r1, #0
    18c8:	0020      	movs	r0, r4
    18ca:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    18cc:	2202      	movs	r2, #2
    18ce:	2100      	movs	r1, #0
    18d0:	0020      	movs	r0, r4
    18d2:	4d14      	ldr	r5, [pc, #80]	; (1924 <_usb_on_bus_reset+0xa4>)
    18d4:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    18d6:	2200      	movs	r2, #0
    18d8:	2100      	movs	r1, #0
    18da:	0020      	movs	r0, r4
    18dc:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    18de:	2201      	movs	r2, #1
    18e0:	2100      	movs	r1, #0
    18e2:	0020      	movs	r0, r4
    18e4:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    18e6:	6821      	ldr	r1, [r4, #0]
    18e8:	890b      	ldrh	r3, [r1, #8]
    18ea:	4a0f      	ldr	r2, [pc, #60]	; (1928 <_usb_on_bus_reset+0xa8>)
    18ec:	401a      	ands	r2, r3
    18ee:	2380      	movs	r3, #128	; 0x80
    18f0:	00db      	lsls	r3, r3, #3
    18f2:	4313      	orrs	r3, r2
    18f4:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    18f6:	4b0d      	ldr	r3, [pc, #52]	; (192c <_usb_on_bus_reset+0xac>)
    18f8:	701e      	strb	r6, [r3, #0]
}
    18fa:	b002      	add	sp, #8
    18fc:	bd70      	pop	{r4, r5, r6, pc}
    18fe:	46c0      	nop			; (mov r8, r8)
    1900:	0000076d 	.word	0x0000076d
    1904:	000024b5 	.word	0x000024b5
    1908:	000024c5 	.word	0x000024c5
    190c:	20000354 	.word	0x20000354
    1910:	000028b9 	.word	0x000028b9
    1914:	00001a69 	.word	0x00001a69
    1918:	000022cd 	.word	0x000022cd
    191c:	00001d85 	.word	0x00001d85
    1920:	0000196d 	.word	0x0000196d
    1924:	00002315 	.word	0x00002315
    1928:	fffff3ff 	.word	0xfffff3ff
    192c:	20000156 	.word	0x20000156

00001930 <udd_ctrl_send_zlp_in>:
{
    1930:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    1932:	2203      	movs	r2, #3
    1934:	4b07      	ldr	r3, [pc, #28]	; (1954 <udd_ctrl_send_zlp_in+0x24>)
    1936:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1938:	4c07      	ldr	r4, [pc, #28]	; (1958 <udd_ctrl_send_zlp_in+0x28>)
    193a:	4908      	ldr	r1, [pc, #32]	; (195c <udd_ctrl_send_zlp_in+0x2c>)
    193c:	0020      	movs	r0, r4
    193e:	4b08      	ldr	r3, [pc, #32]	; (1960 <udd_ctrl_send_zlp_in+0x30>)
    1940:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    1942:	4b08      	ldr	r3, [pc, #32]	; (1964 <udd_ctrl_send_zlp_in+0x34>)
    1944:	689a      	ldr	r2, [r3, #8]
    1946:	2300      	movs	r3, #0
    1948:	2100      	movs	r1, #0
    194a:	0020      	movs	r0, r4
    194c:	4c06      	ldr	r4, [pc, #24]	; (1968 <udd_ctrl_send_zlp_in+0x38>)
    194e:	47a0      	blx	r4
}
    1950:	bd10      	pop	{r4, pc}
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	20000156 	.word	0x20000156
    1958:	20000288 	.word	0x20000288
    195c:	20000354 	.word	0x20000354
    1960:	000028b9 	.word	0x000028b9
    1964:	2000033c 	.word	0x2000033c
    1968:	00002815 	.word	0x00002815

0000196c <_usb_ep0_on_tansfer_fail>:
{
    196c:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    196e:	7989      	ldrb	r1, [r1, #6]
    1970:	b24b      	sxtb	r3, r1
    1972:	2b00      	cmp	r3, #0
    1974:	db06      	blt.n	1984 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1976:	4b0e      	ldr	r3, [pc, #56]	; (19b0 <_usb_ep0_on_tansfer_fail+0x44>)
    1978:	781b      	ldrb	r3, [r3, #0]
    197a:	2b02      	cmp	r3, #2
    197c:	d00f      	beq.n	199e <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    197e:	2b03      	cmp	r3, #3
    1980:	d011      	beq.n	19a6 <_usb_ep0_on_tansfer_fail+0x3a>
}
    1982:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1984:	4b0a      	ldr	r3, [pc, #40]	; (19b0 <_usb_ep0_on_tansfer_fail+0x44>)
    1986:	781b      	ldrb	r3, [r3, #0]
    1988:	2b01      	cmp	r3, #1
    198a:	d005      	beq.n	1998 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    198c:	2b04      	cmp	r3, #4
    198e:	d1f8      	bne.n	1982 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1990:	4808      	ldr	r0, [pc, #32]	; (19b4 <_usb_ep0_on_tansfer_fail+0x48>)
    1992:	4b09      	ldr	r3, [pc, #36]	; (19b8 <_usb_ep0_on_tansfer_fail+0x4c>)
    1994:	4798      	blx	r3
    1996:	e7f4      	b.n	1982 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    1998:	4b08      	ldr	r3, [pc, #32]	; (19bc <_usb_ep0_on_tansfer_fail+0x50>)
    199a:	4798      	blx	r3
    199c:	e7f1      	b.n	1982 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    199e:	2204      	movs	r2, #4
    19a0:	4b03      	ldr	r3, [pc, #12]	; (19b0 <_usb_ep0_on_tansfer_fail+0x44>)
    19a2:	701a      	strb	r2, [r3, #0]
    19a4:	e7ed      	b.n	1982 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    19a6:	4803      	ldr	r0, [pc, #12]	; (19b4 <_usb_ep0_on_tansfer_fail+0x48>)
    19a8:	4b03      	ldr	r3, [pc, #12]	; (19b8 <_usb_ep0_on_tansfer_fail+0x4c>)
    19aa:	4798      	blx	r3
}
    19ac:	e7e9      	b.n	1982 <_usb_ep0_on_tansfer_fail+0x16>
    19ae:	46c0      	nop			; (mov r8, r8)
    19b0:	20000156 	.word	0x20000156
    19b4:	20000288 	.word	0x20000288
    19b8:	00002769 	.word	0x00002769
    19bc:	00001931 	.word	0x00001931

000019c0 <udd_ctrl_in_sent>:
{
    19c0:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    19c2:	4b20      	ldr	r3, [pc, #128]	; (1a44 <udd_ctrl_in_sent+0x84>)
    19c4:	881b      	ldrh	r3, [r3, #0]
    19c6:	4a20      	ldr	r2, [pc, #128]	; (1a48 <udd_ctrl_in_sent+0x88>)
    19c8:	8994      	ldrh	r4, [r2, #12]
    19ca:	1ae4      	subs	r4, r4, r3
    19cc:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    19ce:	2c00      	cmp	r4, #0
    19d0:	d118      	bne.n	1a04 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    19d2:	4a1e      	ldr	r2, [pc, #120]	; (1a4c <udd_ctrl_in_sent+0x8c>)
    19d4:	8811      	ldrh	r1, [r2, #0]
    19d6:	185b      	adds	r3, r3, r1
    19d8:	b29b      	uxth	r3, r3
    19da:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    19dc:	4a1a      	ldr	r2, [pc, #104]	; (1a48 <udd_ctrl_in_sent+0x88>)
    19de:	88d2      	ldrh	r2, [r2, #6]
    19e0:	429a      	cmp	r2, r3
    19e2:	d023      	beq.n	1a2c <udd_ctrl_in_sent+0x6c>
    19e4:	4b1a      	ldr	r3, [pc, #104]	; (1a50 <udd_ctrl_in_sent+0x90>)
    19e6:	781b      	ldrb	r3, [r3, #0]
    19e8:	2b00      	cmp	r3, #0
    19ea:	d11f      	bne.n	1a2c <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    19ec:	4b16      	ldr	r3, [pc, #88]	; (1a48 <udd_ctrl_in_sent+0x88>)
    19ee:	695b      	ldr	r3, [r3, #20]
    19f0:	2b00      	cmp	r3, #0
    19f2:	d023      	beq.n	1a3c <udd_ctrl_in_sent+0x7c>
    19f4:	4798      	blx	r3
    19f6:	2800      	cmp	r0, #0
    19f8:	d020      	beq.n	1a3c <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    19fa:	2200      	movs	r2, #0
    19fc:	4b11      	ldr	r3, [pc, #68]	; (1a44 <udd_ctrl_in_sent+0x84>)
    19fe:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    1a00:	4b11      	ldr	r3, [pc, #68]	; (1a48 <udd_ctrl_in_sent+0x88>)
    1a02:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    1a04:	2c07      	cmp	r4, #7
    1a06:	d919      	bls.n	1a3c <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    1a08:	2200      	movs	r2, #0
    1a0a:	4b11      	ldr	r3, [pc, #68]	; (1a50 <udd_ctrl_in_sent+0x90>)
    1a0c:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    1a0e:	2408      	movs	r4, #8
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    1a10:	4d0c      	ldr	r5, [pc, #48]	; (1a44 <udd_ctrl_in_sent+0x84>)
    1a12:	882b      	ldrh	r3, [r5, #0]
    1a14:	4a0c      	ldr	r2, [pc, #48]	; (1a48 <udd_ctrl_in_sent+0x88>)
    1a16:	6892      	ldr	r2, [r2, #8]
    1a18:	18d2      	adds	r2, r2, r3
    1a1a:	0023      	movs	r3, r4
    1a1c:	2100      	movs	r1, #0
    1a1e:	480d      	ldr	r0, [pc, #52]	; (1a54 <udd_ctrl_in_sent+0x94>)
    1a20:	4e0d      	ldr	r6, [pc, #52]	; (1a58 <udd_ctrl_in_sent+0x98>)
    1a22:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    1a24:	882b      	ldrh	r3, [r5, #0]
    1a26:	18e4      	adds	r4, r4, r3
    1a28:	802c      	strh	r4, [r5, #0]
}
    1a2a:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1a2c:	2204      	movs	r2, #4
    1a2e:	4b0b      	ldr	r3, [pc, #44]	; (1a5c <udd_ctrl_in_sent+0x9c>)
    1a30:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1a32:	490b      	ldr	r1, [pc, #44]	; (1a60 <udd_ctrl_in_sent+0xa0>)
    1a34:	4807      	ldr	r0, [pc, #28]	; (1a54 <udd_ctrl_in_sent+0x94>)
    1a36:	4b0b      	ldr	r3, [pc, #44]	; (1a64 <udd_ctrl_in_sent+0xa4>)
    1a38:	4798      	blx	r3
			return;
    1a3a:	e7f6      	b.n	1a2a <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    1a3c:	2201      	movs	r2, #1
    1a3e:	4b04      	ldr	r3, [pc, #16]	; (1a50 <udd_ctrl_in_sent+0x90>)
    1a40:	701a      	strb	r2, [r3, #0]
    1a42:	e7e5      	b.n	1a10 <udd_ctrl_in_sent+0x50>
    1a44:	20000152 	.word	0x20000152
    1a48:	2000033c 	.word	0x2000033c
    1a4c:	20000154 	.word	0x20000154
    1a50:	20000150 	.word	0x20000150
    1a54:	20000288 	.word	0x20000288
    1a58:	00002815 	.word	0x00002815
    1a5c:	20000156 	.word	0x20000156
    1a60:	20000354 	.word	0x20000354
    1a64:	000028b9 	.word	0x000028b9

00001a68 <_usb_ep0_on_setup>:
{
    1a68:	b510      	push	{r4, lr}
    1a6a:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    1a6c:	4b2c      	ldr	r3, [pc, #176]	; (1b20 <_usb_ep0_on_setup+0xb8>)
    1a6e:	781b      	ldrb	r3, [r3, #0]
    1a70:	2b00      	cmp	r3, #0
    1a72:	d007      	beq.n	1a84 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    1a74:	4b2b      	ldr	r3, [pc, #172]	; (1b24 <_usb_ep0_on_setup+0xbc>)
    1a76:	691b      	ldr	r3, [r3, #16]
    1a78:	2b00      	cmp	r3, #0
    1a7a:	d000      	beq.n	1a7e <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    1a7c:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    1a7e:	2200      	movs	r2, #0
    1a80:	4b27      	ldr	r3, [pc, #156]	; (1b20 <_usb_ep0_on_setup+0xb8>)
    1a82:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    1a84:	8823      	ldrh	r3, [r4, #0]
    1a86:	2b08      	cmp	r3, #8
    1a88:	d002      	beq.n	1a90 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    1a8a:	4b27      	ldr	r3, [pc, #156]	; (1b28 <_usb_ep0_on_setup+0xc0>)
    1a8c:	4798      	blx	r3
}
    1a8e:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    1a90:	4a24      	ldr	r2, [pc, #144]	; (1b24 <_usb_ep0_on_setup+0xbc>)
    1a92:	4b26      	ldr	r3, [pc, #152]	; (1b2c <_usb_ep0_on_setup+0xc4>)
    1a94:	7819      	ldrb	r1, [r3, #0]
    1a96:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    1a98:	7859      	ldrb	r1, [r3, #1]
    1a9a:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    1a9c:	78d8      	ldrb	r0, [r3, #3]
    1a9e:	0200      	lsls	r0, r0, #8
    1aa0:	7899      	ldrb	r1, [r3, #2]
    1aa2:	1809      	adds	r1, r1, r0
    1aa4:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    1aa6:	7958      	ldrb	r0, [r3, #5]
    1aa8:	0200      	lsls	r0, r0, #8
    1aaa:	7919      	ldrb	r1, [r3, #4]
    1aac:	1809      	adds	r1, r1, r0
    1aae:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    1ab0:	79d9      	ldrb	r1, [r3, #7]
    1ab2:	0209      	lsls	r1, r1, #8
    1ab4:	799b      	ldrb	r3, [r3, #6]
    1ab6:	185b      	adds	r3, r3, r1
    1ab8:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    1aba:	4b1d      	ldr	r3, [pc, #116]	; (1b30 <_usb_ep0_on_setup+0xc8>)
    1abc:	4798      	blx	r3
    1abe:	2800      	cmp	r0, #0
    1ac0:	d016      	beq.n	1af0 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    1ac2:	4b18      	ldr	r3, [pc, #96]	; (1b24 <_usb_ep0_on_setup+0xbc>)
    1ac4:	781b      	ldrb	r3, [r3, #0]
    1ac6:	2b7f      	cmp	r3, #127	; 0x7f
    1ac8:	d815      	bhi.n	1af6 <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    1aca:	4b16      	ldr	r3, [pc, #88]	; (1b24 <_usb_ep0_on_setup+0xbc>)
    1acc:	88db      	ldrh	r3, [r3, #6]
    1ace:	2b00      	cmp	r3, #0
    1ad0:	d022      	beq.n	1b18 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    1ad2:	2300      	movs	r3, #0
    1ad4:	4a17      	ldr	r2, [pc, #92]	; (1b34 <_usb_ep0_on_setup+0xcc>)
    1ad6:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    1ad8:	4a17      	ldr	r2, [pc, #92]	; (1b38 <_usb_ep0_on_setup+0xd0>)
    1ada:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    1adc:	2201      	movs	r2, #1
    1ade:	4b10      	ldr	r3, [pc, #64]	; (1b20 <_usb_ep0_on_setup+0xb8>)
    1ae0:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1ae2:	2308      	movs	r3, #8
    1ae4:	4a11      	ldr	r2, [pc, #68]	; (1b2c <_usb_ep0_on_setup+0xc4>)
    1ae6:	2100      	movs	r1, #0
    1ae8:	4814      	ldr	r0, [pc, #80]	; (1b3c <_usb_ep0_on_setup+0xd4>)
    1aea:	4c15      	ldr	r4, [pc, #84]	; (1b40 <_usb_ep0_on_setup+0xd8>)
    1aec:	47a0      	blx	r4
    1aee:	e7ce      	b.n	1a8e <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    1af0:	4b0d      	ldr	r3, [pc, #52]	; (1b28 <_usb_ep0_on_setup+0xc0>)
    1af2:	4798      	blx	r3
			return;
    1af4:	e7cb      	b.n	1a8e <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    1af6:	2300      	movs	r3, #0
    1af8:	4a0e      	ldr	r2, [pc, #56]	; (1b34 <_usb_ep0_on_setup+0xcc>)
    1afa:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    1afc:	4a0e      	ldr	r2, [pc, #56]	; (1b38 <_usb_ep0_on_setup+0xd0>)
    1afe:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    1b00:	2202      	movs	r2, #2
    1b02:	4b07      	ldr	r3, [pc, #28]	; (1b20 <_usb_ep0_on_setup+0xb8>)
    1b04:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1b06:	2308      	movs	r3, #8
    1b08:	4a08      	ldr	r2, [pc, #32]	; (1b2c <_usb_ep0_on_setup+0xc4>)
    1b0a:	2100      	movs	r1, #0
    1b0c:	480b      	ldr	r0, [pc, #44]	; (1b3c <_usb_ep0_on_setup+0xd4>)
    1b0e:	4c0c      	ldr	r4, [pc, #48]	; (1b40 <_usb_ep0_on_setup+0xd8>)
    1b10:	47a0      	blx	r4
			udd_ctrl_in_sent();
    1b12:	4b0c      	ldr	r3, [pc, #48]	; (1b44 <_usb_ep0_on_setup+0xdc>)
    1b14:	4798      	blx	r3
    1b16:	e7ba      	b.n	1a8e <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    1b18:	4b0b      	ldr	r3, [pc, #44]	; (1b48 <_usb_ep0_on_setup+0xe0>)
    1b1a:	4798      	blx	r3
				return;
    1b1c:	e7b7      	b.n	1a8e <_usb_ep0_on_setup+0x26>
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	20000156 	.word	0x20000156
    1b24:	2000033c 	.word	0x2000033c
    1b28:	000017b1 	.word	0x000017b1
    1b2c:	20000354 	.word	0x20000354
    1b30:	00000825 	.word	0x00000825
    1b34:	20000154 	.word	0x20000154
    1b38:	20000152 	.word	0x20000152
    1b3c:	20000288 	.word	0x20000288
    1b40:	00002869 	.word	0x00002869
    1b44:	000019c1 	.word	0x000019c1
    1b48:	00001931 	.word	0x00001931

00001b4c <_usb_on_sof_notify>:
{
    1b4c:	b510      	push	{r4, lr}
	udc_sof_notify();
    1b4e:	4b02      	ldr	r3, [pc, #8]	; (1b58 <_usb_on_sof_notify+0xc>)
    1b50:	4798      	blx	r3
	UDC_SOF_EVENT();
    1b52:	4b02      	ldr	r3, [pc, #8]	; (1b5c <_usb_on_sof_notify+0x10>)
    1b54:	4798      	blx	r3
}
    1b56:	bd10      	pop	{r4, pc}
    1b58:	000007e1 	.word	0x000007e1
    1b5c:	00002fc1 	.word	0x00002fc1

00001b60 <_usb_on_suspend>:
{
    1b60:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1b62:	4c07      	ldr	r4, [pc, #28]	; (1b80 <_usb_on_suspend+0x20>)
    1b64:	2104      	movs	r1, #4
    1b66:	0020      	movs	r0, r4
    1b68:	4b06      	ldr	r3, [pc, #24]	; (1b84 <_usb_on_suspend+0x24>)
    1b6a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1b6c:	2102      	movs	r1, #2
    1b6e:	0020      	movs	r0, r4
    1b70:	4b05      	ldr	r3, [pc, #20]	; (1b88 <_usb_on_suspend+0x28>)
    1b72:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    1b74:	2001      	movs	r0, #1
    1b76:	4b05      	ldr	r3, [pc, #20]	; (1b8c <_usb_on_suspend+0x2c>)
    1b78:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    1b7a:	4b05      	ldr	r3, [pc, #20]	; (1b90 <_usb_on_suspend+0x30>)
    1b7c:	4798      	blx	r3
}
    1b7e:	bd10      	pop	{r4, pc}
    1b80:	20000288 	.word	0x20000288
    1b84:	000022b1 	.word	0x000022b1
    1b88:	00002291 	.word	0x00002291
    1b8c:	00001519 	.word	0x00001519
    1b90:	00002fa9 	.word	0x00002fa9

00001b94 <udd_ep_abort>:
{
    1b94:	b510      	push	{r4, lr}
    1b96:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    1b98:	0001      	movs	r1, r0
    1b9a:	480a      	ldr	r0, [pc, #40]	; (1bc4 <udd_ep_abort+0x30>)
    1b9c:	4b0a      	ldr	r3, [pc, #40]	; (1bc8 <udd_ep_abort+0x34>)
    1b9e:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    1ba0:	0020      	movs	r0, r4
    1ba2:	4b0a      	ldr	r3, [pc, #40]	; (1bcc <udd_ep_abort+0x38>)
    1ba4:	4798      	blx	r3
	if (!ptr_job->busy) {
    1ba6:	7c83      	ldrb	r3, [r0, #18]
    1ba8:	07db      	lsls	r3, r3, #31
    1baa:	d50a      	bpl.n	1bc2 <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    1bac:	7c83      	ldrb	r3, [r0, #18]
    1bae:	2201      	movs	r2, #1
    1bb0:	4393      	bics	r3, r2
    1bb2:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    1bb4:	6803      	ldr	r3, [r0, #0]
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d003      	beq.n	1bc2 <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    1bba:	68c1      	ldr	r1, [r0, #12]
    1bbc:	0022      	movs	r2, r4
    1bbe:	2001      	movs	r0, #1
    1bc0:	4798      	blx	r3
}
    1bc2:	bd10      	pop	{r4, pc}
    1bc4:	20000288 	.word	0x20000288
    1bc8:	00002709 	.word	0x00002709
    1bcc:	000015d9 	.word	0x000015d9

00001bd0 <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    1bd0:	4b02      	ldr	r3, [pc, #8]	; (1bdc <udd_get_frame_number+0xc>)
    1bd2:	681b      	ldr	r3, [r3, #0]
    1bd4:	8a18      	ldrh	r0, [r3, #16]
    1bd6:	0480      	lsls	r0, r0, #18
    1bd8:	0d40      	lsrs	r0, r0, #21
}
    1bda:	4770      	bx	lr
    1bdc:	20000288 	.word	0x20000288

00001be0 <udd_ep_free>:
{
    1be0:	b570      	push	{r4, r5, r6, lr}
    1be2:	b082      	sub	sp, #8
    1be4:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    1be6:	ad01      	add	r5, sp, #4
    1be8:	0028      	movs	r0, r5
    1bea:	4b0d      	ldr	r3, [pc, #52]	; (1c20 <udd_ep_free+0x40>)
    1bec:	4798      	blx	r3
	udd_ep_abort(ep);
    1bee:	0020      	movs	r0, r4
    1bf0:	4b0c      	ldr	r3, [pc, #48]	; (1c24 <udd_ep_free+0x44>)
    1bf2:	4798      	blx	r3
	config_ep.ep_address = ep;
    1bf4:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    1bf6:	2300      	movs	r3, #0
    1bf8:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    1bfa:	4e0b      	ldr	r6, [pc, #44]	; (1c28 <udd_ep_free+0x48>)
    1bfc:	0029      	movs	r1, r5
    1bfe:	0030      	movs	r0, r6
    1c00:	4b0a      	ldr	r3, [pc, #40]	; (1c2c <udd_ep_free+0x4c>)
    1c02:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1c04:	210f      	movs	r1, #15
    1c06:	4021      	ands	r1, r4
    1c08:	2200      	movs	r2, #0
    1c0a:	0030      	movs	r0, r6
    1c0c:	4b08      	ldr	r3, [pc, #32]	; (1c30 <udd_ep_free+0x50>)
    1c0e:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1c10:	2200      	movs	r2, #0
    1c12:	0021      	movs	r1, r4
    1c14:	0030      	movs	r0, r6
    1c16:	4b07      	ldr	r3, [pc, #28]	; (1c34 <udd_ep_free+0x54>)
    1c18:	4798      	blx	r3
}
    1c1a:	b002      	add	sp, #8
    1c1c:	bd70      	pop	{r4, r5, r6, pc}
    1c1e:	46c0      	nop			; (mov r8, r8)
    1c20:	000024b5 	.word	0x000024b5
    1c24:	00001b95 	.word	0x00001b95
    1c28:	20000288 	.word	0x20000288
    1c2c:	000024c5 	.word	0x000024c5
    1c30:	000022f1 	.word	0x000022f1
    1c34:	000023e5 	.word	0x000023e5

00001c38 <udd_ep_alloc>:
{
    1c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c3a:	b083      	sub	sp, #12
    1c3c:	0005      	movs	r5, r0
    1c3e:	000f      	movs	r7, r1
    1c40:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    1c42:	ae01      	add	r6, sp, #4
    1c44:	0030      	movs	r0, r6
    1c46:	4b36      	ldr	r3, [pc, #216]	; (1d20 <udd_ep_alloc+0xe8>)
    1c48:	4798      	blx	r3
	config_ep.ep_address = ep;
    1c4a:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    1c4c:	2c08      	cmp	r4, #8
    1c4e:	d813      	bhi.n	1c78 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    1c50:	2200      	movs	r2, #0
    1c52:	ab01      	add	r3, sp, #4
    1c54:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    1c56:	0028      	movs	r0, r5
    1c58:	4b32      	ldr	r3, [pc, #200]	; (1d24 <udd_ep_alloc+0xec>)
    1c5a:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    1c5c:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    1c5e:	2103      	movs	r1, #3
    1c60:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    1c62:	2901      	cmp	r1, #1
    1c64:	d038      	beq.n	1cd8 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    1c66:	2902      	cmp	r1, #2
    1c68:	d043      	beq.n	1cf2 <udd_ep_alloc+0xba>
		return false;
    1c6a:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    1c6c:	2903      	cmp	r1, #3
    1c6e:	d13d      	bne.n	1cec <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    1c70:	2204      	movs	r2, #4
    1c72:	ab01      	add	r3, sp, #4
    1c74:	70da      	strb	r2, [r3, #3]
    1c76:	e032      	b.n	1cde <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    1c78:	2c10      	cmp	r4, #16
    1c7a:	d803      	bhi.n	1c84 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    1c7c:	2201      	movs	r2, #1
    1c7e:	ab01      	add	r3, sp, #4
    1c80:	705a      	strb	r2, [r3, #1]
    1c82:	e7e8      	b.n	1c56 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    1c84:	2c20      	cmp	r4, #32
    1c86:	d803      	bhi.n	1c90 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    1c88:	2202      	movs	r2, #2
    1c8a:	ab01      	add	r3, sp, #4
    1c8c:	705a      	strb	r2, [r3, #1]
    1c8e:	e7e2      	b.n	1c56 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    1c90:	2c40      	cmp	r4, #64	; 0x40
    1c92:	d803      	bhi.n	1c9c <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    1c94:	2203      	movs	r2, #3
    1c96:	ab01      	add	r3, sp, #4
    1c98:	705a      	strb	r2, [r3, #1]
    1c9a:	e7dc      	b.n	1c56 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    1c9c:	2c80      	cmp	r4, #128	; 0x80
    1c9e:	d803      	bhi.n	1ca8 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    1ca0:	2204      	movs	r2, #4
    1ca2:	ab01      	add	r3, sp, #4
    1ca4:	705a      	strb	r2, [r3, #1]
    1ca6:	e7d6      	b.n	1c56 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    1ca8:	2380      	movs	r3, #128	; 0x80
    1caa:	005b      	lsls	r3, r3, #1
    1cac:	429c      	cmp	r4, r3
    1cae:	d803      	bhi.n	1cb8 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    1cb0:	2205      	movs	r2, #5
    1cb2:	ab01      	add	r3, sp, #4
    1cb4:	705a      	strb	r2, [r3, #1]
    1cb6:	e7ce      	b.n	1c56 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    1cb8:	2380      	movs	r3, #128	; 0x80
    1cba:	009b      	lsls	r3, r3, #2
    1cbc:	429c      	cmp	r4, r3
    1cbe:	d803      	bhi.n	1cc8 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    1cc0:	2206      	movs	r2, #6
    1cc2:	ab01      	add	r3, sp, #4
    1cc4:	705a      	strb	r2, [r3, #1]
    1cc6:	e7c6      	b.n	1c56 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    1cc8:	4a17      	ldr	r2, [pc, #92]	; (1d28 <udd_ep_alloc+0xf0>)
		return false;
    1cca:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    1ccc:	4294      	cmp	r4, r2
    1cce:	d80d      	bhi.n	1cec <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    1cd0:	2207      	movs	r2, #7
    1cd2:	ab01      	add	r3, sp, #4
    1cd4:	705a      	strb	r2, [r3, #1]
    1cd6:	e7be      	b.n	1c56 <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    1cd8:	2202      	movs	r2, #2
    1cda:	ab01      	add	r3, sp, #4
    1cdc:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    1cde:	a901      	add	r1, sp, #4
    1ce0:	4812      	ldr	r0, [pc, #72]	; (1d2c <udd_ep_alloc+0xf4>)
    1ce2:	4b13      	ldr	r3, [pc, #76]	; (1d30 <udd_ep_alloc+0xf8>)
    1ce4:	4798      	blx	r3
		return false;
    1ce6:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    1ce8:	2800      	cmp	r0, #0
    1cea:	d006      	beq.n	1cfa <udd_ep_alloc+0xc2>
}
    1cec:	0018      	movs	r0, r3
    1cee:	b003      	add	sp, #12
    1cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    1cf2:	2203      	movs	r2, #3
    1cf4:	ab01      	add	r3, sp, #4
    1cf6:	70da      	strb	r2, [r3, #3]
    1cf8:	e7f1      	b.n	1cde <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    1cfa:	210f      	movs	r1, #15
    1cfc:	4029      	ands	r1, r5
    1cfe:	4c0b      	ldr	r4, [pc, #44]	; (1d2c <udd_ep_alloc+0xf4>)
    1d00:	4b0c      	ldr	r3, [pc, #48]	; (1d34 <udd_ep_alloc+0xfc>)
    1d02:	2200      	movs	r2, #0
    1d04:	0020      	movs	r0, r4
    1d06:	4e0c      	ldr	r6, [pc, #48]	; (1d38 <udd_ep_alloc+0x100>)
    1d08:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1d0a:	2200      	movs	r2, #0
    1d0c:	0029      	movs	r1, r5
    1d0e:	0020      	movs	r0, r4
    1d10:	4e0a      	ldr	r6, [pc, #40]	; (1d3c <udd_ep_alloc+0x104>)
    1d12:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    1d14:	2201      	movs	r2, #1
    1d16:	0029      	movs	r1, r5
    1d18:	0020      	movs	r0, r4
    1d1a:	47b0      	blx	r6
	return true;
    1d1c:	2301      	movs	r3, #1
    1d1e:	e7e5      	b.n	1cec <udd_ep_alloc+0xb4>
    1d20:	000024b5 	.word	0x000024b5
    1d24:	000015d9 	.word	0x000015d9
    1d28:	000003ff 	.word	0x000003ff
    1d2c:	20000288 	.word	0x20000288
    1d30:	000024c5 	.word	0x000024c5
    1d34:	000015fd 	.word	0x000015fd
    1d38:	000022cd 	.word	0x000022cd
    1d3c:	00002315 	.word	0x00002315

00001d40 <udd_ep_is_halted>:
{
    1d40:	b510      	push	{r4, lr}
    1d42:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    1d44:	4801      	ldr	r0, [pc, #4]	; (1d4c <udd_ep_is_halted+0xc>)
    1d46:	4b02      	ldr	r3, [pc, #8]	; (1d50 <udd_ep_is_halted+0x10>)
    1d48:	4798      	blx	r3
}
    1d4a:	bd10      	pop	{r4, pc}
    1d4c:	20000288 	.word	0x20000288
    1d50:	0000273f 	.word	0x0000273f

00001d54 <udd_ep_set_halt>:
{
    1d54:	b510      	push	{r4, lr}
    1d56:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    1d58:	230f      	movs	r3, #15
    1d5a:	4003      	ands	r3, r0
		return false;
    1d5c:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    1d5e:	2b02      	cmp	r3, #2
    1d60:	d900      	bls.n	1d64 <udd_ep_set_halt+0x10>
}
    1d62:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    1d64:	0021      	movs	r1, r4
    1d66:	4804      	ldr	r0, [pc, #16]	; (1d78 <udd_ep_set_halt+0x24>)
    1d68:	4b04      	ldr	r3, [pc, #16]	; (1d7c <udd_ep_set_halt+0x28>)
    1d6a:	4798      	blx	r3
	udd_ep_abort(ep);
    1d6c:	0020      	movs	r0, r4
    1d6e:	4b04      	ldr	r3, [pc, #16]	; (1d80 <udd_ep_set_halt+0x2c>)
    1d70:	4798      	blx	r3
	return true;
    1d72:	2001      	movs	r0, #1
    1d74:	e7f5      	b.n	1d62 <udd_ep_set_halt+0xe>
    1d76:	46c0      	nop			; (mov r8, r8)
    1d78:	20000288 	.word	0x20000288
    1d7c:	00002769 	.word	0x00002769
    1d80:	00001b95 	.word	0x00001b95

00001d84 <_usb_ep0_on_tansfer_ok>:
{
    1d84:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    1d86:	4b34      	ldr	r3, [pc, #208]	; (1e58 <_usb_ep0_on_tansfer_ok+0xd4>)
    1d88:	781b      	ldrb	r3, [r3, #0]
    1d8a:	2b01      	cmp	r3, #1
    1d8c:	d00a      	beq.n	1da4 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    1d8e:	2b02      	cmp	r3, #2
    1d90:	d05f      	beq.n	1e52 <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    1d92:	4b32      	ldr	r3, [pc, #200]	; (1e5c <_usb_ep0_on_tansfer_ok+0xd8>)
    1d94:	691b      	ldr	r3, [r3, #16]
    1d96:	2b00      	cmp	r3, #0
    1d98:	d000      	beq.n	1d9c <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    1d9a:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    1d9c:	2200      	movs	r2, #0
    1d9e:	4b2e      	ldr	r3, [pc, #184]	; (1e58 <_usb_ep0_on_tansfer_ok+0xd4>)
    1da0:	701a      	strb	r2, [r3, #0]
}
    1da2:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    1da4:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1da6:	4b2d      	ldr	r3, [pc, #180]	; (1e5c <_usb_ep0_on_tansfer_ok+0xd8>)
    1da8:	899b      	ldrh	r3, [r3, #12]
    1daa:	4a2d      	ldr	r2, [pc, #180]	; (1e60 <_usb_ep0_on_tansfer_ok+0xdc>)
    1dac:	8814      	ldrh	r4, [r2, #0]
    1dae:	1962      	adds	r2, r4, r5
    1db0:	4293      	cmp	r3, r2
    1db2:	da01      	bge.n	1db8 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1db4:	1b1d      	subs	r5, r3, r4
    1db6:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    1db8:	4b28      	ldr	r3, [pc, #160]	; (1e5c <_usb_ep0_on_tansfer_ok+0xd8>)
    1dba:	6898      	ldr	r0, [r3, #8]
    1dbc:	1900      	adds	r0, r0, r4
    1dbe:	002a      	movs	r2, r5
    1dc0:	4928      	ldr	r1, [pc, #160]	; (1e64 <_usb_ep0_on_tansfer_ok+0xe0>)
    1dc2:	4b29      	ldr	r3, [pc, #164]	; (1e68 <_usb_ep0_on_tansfer_ok+0xe4>)
    1dc4:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    1dc6:	1964      	adds	r4, r4, r5
    1dc8:	b2a4      	uxth	r4, r4
    1dca:	4b25      	ldr	r3, [pc, #148]	; (1e60 <_usb_ep0_on_tansfer_ok+0xdc>)
    1dcc:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    1dce:	2d08      	cmp	r5, #8
    1dd0:	d00a      	beq.n	1de8 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1dd2:	4b22      	ldr	r3, [pc, #136]	; (1e5c <_usb_ep0_on_tansfer_ok+0xd8>)
    1dd4:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1dd6:	695b      	ldr	r3, [r3, #20]
    1dd8:	2b00      	cmp	r3, #0
    1dda:	d002      	beq.n	1de2 <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    1ddc:	4798      	blx	r3
    1dde:	2800      	cmp	r0, #0
    1de0:	d014      	beq.n	1e0c <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    1de2:	4b22      	ldr	r3, [pc, #136]	; (1e6c <_usb_ep0_on_tansfer_ok+0xe8>)
    1de4:	4798      	blx	r3
    1de6:	e7dc      	b.n	1da2 <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    1de8:	4b1c      	ldr	r3, [pc, #112]	; (1e5c <_usb_ep0_on_tansfer_ok+0xd8>)
    1dea:	88da      	ldrh	r2, [r3, #6]
    1dec:	4b20      	ldr	r3, [pc, #128]	; (1e70 <_usb_ep0_on_tansfer_ok+0xec>)
    1dee:	881b      	ldrh	r3, [r3, #0]
    1df0:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    1df2:	429a      	cmp	r2, r3
    1df4:	dded      	ble.n	1dd2 <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1df6:	4b19      	ldr	r3, [pc, #100]	; (1e5c <_usb_ep0_on_tansfer_ok+0xd8>)
    1df8:	899b      	ldrh	r3, [r3, #12]
    1dfa:	42a3      	cmp	r3, r4
    1dfc:	d00c      	beq.n	1e18 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1dfe:	2308      	movs	r3, #8
    1e00:	4a18      	ldr	r2, [pc, #96]	; (1e64 <_usb_ep0_on_tansfer_ok+0xe0>)
    1e02:	2100      	movs	r1, #0
    1e04:	481b      	ldr	r0, [pc, #108]	; (1e74 <_usb_ep0_on_tansfer_ok+0xf0>)
    1e06:	4c1c      	ldr	r4, [pc, #112]	; (1e78 <_usb_ep0_on_tansfer_ok+0xf4>)
    1e08:	47a0      	blx	r4
    1e0a:	e7ca      	b.n	1da2 <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1e0c:	2205      	movs	r2, #5
    1e0e:	4b12      	ldr	r3, [pc, #72]	; (1e58 <_usb_ep0_on_tansfer_ok+0xd4>)
    1e10:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    1e12:	4b1a      	ldr	r3, [pc, #104]	; (1e7c <_usb_ep0_on_tansfer_ok+0xf8>)
    1e14:	4798      	blx	r3
    1e16:	e7c4      	b.n	1da2 <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    1e18:	4b10      	ldr	r3, [pc, #64]	; (1e5c <_usb_ep0_on_tansfer_ok+0xd8>)
    1e1a:	695b      	ldr	r3, [r3, #20]
    1e1c:	2b00      	cmp	r3, #0
    1e1e:	d00b      	beq.n	1e38 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    1e20:	4798      	blx	r3
    1e22:	2800      	cmp	r0, #0
    1e24:	d00f      	beq.n	1e46 <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1e26:	4912      	ldr	r1, [pc, #72]	; (1e70 <_usb_ep0_on_tansfer_ok+0xec>)
    1e28:	4a0d      	ldr	r2, [pc, #52]	; (1e60 <_usb_ep0_on_tansfer_ok+0xdc>)
    1e2a:	880b      	ldrh	r3, [r1, #0]
    1e2c:	8810      	ldrh	r0, [r2, #0]
    1e2e:	181b      	adds	r3, r3, r0
    1e30:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    1e32:	2300      	movs	r3, #0
    1e34:	8013      	strh	r3, [r2, #0]
    1e36:	e7e2      	b.n	1dfe <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1e38:	2205      	movs	r2, #5
    1e3a:	4b07      	ldr	r3, [pc, #28]	; (1e58 <_usb_ep0_on_tansfer_ok+0xd4>)
    1e3c:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    1e3e:	2000      	movs	r0, #0
    1e40:	4b0e      	ldr	r3, [pc, #56]	; (1e7c <_usb_ep0_on_tansfer_ok+0xf8>)
    1e42:	4798      	blx	r3
    1e44:	e7ad      	b.n	1da2 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1e46:	2205      	movs	r2, #5
    1e48:	4b03      	ldr	r3, [pc, #12]	; (1e58 <_usb_ep0_on_tansfer_ok+0xd4>)
    1e4a:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    1e4c:	4b0b      	ldr	r3, [pc, #44]	; (1e7c <_usb_ep0_on_tansfer_ok+0xf8>)
    1e4e:	4798      	blx	r3
    1e50:	e7a7      	b.n	1da2 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    1e52:	4b0b      	ldr	r3, [pc, #44]	; (1e80 <_usb_ep0_on_tansfer_ok+0xfc>)
    1e54:	4798      	blx	r3
    1e56:	e7a4      	b.n	1da2 <_usb_ep0_on_tansfer_ok+0x1e>
    1e58:	20000156 	.word	0x20000156
    1e5c:	2000033c 	.word	0x2000033c
    1e60:	20000152 	.word	0x20000152
    1e64:	20000354 	.word	0x20000354
    1e68:	0000337d 	.word	0x0000337d
    1e6c:	00001931 	.word	0x00001931
    1e70:	20000154 	.word	0x20000154
    1e74:	20000288 	.word	0x20000288
    1e78:	00002869 	.word	0x00002869
    1e7c:	00001d55 	.word	0x00001d55
    1e80:	000019c1 	.word	0x000019c1

00001e84 <udd_ep_clear_halt>:
{
    1e84:	b570      	push	{r4, r5, r6, lr}
    1e86:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    1e88:	230f      	movs	r3, #15
    1e8a:	4003      	ands	r3, r0
		return false;
    1e8c:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    1e8e:	2b02      	cmp	r3, #2
    1e90:	d900      	bls.n	1e94 <udd_ep_clear_halt+0x10>
}
    1e92:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    1e94:	0020      	movs	r0, r4
    1e96:	4b09      	ldr	r3, [pc, #36]	; (1ebc <udd_ep_clear_halt+0x38>)
    1e98:	4798      	blx	r3
    1e9a:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    1e9c:	0021      	movs	r1, r4
    1e9e:	4808      	ldr	r0, [pc, #32]	; (1ec0 <udd_ep_clear_halt+0x3c>)
    1ea0:	4b08      	ldr	r3, [pc, #32]	; (1ec4 <udd_ep_clear_halt+0x40>)
    1ea2:	4798      	blx	r3
	if (ptr_job->busy == true) {
    1ea4:	7cab      	ldrb	r3, [r5, #18]
	return true;
    1ea6:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    1ea8:	07db      	lsls	r3, r3, #31
    1eaa:	d5f2      	bpl.n	1e92 <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    1eac:	7cab      	ldrb	r3, [r5, #18]
    1eae:	2201      	movs	r2, #1
    1eb0:	4393      	bics	r3, r2
    1eb2:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    1eb4:	682b      	ldr	r3, [r5, #0]
    1eb6:	4798      	blx	r3
	return true;
    1eb8:	2001      	movs	r0, #1
    1eba:	e7ea      	b.n	1e92 <udd_ep_clear_halt+0xe>
    1ebc:	000015d9 	.word	0x000015d9
    1ec0:	20000288 	.word	0x20000288
    1ec4:	0000278f 	.word	0x0000278f

00001ec8 <udd_ep_run>:
{
    1ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eca:	b087      	sub	sp, #28
    1ecc:	0005      	movs	r5, r0
    1ece:	9103      	str	r1, [sp, #12]
    1ed0:	9202      	str	r2, [sp, #8]
    1ed2:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    1ed4:	260f      	movs	r6, #15
    1ed6:	4006      	ands	r6, r0
		return false;
    1ed8:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    1eda:	2e02      	cmp	r6, #2
    1edc:	d902      	bls.n	1ee4 <udd_ep_run+0x1c>
}
    1ede:	0020      	movs	r0, r4
    1ee0:	b007      	add	sp, #28
    1ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    1ee4:	4b64      	ldr	r3, [pc, #400]	; (2078 <udd_ep_run+0x1b0>)
    1ee6:	4798      	blx	r3
    1ee8:	1e04      	subs	r4, r0, #0
    1eea:	d000      	beq.n	1eee <udd_ep_run+0x26>
    1eec:	e0bd      	b.n	206a <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    1eee:	0028      	movs	r0, r5
    1ef0:	4b62      	ldr	r3, [pc, #392]	; (207c <udd_ep_run+0x1b4>)
    1ef2:	4798      	blx	r3
    1ef4:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1ef6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1efa:	425a      	negs	r2, r3
    1efc:	4153      	adcs	r3, r2
    1efe:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    1f00:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1f02:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1f06:	2200      	movs	r2, #0
    1f08:	4b5d      	ldr	r3, [pc, #372]	; (2080 <udd_ep_run+0x1b8>)
    1f0a:	701a      	strb	r2, [r3, #0]
	return flags;
    1f0c:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    1f0e:	7c83      	ldrb	r3, [r0, #18]
    1f10:	07db      	lsls	r3, r3, #31
    1f12:	d508      	bpl.n	1f26 <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    1f14:	2a00      	cmp	r2, #0
    1f16:	d0e2      	beq.n	1ede <udd_ep_run+0x16>
		cpu_irq_enable();
    1f18:	2201      	movs	r2, #1
    1f1a:	4b59      	ldr	r3, [pc, #356]	; (2080 <udd_ep_run+0x1b8>)
    1f1c:	701a      	strb	r2, [r3, #0]
    1f1e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1f22:	b662      	cpsie	i
    1f24:	e7db      	b.n	1ede <udd_ep_run+0x16>
	ptr_job->busy = true;
    1f26:	7c83      	ldrb	r3, [r0, #18]
    1f28:	2101      	movs	r1, #1
    1f2a:	430b      	orrs	r3, r1
    1f2c:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    1f2e:	2a00      	cmp	r2, #0
    1f30:	d005      	beq.n	1f3e <udd_ep_run+0x76>
		cpu_irq_enable();
    1f32:	2201      	movs	r2, #1
    1f34:	4b52      	ldr	r3, [pc, #328]	; (2080 <udd_ep_run+0x1b8>)
    1f36:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1f38:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1f3c:	b662      	cpsie	i
	ptr_job->buf = buf;
    1f3e:	9b02      	ldr	r3, [sp, #8]
    1f40:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    1f42:	9b01      	ldr	r3, [sp, #4]
    1f44:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    1f46:	2300      	movs	r3, #0
    1f48:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    1f4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1f4c:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    1f4e:	2301      	movs	r3, #1
    1f50:	9a03      	ldr	r2, [sp, #12]
    1f52:	4013      	ands	r3, r2
    1f54:	005a      	lsls	r2, r3, #1
    1f56:	7cbb      	ldrb	r3, [r7, #18]
    1f58:	2102      	movs	r1, #2
    1f5a:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    1f5c:	4313      	orrs	r3, r2
    1f5e:	2204      	movs	r2, #4
    1f60:	4393      	bics	r3, r2
    1f62:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    1f64:	b26b      	sxtb	r3, r5
    1f66:	2b00      	cmp	r3, #0
    1f68:	db20      	blt.n	1fac <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    1f6a:	9b01      	ldr	r3, [sp, #4]
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d06f      	beq.n	2050 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    1f70:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1f72:	4b44      	ldr	r3, [pc, #272]	; (2084 <udd_ep_run+0x1bc>)
    1f74:	429c      	cmp	r4, r3
    1f76:	d95a      	bls.n	202e <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    1f78:	8a39      	ldrh	r1, [r7, #16]
    1f7a:	001c      	movs	r4, r3
    1f7c:	0018      	movs	r0, r3
    1f7e:	4b42      	ldr	r3, [pc, #264]	; (2088 <udd_ep_run+0x1c0>)
    1f80:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    1f82:	1a63      	subs	r3, r4, r1
    1f84:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    1f86:	8a3b      	ldrh	r3, [r7, #16]
    1f88:	429a      	cmp	r2, r3
    1f8a:	d257      	bcs.n	203c <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    1f8c:	7cba      	ldrb	r2, [r7, #18]
    1f8e:	2104      	movs	r1, #4
    1f90:	430a      	orrs	r2, r1
    1f92:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    1f94:	1e72      	subs	r2, r6, #1
    1f96:	0192      	lsls	r2, r2, #6
    1f98:	493c      	ldr	r1, [pc, #240]	; (208c <udd_ep_run+0x1c4>)
    1f9a:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    1f9c:	0031      	movs	r1, r6
    1f9e:	483c      	ldr	r0, [pc, #240]	; (2090 <udd_ep_run+0x1c8>)
    1fa0:	4c3c      	ldr	r4, [pc, #240]	; (2094 <udd_ep_run+0x1cc>)
    1fa2:	47a0      	blx	r4
				return (STATUS_OK ==
    1fa4:	4244      	negs	r4, r0
    1fa6:	4144      	adcs	r4, r0
    1fa8:	b2e4      	uxtb	r4, r4
    1faa:	e798      	b.n	1ede <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    1fac:	9b01      	ldr	r3, [sp, #4]
    1fae:	2b00      	cmp	r3, #0
    1fb0:	d027      	beq.n	2002 <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    1fb2:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1fb4:	4b33      	ldr	r3, [pc, #204]	; (2084 <udd_ep_run+0x1bc>)
    1fb6:	429d      	cmp	r5, r3
    1fb8:	d906      	bls.n	1fc8 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    1fba:	8a39      	ldrh	r1, [r7, #16]
    1fbc:	001d      	movs	r5, r3
    1fbe:	0018      	movs	r0, r3
    1fc0:	4b31      	ldr	r3, [pc, #196]	; (2088 <udd_ep_run+0x1c0>)
    1fc2:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    1fc4:	1a6b      	subs	r3, r5, r1
    1fc6:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    1fc8:	7cbb      	ldrb	r3, [r7, #18]
    1fca:	079b      	lsls	r3, r3, #30
    1fcc:	d507      	bpl.n	1fde <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    1fce:	8a39      	ldrh	r1, [r7, #16]
    1fd0:	0028      	movs	r0, r5
    1fd2:	4b31      	ldr	r3, [pc, #196]	; (2098 <udd_ep_run+0x1d0>)
    1fd4:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    1fd6:	b289      	uxth	r1, r1
    1fd8:	424c      	negs	r4, r1
    1fda:	414c      	adcs	r4, r1
    1fdc:	b2e4      	uxtb	r4, r4
    1fde:	2001      	movs	r0, #1
    1fe0:	4020      	ands	r0, r4
    1fe2:	0040      	lsls	r0, r0, #1
    1fe4:	7cbc      	ldrb	r4, [r7, #18]
    1fe6:	2302      	movs	r3, #2
    1fe8:	439c      	bics	r4, r3
    1fea:	4304      	orrs	r4, r0
    1fec:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    1fee:	002b      	movs	r3, r5
    1ff0:	9a02      	ldr	r2, [sp, #8]
    1ff2:	0031      	movs	r1, r6
    1ff4:	4826      	ldr	r0, [pc, #152]	; (2090 <udd_ep_run+0x1c8>)
    1ff6:	4c29      	ldr	r4, [pc, #164]	; (209c <udd_ep_run+0x1d4>)
    1ff8:	47a0      	blx	r4
		return (STATUS_OK ==
    1ffa:	4244      	negs	r4, r0
    1ffc:	4144      	adcs	r4, r0
    1ffe:	b2e4      	uxtb	r4, r4
    2000:	e76d      	b.n	1ede <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    2002:	7cbb      	ldrb	r3, [r7, #18]
    2004:	079b      	lsls	r3, r3, #30
    2006:	d505      	bpl.n	2014 <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    2008:	7cbb      	ldrb	r3, [r7, #18]
    200a:	2202      	movs	r2, #2
    200c:	4393      	bics	r3, r2
    200e:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    2010:	2500      	movs	r5, #0
    2012:	e7ec      	b.n	1fee <udd_ep_run+0x126>
			ptr_job->busy = false;
    2014:	7cbb      	ldrb	r3, [r7, #18]
    2016:	2201      	movs	r2, #1
    2018:	4393      	bics	r3, r2
    201a:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    201c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    201e:	2b00      	cmp	r3, #0
    2020:	d025      	beq.n	206e <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    2022:	002a      	movs	r2, r5
    2024:	2100      	movs	r1, #0
    2026:	2000      	movs	r0, #0
    2028:	4798      	blx	r3
			return true;
    202a:	2401      	movs	r4, #1
    202c:	e757      	b.n	1ede <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    202e:	8a39      	ldrh	r1, [r7, #16]
    2030:	0020      	movs	r0, r4
    2032:	4b19      	ldr	r3, [pc, #100]	; (2098 <udd_ep_run+0x1d0>)
    2034:	4798      	blx	r3
    2036:	1a63      	subs	r3, r4, r1
    2038:	b29a      	uxth	r2, r3
    203a:	e7a4      	b.n	1f86 <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    203c:	0013      	movs	r3, r2
    203e:	9a02      	ldr	r2, [sp, #8]
    2040:	0031      	movs	r1, r6
    2042:	4813      	ldr	r0, [pc, #76]	; (2090 <udd_ep_run+0x1c8>)
    2044:	4c13      	ldr	r4, [pc, #76]	; (2094 <udd_ep_run+0x1cc>)
    2046:	47a0      	blx	r4
				return (STATUS_OK ==
    2048:	4244      	negs	r4, r0
    204a:	4144      	adcs	r4, r0
    204c:	b2e4      	uxtb	r4, r4
    204e:	e746      	b.n	1ede <udd_ep_run+0x16>
			ptr_job->busy = false;
    2050:	7cbb      	ldrb	r3, [r7, #18]
    2052:	2201      	movs	r2, #1
    2054:	4393      	bics	r3, r2
    2056:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    2058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    205a:	2b00      	cmp	r3, #0
    205c:	d009      	beq.n	2072 <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    205e:	002a      	movs	r2, r5
    2060:	2100      	movs	r1, #0
    2062:	2000      	movs	r0, #0
    2064:	4798      	blx	r3
			return true;
    2066:	2401      	movs	r4, #1
    2068:	e739      	b.n	1ede <udd_ep_run+0x16>
		return false;
    206a:	2400      	movs	r4, #0
    206c:	e737      	b.n	1ede <udd_ep_run+0x16>
			return true;
    206e:	2401      	movs	r4, #1
    2070:	e735      	b.n	1ede <udd_ep_run+0x16>
			return true;
    2072:	2401      	movs	r4, #1
    2074:	e733      	b.n	1ede <udd_ep_run+0x16>
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	00001d41 	.word	0x00001d41
    207c:	000015d9 	.word	0x000015d9
    2080:	200000df 	.word	0x200000df
    2084:	00001fff 	.word	0x00001fff
    2088:	00003329 	.word	0x00003329
    208c:	20000208 	.word	0x20000208
    2090:	20000288 	.word	0x20000288
    2094:	00002869 	.word	0x00002869
    2098:	00003155 	.word	0x00003155
    209c:	00002815 	.word	0x00002815

000020a0 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    20a0:	4b02      	ldr	r3, [pc, #8]	; (20ac <udd_set_address+0xc>)
    20a2:	681b      	ldr	r3, [r3, #0]
    20a4:	2280      	movs	r2, #128	; 0x80
    20a6:	4310      	orrs	r0, r2
    20a8:	7298      	strb	r0, [r3, #10]
}
    20aa:	4770      	bx	lr
    20ac:	20000288 	.word	0x20000288

000020b0 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    20b0:	4b02      	ldr	r3, [pc, #8]	; (20bc <udd_getaddress+0xc>)
    20b2:	681b      	ldr	r3, [r3, #0]
    20b4:	7a98      	ldrb	r0, [r3, #10]
    20b6:	0640      	lsls	r0, r0, #25
    20b8:	0e40      	lsrs	r0, r0, #25
}
    20ba:	4770      	bx	lr
    20bc:	20000288 	.word	0x20000288

000020c0 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    20c0:	4b01      	ldr	r3, [pc, #4]	; (20c8 <udd_set_setup_payload+0x8>)
    20c2:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    20c4:	8199      	strh	r1, [r3, #12]
}
    20c6:	4770      	bx	lr
    20c8:	2000033c 	.word	0x2000033c

000020cc <udd_detach>:

void udd_detach(void)
{
    20cc:	b510      	push	{r4, lr}
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    20ce:	4b05      	ldr	r3, [pc, #20]	; (20e4 <udd_detach+0x18>)
    20d0:	681a      	ldr	r2, [r3, #0]
    20d2:	8913      	ldrh	r3, [r2, #8]
    20d4:	2101      	movs	r1, #1
    20d6:	430b      	orrs	r3, r1
    20d8:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    20da:	2001      	movs	r0, #1
    20dc:	4b02      	ldr	r3, [pc, #8]	; (20e8 <udd_detach+0x1c>)
    20de:	4798      	blx	r3
}
    20e0:	bd10      	pop	{r4, pc}
    20e2:	46c0      	nop			; (mov r8, r8)
    20e4:	20000288 	.word	0x20000288
    20e8:	00001519 	.word	0x00001519

000020ec <udd_attach>:

void udd_attach(void)
{
    20ec:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    20ee:	2003      	movs	r0, #3
    20f0:	4b16      	ldr	r3, [pc, #88]	; (214c <udd_attach+0x60>)
    20f2:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    20f4:	4c16      	ldr	r4, [pc, #88]	; (2150 <udd_attach+0x64>)
    20f6:	6822      	ldr	r2, [r4, #0]
    20f8:	8913      	ldrh	r3, [r2, #8]
    20fa:	2101      	movs	r1, #1
    20fc:	438b      	bics	r3, r1
    20fe:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    2100:	4a14      	ldr	r2, [pc, #80]	; (2154 <udd_attach+0x68>)
    2102:	3103      	adds	r1, #3
    2104:	0020      	movs	r0, r4
    2106:	4e14      	ldr	r6, [pc, #80]	; (2158 <udd_attach+0x6c>)
    2108:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    210a:	4a14      	ldr	r2, [pc, #80]	; (215c <udd_attach+0x70>)
    210c:	2100      	movs	r1, #0
    210e:	0020      	movs	r0, r4
    2110:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    2112:	4a13      	ldr	r2, [pc, #76]	; (2160 <udd_attach+0x74>)
    2114:	2101      	movs	r1, #1
    2116:	0020      	movs	r0, r4
    2118:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    211a:	4a12      	ldr	r2, [pc, #72]	; (2164 <udd_attach+0x78>)
    211c:	2102      	movs	r1, #2
    211e:	0020      	movs	r0, r4
    2120:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2122:	2104      	movs	r1, #4
    2124:	0020      	movs	r0, r4
    2126:	4d10      	ldr	r5, [pc, #64]	; (2168 <udd_attach+0x7c>)
    2128:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    212a:	2100      	movs	r1, #0
    212c:	0020      	movs	r0, r4
    212e:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    2130:	2101      	movs	r1, #1
    2132:	0020      	movs	r0, r4
    2134:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2136:	2102      	movs	r1, #2
    2138:	0020      	movs	r0, r4
    213a:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    213c:	4a0b      	ldr	r2, [pc, #44]	; (216c <udd_attach+0x80>)
    213e:	2106      	movs	r1, #6
    2140:	0020      	movs	r0, r4
    2142:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2144:	2106      	movs	r1, #6
    2146:	0020      	movs	r0, r4
    2148:	47a8      	blx	r5
#endif
}
    214a:	bd70      	pop	{r4, r5, r6, pc}
    214c:	00001519 	.word	0x00001519
    2150:	20000288 	.word	0x20000288
    2154:	00001b61 	.word	0x00001b61
    2158:	00002271 	.word	0x00002271
    215c:	00001b4d 	.word	0x00001b4d
    2160:	00001881 	.word	0x00001881
    2164:	00001811 	.word	0x00001811
    2168:	00002291 	.word	0x00002291
    216c:	000017dd 	.word	0x000017dd

00002170 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    2170:	b570      	push	{r4, r5, r6, lr}
    2172:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2174:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2178:	425a      	negs	r2, r3
    217a:	4153      	adcs	r3, r2
    217c:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    217e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2180:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2184:	2600      	movs	r6, #0
    2186:	4b18      	ldr	r3, [pc, #96]	; (21e8 <udd_enable+0x78>)
    2188:	701e      	strb	r6, [r3, #0]
	return flags;
    218a:	9c00      	ldr	r4, [sp, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    218c:	ad01      	add	r5, sp, #4
    218e:	0028      	movs	r0, r5
    2190:	4b16      	ldr	r3, [pc, #88]	; (21ec <udd_enable+0x7c>)
    2192:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    2194:	70ae      	strb	r6, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    2196:	4e16      	ldr	r6, [pc, #88]	; (21f0 <udd_enable+0x80>)
    2198:	002a      	movs	r2, r5
    219a:	4916      	ldr	r1, [pc, #88]	; (21f4 <udd_enable+0x84>)
    219c:	0030      	movs	r0, r6
    219e:	4b16      	ldr	r3, [pc, #88]	; (21f8 <udd_enable+0x88>)
    21a0:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    21a2:	0030      	movs	r0, r6
    21a4:	4b15      	ldr	r3, [pc, #84]	; (21fc <udd_enable+0x8c>)
    21a6:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    21a8:	4b15      	ldr	r3, [pc, #84]	; (2200 <udd_enable+0x90>)
    21aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    21ac:	069b      	lsls	r3, r3, #26
    21ae:	d414      	bmi.n	21da <udd_enable+0x6a>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    21b0:	4913      	ldr	r1, [pc, #76]	; (2200 <udd_enable+0x90>)
    21b2:	22d0      	movs	r2, #208	; 0xd0
    21b4:	68cb      	ldr	r3, [r1, #12]
    21b6:	4013      	ands	r3, r2
    21b8:	2bd0      	cmp	r3, #208	; 0xd0
    21ba:	d1fb      	bne.n	21b4 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    21bc:	2001      	movs	r0, #1
    21be:	4b11      	ldr	r3, [pc, #68]	; (2204 <udd_enable+0x94>)
    21c0:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    21c2:	4b11      	ldr	r3, [pc, #68]	; (2208 <udd_enable+0x98>)
    21c4:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    21c6:	2c00      	cmp	r4, #0
    21c8:	d005      	beq.n	21d6 <udd_enable+0x66>
		cpu_irq_enable();
    21ca:	2201      	movs	r2, #1
    21cc:	4b06      	ldr	r3, [pc, #24]	; (21e8 <udd_enable+0x78>)
    21ce:	701a      	strb	r2, [r3, #0]
    21d0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    21d4:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    21d6:	b002      	add	sp, #8
    21d8:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    21da:	4909      	ldr	r1, [pc, #36]	; (2200 <udd_enable+0x90>)
    21dc:	2210      	movs	r2, #16
    21de:	68cb      	ldr	r3, [r1, #12]
    21e0:	421a      	tst	r2, r3
    21e2:	d0fc      	beq.n	21de <udd_enable+0x6e>
    21e4:	e7ea      	b.n	21bc <udd_enable+0x4c>
    21e6:	46c0      	nop			; (mov r8, r8)
    21e8:	200000df 	.word	0x200000df
    21ec:	00002bc5 	.word	0x00002bc5
    21f0:	20000288 	.word	0x20000288
    21f4:	41005000 	.word	0x41005000
    21f8:	00002bd5 	.word	0x00002bd5
    21fc:	000028e9 	.word	0x000028e9
    2200:	40000800 	.word	0x40000800
    2204:	00001519 	.word	0x00001519
    2208:	000020ed 	.word	0x000020ed

0000220c <udd_disable>:

void udd_disable(void)
{
    220c:	b510      	push	{r4, lr}
    220e:	b082      	sub	sp, #8
	irqflags_t flags;

	udd_detach();
    2210:	4b0e      	ldr	r3, [pc, #56]	; (224c <udd_disable+0x40>)
    2212:	4798      	blx	r3

	udd_sleep_mode(UDD_STATE_OFF);
    2214:	2000      	movs	r0, #0
    2216:	4b0e      	ldr	r3, [pc, #56]	; (2250 <udd_disable+0x44>)
    2218:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    221a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    221e:	425a      	negs	r2, r3
    2220:	4153      	adcs	r3, r2
    2222:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2224:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2226:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    222a:	2200      	movs	r2, #0
    222c:	4b09      	ldr	r3, [pc, #36]	; (2254 <udd_disable+0x48>)
    222e:	701a      	strb	r2, [r3, #0]
	return flags;
    2230:	9c01      	ldr	r4, [sp, #4]

	flags = cpu_irq_save();
	usb_dual_disable();
    2232:	4b09      	ldr	r3, [pc, #36]	; (2258 <udd_disable+0x4c>)
    2234:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    2236:	2c00      	cmp	r4, #0
    2238:	d005      	beq.n	2246 <udd_disable+0x3a>
		cpu_irq_enable();
    223a:	2201      	movs	r2, #1
    223c:	4b05      	ldr	r3, [pc, #20]	; (2254 <udd_disable+0x48>)
    223e:	701a      	strb	r2, [r3, #0]
    2240:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2244:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
    2246:	b002      	add	sp, #8
    2248:	bd10      	pop	{r4, pc}
    224a:	46c0      	nop			; (mov r8, r8)
    224c:	000020cd 	.word	0x000020cd
    2250:	00001519 	.word	0x00001519
    2254:	200000df 	.word	0x200000df
    2258:	0000225d 	.word	0x0000225d

0000225c <usb_dual_disable>:
/**
 * \brief Deinitialize the dual role driver
 */
void usb_dual_disable(void)
{
	if (!_initialized) {
    225c:	4b03      	ldr	r3, [pc, #12]	; (226c <usb_dual_disable+0x10>)
    225e:	781b      	ldrb	r3, [r3, #0]
    2260:	2b00      	cmp	r3, #0
    2262:	d002      	beq.n	226a <usb_dual_disable+0xe>
		return; // Dual role not initialized
	}
	_initialized = false;
    2264:	2200      	movs	r2, #0
    2266:	4b01      	ldr	r3, [pc, #4]	; (226c <usb_dual_disable+0x10>)
    2268:	701a      	strb	r2, [r3, #0]

#if USB_ID_EIC
	extint_chan_disable_callback(USB_ID_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
#endif
}
    226a:	4770      	bx	lr
    226c:	200001a9 	.word	0x200001a9

00002270 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    2270:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    2272:	008b      	lsls	r3, r1, #2
    2274:	18c3      	adds	r3, r0, r3
    2276:	605a      	str	r2, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    2278:	22a0      	movs	r2, #160	; 0xa0
    227a:	0049      	lsls	r1, r1, #1
    227c:	5a83      	ldrh	r3, [r0, r2]
    227e:	4c03      	ldr	r4, [pc, #12]	; (228c <usb_device_register_callback+0x1c>)
    2280:	5b09      	ldrh	r1, [r1, r4]
    2282:	430b      	orrs	r3, r1
    2284:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    2286:	2000      	movs	r0, #0
    2288:	bd10      	pop	{r4, pc}
    228a:	46c0      	nop			; (mov r8, r8)
    228c:	000033fc 	.word	0x000033fc

00002290 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    2290:	0049      	lsls	r1, r1, #1
    2292:	4b06      	ldr	r3, [pc, #24]	; (22ac <usb_device_enable_callback+0x1c>)
    2294:	5acb      	ldrh	r3, [r1, r3]
    2296:	6802      	ldr	r2, [r0, #0]
    2298:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    229a:	21a2      	movs	r1, #162	; 0xa2
    229c:	5a42      	ldrh	r2, [r0, r1]
    229e:	431a      	orrs	r2, r3
    22a0:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    22a2:	6802      	ldr	r2, [r0, #0]
    22a4:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    22a6:	2000      	movs	r0, #0
    22a8:	4770      	bx	lr
    22aa:	46c0      	nop			; (mov r8, r8)
    22ac:	000033fc 	.word	0x000033fc

000022b0 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    22b0:	0049      	lsls	r1, r1, #1
    22b2:	4b05      	ldr	r3, [pc, #20]	; (22c8 <usb_device_disable_callback+0x18>)
    22b4:	5aca      	ldrh	r2, [r1, r3]
    22b6:	21a2      	movs	r1, #162	; 0xa2
    22b8:	5a43      	ldrh	r3, [r0, r1]
    22ba:	4393      	bics	r3, r2
    22bc:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    22be:	6803      	ldr	r3, [r0, #0]
    22c0:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    22c2:	2000      	movs	r0, #0
    22c4:	4770      	bx	lr
    22c6:	46c0      	nop			; (mov r8, r8)
    22c8:	000033fc 	.word	0x000033fc

000022cc <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    22cc:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    22ce:	008c      	lsls	r4, r1, #2
    22d0:	18a4      	adds	r4, r4, r2
    22d2:	3408      	adds	r4, #8
    22d4:	00a4      	lsls	r4, r4, #2
    22d6:	5023      	str	r3, [r4, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    22d8:	1840      	adds	r0, r0, r1
    22da:	30a4      	adds	r0, #164	; 0xa4
    22dc:	7803      	ldrb	r3, [r0, #0]
    22de:	4903      	ldr	r1, [pc, #12]	; (22ec <usb_device_endpoint_register_callback+0x20>)
    22e0:	5c8a      	ldrb	r2, [r1, r2]
    22e2:	4313      	orrs	r3, r2
    22e4:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    22e6:	2000      	movs	r0, #0
    22e8:	bd10      	pop	{r4, pc}
    22ea:	46c0      	nop			; (mov r8, r8)
    22ec:	0000340c 	.word	0x0000340c

000022f0 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    22f0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    22f2:	008b      	lsls	r3, r1, #2
    22f4:	189b      	adds	r3, r3, r2
    22f6:	3308      	adds	r3, #8
    22f8:	009b      	lsls	r3, r3, #2
    22fa:	2400      	movs	r4, #0
    22fc:	501c      	str	r4, [r3, r0]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    22fe:	1840      	adds	r0, r0, r1
    2300:	30a4      	adds	r0, #164	; 0xa4
    2302:	4b03      	ldr	r3, [pc, #12]	; (2310 <usb_device_endpoint_unregister_callback+0x20>)
    2304:	5c9a      	ldrb	r2, [r3, r2]
    2306:	7803      	ldrb	r3, [r0, #0]
    2308:	4393      	bics	r3, r2
    230a:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    230c:	2000      	movs	r0, #0
    230e:	bd10      	pop	{r4, pc}
    2310:	0000340c 	.word	0x0000340c

00002314 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    2314:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2316:	230f      	movs	r3, #15
    2318:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    231a:	18c4      	adds	r4, r0, r3
    231c:	34ac      	adds	r4, #172	; 0xac
    231e:	7825      	ldrb	r5, [r4, #0]
    2320:	4e2f      	ldr	r6, [pc, #188]	; (23e0 <usb_device_endpoint_enable_callback+0xcc>)
    2322:	5cb6      	ldrb	r6, [r6, r2]
    2324:	4335      	orrs	r5, r6
    2326:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    2328:	2a00      	cmp	r2, #0
    232a:	d129      	bne.n	2380 <usb_device_endpoint_enable_callback+0x6c>
		if (ep_num == 0) { // control endpoint
    232c:	2b00      	cmp	r3, #0
    232e:	d112      	bne.n	2356 <usb_device_endpoint_enable_callback+0x42>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    2330:	2503      	movs	r5, #3
    2332:	240a      	movs	r4, #10
    2334:	34ff      	adds	r4, #255	; 0xff
    2336:	6806      	ldr	r6, [r0, #0]
    2338:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    233a:	2a03      	cmp	r2, #3
    233c:	d109      	bne.n	2352 <usb_device_endpoint_enable_callback+0x3e>
		if (ep & USB_EP_DIR_IN) {
    233e:	b249      	sxtb	r1, r1
    2340:	2900      	cmp	r1, #0
    2342:	db44      	blt.n	23ce <usb_device_endpoint_enable_callback+0xba>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    2344:	6802      	ldr	r2, [r0, #0]
    2346:	015b      	lsls	r3, r3, #5
    2348:	18d3      	adds	r3, r2, r3
    234a:	330a      	adds	r3, #10
    234c:	33ff      	adds	r3, #255	; 0xff
    234e:	2220      	movs	r2, #32
    2350:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    2352:	2000      	movs	r0, #0
    2354:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    2356:	b24c      	sxtb	r4, r1
    2358:	2c00      	cmp	r4, #0
    235a:	db08      	blt.n	236e <usb_device_endpoint_enable_callback+0x5a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    235c:	015c      	lsls	r4, r3, #5
    235e:	6805      	ldr	r5, [r0, #0]
    2360:	46ac      	mov	ip, r5
    2362:	4464      	add	r4, ip
    2364:	340a      	adds	r4, #10
    2366:	34ff      	adds	r4, #255	; 0xff
    2368:	2501      	movs	r5, #1
    236a:	7025      	strb	r5, [r4, #0]
    236c:	e7e5      	b.n	233a <usb_device_endpoint_enable_callback+0x26>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    236e:	015c      	lsls	r4, r3, #5
    2370:	6805      	ldr	r5, [r0, #0]
    2372:	46ac      	mov	ip, r5
    2374:	4464      	add	r4, ip
    2376:	340a      	adds	r4, #10
    2378:	34ff      	adds	r4, #255	; 0xff
    237a:	2502      	movs	r5, #2
    237c:	7025      	strb	r5, [r4, #0]
    237e:	e7dc      	b.n	233a <usb_device_endpoint_enable_callback+0x26>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    2380:	2a01      	cmp	r2, #1
    2382:	d11a      	bne.n	23ba <usb_device_endpoint_enable_callback+0xa6>
		if (ep_num == 0) { // control endpoint
    2384:	2b00      	cmp	r3, #0
    2386:	d105      	bne.n	2394 <usb_device_endpoint_enable_callback+0x80>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    2388:	6802      	ldr	r2, [r0, #0]
    238a:	210c      	movs	r1, #12
    238c:	230a      	movs	r3, #10
    238e:	33ff      	adds	r3, #255	; 0xff
    2390:	54d1      	strb	r1, [r2, r3]
    2392:	e7de      	b.n	2352 <usb_device_endpoint_enable_callback+0x3e>
		} else if (ep & USB_EP_DIR_IN) {
    2394:	b249      	sxtb	r1, r1
    2396:	2900      	cmp	r1, #0
    2398:	db07      	blt.n	23aa <usb_device_endpoint_enable_callback+0x96>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    239a:	6802      	ldr	r2, [r0, #0]
    239c:	015b      	lsls	r3, r3, #5
    239e:	18d3      	adds	r3, r2, r3
    23a0:	330a      	adds	r3, #10
    23a2:	33ff      	adds	r3, #255	; 0xff
    23a4:	2204      	movs	r2, #4
    23a6:	701a      	strb	r2, [r3, #0]
    23a8:	e7d3      	b.n	2352 <usb_device_endpoint_enable_callback+0x3e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    23aa:	6802      	ldr	r2, [r0, #0]
    23ac:	015b      	lsls	r3, r3, #5
    23ae:	18d3      	adds	r3, r2, r3
    23b0:	330a      	adds	r3, #10
    23b2:	33ff      	adds	r3, #255	; 0xff
    23b4:	2208      	movs	r2, #8
    23b6:	701a      	strb	r2, [r3, #0]
    23b8:	e7cb      	b.n	2352 <usb_device_endpoint_enable_callback+0x3e>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    23ba:	2a02      	cmp	r2, #2
    23bc:	d1bd      	bne.n	233a <usb_device_endpoint_enable_callback+0x26>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    23be:	6802      	ldr	r2, [r0, #0]
    23c0:	015b      	lsls	r3, r3, #5
    23c2:	18d3      	adds	r3, r2, r3
    23c4:	330a      	adds	r3, #10
    23c6:	33ff      	adds	r3, #255	; 0xff
    23c8:	2210      	movs	r2, #16
    23ca:	701a      	strb	r2, [r3, #0]
    23cc:	e7c1      	b.n	2352 <usb_device_endpoint_enable_callback+0x3e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    23ce:	6802      	ldr	r2, [r0, #0]
    23d0:	015b      	lsls	r3, r3, #5
    23d2:	18d3      	adds	r3, r2, r3
    23d4:	330a      	adds	r3, #10
    23d6:	33ff      	adds	r3, #255	; 0xff
    23d8:	2240      	movs	r2, #64	; 0x40
    23da:	701a      	strb	r2, [r3, #0]
    23dc:	e7b9      	b.n	2352 <usb_device_endpoint_enable_callback+0x3e>
    23de:	46c0      	nop			; (mov r8, r8)
    23e0:	0000340c 	.word	0x0000340c

000023e4 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    23e4:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    23e6:	230f      	movs	r3, #15
    23e8:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    23ea:	18c4      	adds	r4, r0, r3
    23ec:	34ac      	adds	r4, #172	; 0xac
    23ee:	4d30      	ldr	r5, [pc, #192]	; (24b0 <usb_device_endpoint_disable_callback+0xcc>)
    23f0:	5cae      	ldrb	r6, [r5, r2]
    23f2:	7825      	ldrb	r5, [r4, #0]
    23f4:	43b5      	bics	r5, r6
    23f6:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    23f8:	2a00      	cmp	r2, #0
    23fa:	d129      	bne.n	2450 <usb_device_endpoint_disable_callback+0x6c>
		if (ep_num == 0) { // control endpoint
    23fc:	2b00      	cmp	r3, #0
    23fe:	d112      	bne.n	2426 <usb_device_endpoint_disable_callback+0x42>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    2400:	2503      	movs	r5, #3
    2402:	2484      	movs	r4, #132	; 0x84
    2404:	0064      	lsls	r4, r4, #1
    2406:	6806      	ldr	r6, [r0, #0]
    2408:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    240a:	2a03      	cmp	r2, #3
    240c:	d109      	bne.n	2422 <usb_device_endpoint_disable_callback+0x3e>
		if (ep & USB_EP_DIR_IN) {
    240e:	b249      	sxtb	r1, r1
    2410:	2900      	cmp	r1, #0
    2412:	db44      	blt.n	249e <usb_device_endpoint_disable_callback+0xba>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    2414:	6802      	ldr	r2, [r0, #0]
    2416:	015b      	lsls	r3, r3, #5
    2418:	18d3      	adds	r3, r2, r3
    241a:	3309      	adds	r3, #9
    241c:	33ff      	adds	r3, #255	; 0xff
    241e:	2220      	movs	r2, #32
    2420:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    2422:	2000      	movs	r0, #0
    2424:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    2426:	b24c      	sxtb	r4, r1
    2428:	2c00      	cmp	r4, #0
    242a:	db08      	blt.n	243e <usb_device_endpoint_disable_callback+0x5a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    242c:	015c      	lsls	r4, r3, #5
    242e:	6805      	ldr	r5, [r0, #0]
    2430:	46ac      	mov	ip, r5
    2432:	4464      	add	r4, ip
    2434:	3409      	adds	r4, #9
    2436:	34ff      	adds	r4, #255	; 0xff
    2438:	2501      	movs	r5, #1
    243a:	7025      	strb	r5, [r4, #0]
    243c:	e7e5      	b.n	240a <usb_device_endpoint_disable_callback+0x26>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    243e:	015c      	lsls	r4, r3, #5
    2440:	6805      	ldr	r5, [r0, #0]
    2442:	46ac      	mov	ip, r5
    2444:	4464      	add	r4, ip
    2446:	3409      	adds	r4, #9
    2448:	34ff      	adds	r4, #255	; 0xff
    244a:	2502      	movs	r5, #2
    244c:	7025      	strb	r5, [r4, #0]
    244e:	e7dc      	b.n	240a <usb_device_endpoint_disable_callback+0x26>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    2450:	2a01      	cmp	r2, #1
    2452:	d11a      	bne.n	248a <usb_device_endpoint_disable_callback+0xa6>
		if (ep_num == 0) { // control endpoint
    2454:	2b00      	cmp	r3, #0
    2456:	d105      	bne.n	2464 <usb_device_endpoint_disable_callback+0x80>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    2458:	6802      	ldr	r2, [r0, #0]
    245a:	210c      	movs	r1, #12
    245c:	3309      	adds	r3, #9
    245e:	33ff      	adds	r3, #255	; 0xff
    2460:	54d1      	strb	r1, [r2, r3]
    2462:	e7de      	b.n	2422 <usb_device_endpoint_disable_callback+0x3e>
		} else if (ep & USB_EP_DIR_IN) {
    2464:	b249      	sxtb	r1, r1
    2466:	2900      	cmp	r1, #0
    2468:	db07      	blt.n	247a <usb_device_endpoint_disable_callback+0x96>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    246a:	6802      	ldr	r2, [r0, #0]
    246c:	015b      	lsls	r3, r3, #5
    246e:	18d3      	adds	r3, r2, r3
    2470:	3309      	adds	r3, #9
    2472:	33ff      	adds	r3, #255	; 0xff
    2474:	2204      	movs	r2, #4
    2476:	701a      	strb	r2, [r3, #0]
    2478:	e7d3      	b.n	2422 <usb_device_endpoint_disable_callback+0x3e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    247a:	6802      	ldr	r2, [r0, #0]
    247c:	015b      	lsls	r3, r3, #5
    247e:	18d3      	adds	r3, r2, r3
    2480:	3309      	adds	r3, #9
    2482:	33ff      	adds	r3, #255	; 0xff
    2484:	2208      	movs	r2, #8
    2486:	701a      	strb	r2, [r3, #0]
    2488:	e7cb      	b.n	2422 <usb_device_endpoint_disable_callback+0x3e>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    248a:	2a02      	cmp	r2, #2
    248c:	d1bd      	bne.n	240a <usb_device_endpoint_disable_callback+0x26>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    248e:	6802      	ldr	r2, [r0, #0]
    2490:	015b      	lsls	r3, r3, #5
    2492:	18d3      	adds	r3, r2, r3
    2494:	3309      	adds	r3, #9
    2496:	33ff      	adds	r3, #255	; 0xff
    2498:	2210      	movs	r2, #16
    249a:	701a      	strb	r2, [r3, #0]
    249c:	e7c1      	b.n	2422 <usb_device_endpoint_disable_callback+0x3e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    249e:	6802      	ldr	r2, [r0, #0]
    24a0:	015b      	lsls	r3, r3, #5
    24a2:	18d3      	adds	r3, r2, r3
    24a4:	3309      	adds	r3, #9
    24a6:	33ff      	adds	r3, #255	; 0xff
    24a8:	2240      	movs	r2, #64	; 0x40
    24aa:	701a      	strb	r2, [r3, #0]
    24ac:	e7b9      	b.n	2422 <usb_device_endpoint_disable_callback+0x3e>
    24ae:	46c0      	nop			; (mov r8, r8)
    24b0:	0000340c 	.word	0x0000340c

000024b4 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    24b4:	2300      	movs	r3, #0
    24b6:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    24b8:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    24ba:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    24bc:	3301      	adds	r3, #1
    24be:	70c3      	strb	r3, [r0, #3]
}
    24c0:	4770      	bx	lr
	...

000024c4 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    24c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    24c6:	780c      	ldrb	r4, [r1, #0]
    24c8:	230f      	movs	r3, #15
    24ca:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    24cc:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    24ce:	78ca      	ldrb	r2, [r1, #3]
    24d0:	2a04      	cmp	r2, #4
    24d2:	d870      	bhi.n	25b6 <usb_device_endpoint_set_config+0xf2>
    24d4:	0092      	lsls	r2, r2, #2
    24d6:	4d89      	ldr	r5, [pc, #548]	; (26fc <usb_device_endpoint_set_config+0x238>)
    24d8:	58aa      	ldr	r2, [r5, r2]
    24da:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    24dc:	6802      	ldr	r2, [r0, #0]
    24de:	3308      	adds	r3, #8
    24e0:	015b      	lsls	r3, r3, #5
    24e2:	2100      	movs	r1, #0
    24e4:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    24e6:	2200      	movs	r2, #0
    24e8:	e082      	b.n	25f0 <usb_device_endpoint_set_config+0x12c>
    24ea:	015c      	lsls	r4, r3, #5
    24ec:	6802      	ldr	r2, [r0, #0]
    24ee:	4694      	mov	ip, r2
    24f0:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    24f2:	2280      	movs	r2, #128	; 0x80
    24f4:	0052      	lsls	r2, r2, #1
    24f6:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    24f8:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    24fa:	076d      	lsls	r5, r5, #29
    24fc:	d178      	bne.n	25f0 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    24fe:	32e4      	adds	r2, #228	; 0xe4
    2500:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2502:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    2504:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2506:	422e      	tst	r6, r5
    2508:	d172      	bne.n	25f0 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    250a:	3d5f      	subs	r5, #95	; 0x5f
    250c:	32e4      	adds	r2, #228	; 0xe4
    250e:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2510:	001a      	movs	r2, r3
    2512:	3208      	adds	r2, #8
    2514:	0152      	lsls	r2, r2, #5
    2516:	6804      	ldr	r4, [r0, #0]
    2518:	18a4      	adds	r4, r4, r2
    251a:	352f      	adds	r5, #47	; 0x2f
    251c:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    251e:	6800      	ldr	r0, [r0, #0]
    2520:	1882      	adds	r2, r0, r2
    2522:	2080      	movs	r0, #128	; 0x80
    2524:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    2526:	788a      	ldrb	r2, [r1, #2]
    2528:	2a00      	cmp	r2, #0
    252a:	d01f      	beq.n	256c <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    252c:	0158      	lsls	r0, r3, #5
    252e:	4a74      	ldr	r2, [pc, #464]	; (2700 <usb_device_endpoint_set_config+0x23c>)
    2530:	1812      	adds	r2, r2, r0
    2532:	6854      	ldr	r4, [r2, #4]
    2534:	2080      	movs	r0, #128	; 0x80
    2536:	0600      	lsls	r0, r0, #24
    2538:	4304      	orrs	r4, r0
    253a:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    253c:	6954      	ldr	r4, [r2, #20]
    253e:	4320      	orrs	r0, r4
    2540:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2542:	2507      	movs	r5, #7
    2544:	784c      	ldrb	r4, [r1, #1]
    2546:	015a      	lsls	r2, r3, #5
    2548:	4b6d      	ldr	r3, [pc, #436]	; (2700 <usb_device_endpoint_set_config+0x23c>)
    254a:	189b      	adds	r3, r3, r2
    254c:	6858      	ldr	r0, [r3, #4]
    254e:	402c      	ands	r4, r5
    2550:	0724      	lsls	r4, r4, #28
    2552:	4e6c      	ldr	r6, [pc, #432]	; (2704 <usb_device_endpoint_set_config+0x240>)
    2554:	4030      	ands	r0, r6
    2556:	4320      	orrs	r0, r4
    2558:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    255a:	7849      	ldrb	r1, [r1, #1]
    255c:	695a      	ldr	r2, [r3, #20]
    255e:	4029      	ands	r1, r5
    2560:	0709      	lsls	r1, r1, #28
    2562:	4032      	ands	r2, r6
    2564:	430a      	orrs	r2, r1
    2566:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    2568:	2200      	movs	r2, #0
    256a:	e041      	b.n	25f0 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    256c:	0158      	lsls	r0, r3, #5
    256e:	4a64      	ldr	r2, [pc, #400]	; (2700 <usb_device_endpoint_set_config+0x23c>)
    2570:	1812      	adds	r2, r2, r0
    2572:	6850      	ldr	r0, [r2, #4]
    2574:	0040      	lsls	r0, r0, #1
    2576:	0840      	lsrs	r0, r0, #1
    2578:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    257a:	6950      	ldr	r0, [r2, #20]
    257c:	0040      	lsls	r0, r0, #1
    257e:	0840      	lsrs	r0, r0, #1
    2580:	6150      	str	r0, [r2, #20]
    2582:	e7de      	b.n	2542 <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    2584:	2c00      	cmp	r4, #0
    2586:	db35      	blt.n	25f4 <usb_device_endpoint_set_config+0x130>
    2588:	015d      	lsls	r5, r3, #5
    258a:	6802      	ldr	r2, [r0, #0]
    258c:	4694      	mov	ip, r2
    258e:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2590:	2280      	movs	r2, #128	; 0x80
    2592:	0052      	lsls	r2, r2, #1
    2594:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    2596:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2598:	0776      	lsls	r6, r6, #29
    259a:	d129      	bne.n	25f0 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    259c:	2680      	movs	r6, #128	; 0x80
    259e:	0076      	lsls	r6, r6, #1
    25a0:	5daa      	ldrb	r2, [r5, r6]
    25a2:	2702      	movs	r7, #2
    25a4:	433a      	orrs	r2, r7
    25a6:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    25a8:	6802      	ldr	r2, [r0, #0]
    25aa:	0018      	movs	r0, r3
    25ac:	3008      	adds	r0, #8
    25ae:	0140      	lsls	r0, r0, #5
    25b0:	1812      	adds	r2, r2, r0
    25b2:	2040      	movs	r0, #64	; 0x40
    25b4:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    25b6:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    25b8:	784f      	ldrb	r7, [r1, #1]
    25ba:	005d      	lsls	r5, r3, #1
    25bc:	18ad      	adds	r5, r5, r2
    25be:	012d      	lsls	r5, r5, #4
    25c0:	4e4f      	ldr	r6, [pc, #316]	; (2700 <usb_device_endpoint_set_config+0x23c>)
    25c2:	1975      	adds	r5, r6, r5
    25c4:	6868      	ldr	r0, [r5, #4]
    25c6:	2407      	movs	r4, #7
    25c8:	403c      	ands	r4, r7
    25ca:	0724      	lsls	r4, r4, #28
    25cc:	4e4d      	ldr	r6, [pc, #308]	; (2704 <usb_device_endpoint_set_config+0x240>)
    25ce:	4030      	ands	r0, r6
    25d0:	4320      	orrs	r0, r4
    25d2:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    25d4:	7889      	ldrb	r1, [r1, #2]
    25d6:	2900      	cmp	r1, #0
    25d8:	d000      	beq.n	25dc <usb_device_endpoint_set_config+0x118>
    25da:	e088      	b.n	26ee <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    25dc:	005b      	lsls	r3, r3, #1
    25de:	189b      	adds	r3, r3, r2
    25e0:	011b      	lsls	r3, r3, #4
    25e2:	4a47      	ldr	r2, [pc, #284]	; (2700 <usb_device_endpoint_set_config+0x23c>)
    25e4:	18d3      	adds	r3, r2, r3
    25e6:	685a      	ldr	r2, [r3, #4]
    25e8:	0052      	lsls	r2, r2, #1
    25ea:	0852      	lsrs	r2, r2, #1
    25ec:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    25ee:	2200      	movs	r2, #0
}
    25f0:	0010      	movs	r0, r2
    25f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25f4:	015d      	lsls	r5, r3, #5
    25f6:	6802      	ldr	r2, [r0, #0]
    25f8:	4694      	mov	ip, r2
    25fa:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    25fc:	2280      	movs	r2, #128	; 0x80
    25fe:	0052      	lsls	r2, r2, #1
    2600:	5caf      	ldrb	r7, [r5, r2]
    2602:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    2604:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2606:	4237      	tst	r7, r6
    2608:	d1f2      	bne.n	25f0 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    260a:	3690      	adds	r6, #144	; 0x90
    260c:	5daa      	ldrb	r2, [r5, r6]
    260e:	2720      	movs	r7, #32
    2610:	433a      	orrs	r2, r7
    2612:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2614:	6802      	ldr	r2, [r0, #0]
    2616:	0018      	movs	r0, r3
    2618:	3008      	adds	r0, #8
    261a:	0140      	lsls	r0, r0, #5
    261c:	1812      	adds	r2, r2, r0
    261e:	2080      	movs	r0, #128	; 0x80
    2620:	7110      	strb	r0, [r2, #4]
    2622:	e7c8      	b.n	25b6 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    2624:	2c00      	cmp	r4, #0
    2626:	db17      	blt.n	2658 <usb_device_endpoint_set_config+0x194>
    2628:	015d      	lsls	r5, r3, #5
    262a:	6802      	ldr	r2, [r0, #0]
    262c:	4694      	mov	ip, r2
    262e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2630:	2280      	movs	r2, #128	; 0x80
    2632:	0052      	lsls	r2, r2, #1
    2634:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    2636:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2638:	0776      	lsls	r6, r6, #29
    263a:	d1d9      	bne.n	25f0 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    263c:	2680      	movs	r6, #128	; 0x80
    263e:	0076      	lsls	r6, r6, #1
    2640:	5daa      	ldrb	r2, [r5, r6]
    2642:	2703      	movs	r7, #3
    2644:	433a      	orrs	r2, r7
    2646:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2648:	6802      	ldr	r2, [r0, #0]
    264a:	0018      	movs	r0, r3
    264c:	3008      	adds	r0, #8
    264e:	0140      	lsls	r0, r0, #5
    2650:	1812      	adds	r2, r2, r0
    2652:	2040      	movs	r0, #64	; 0x40
    2654:	7150      	strb	r0, [r2, #5]
    2656:	e7ae      	b.n	25b6 <usb_device_endpoint_set_config+0xf2>
    2658:	015d      	lsls	r5, r3, #5
    265a:	6802      	ldr	r2, [r0, #0]
    265c:	4694      	mov	ip, r2
    265e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2660:	2280      	movs	r2, #128	; 0x80
    2662:	0052      	lsls	r2, r2, #1
    2664:	5caf      	ldrb	r7, [r5, r2]
    2666:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    2668:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    266a:	4237      	tst	r7, r6
    266c:	d1c0      	bne.n	25f0 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    266e:	3690      	adds	r6, #144	; 0x90
    2670:	5daa      	ldrb	r2, [r5, r6]
    2672:	2730      	movs	r7, #48	; 0x30
    2674:	433a      	orrs	r2, r7
    2676:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2678:	6802      	ldr	r2, [r0, #0]
    267a:	0018      	movs	r0, r3
    267c:	3008      	adds	r0, #8
    267e:	0140      	lsls	r0, r0, #5
    2680:	1812      	adds	r2, r2, r0
    2682:	2080      	movs	r0, #128	; 0x80
    2684:	7110      	strb	r0, [r2, #4]
    2686:	e796      	b.n	25b6 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    2688:	2c00      	cmp	r4, #0
    268a:	db17      	blt.n	26bc <usb_device_endpoint_set_config+0x1f8>
    268c:	015d      	lsls	r5, r3, #5
    268e:	6802      	ldr	r2, [r0, #0]
    2690:	4694      	mov	ip, r2
    2692:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2694:	2280      	movs	r2, #128	; 0x80
    2696:	0052      	lsls	r2, r2, #1
    2698:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    269a:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    269c:	0776      	lsls	r6, r6, #29
    269e:	d1a7      	bne.n	25f0 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    26a0:	2680      	movs	r6, #128	; 0x80
    26a2:	0076      	lsls	r6, r6, #1
    26a4:	5daa      	ldrb	r2, [r5, r6]
    26a6:	2704      	movs	r7, #4
    26a8:	433a      	orrs	r2, r7
    26aa:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    26ac:	6802      	ldr	r2, [r0, #0]
    26ae:	0018      	movs	r0, r3
    26b0:	3008      	adds	r0, #8
    26b2:	0140      	lsls	r0, r0, #5
    26b4:	1812      	adds	r2, r2, r0
    26b6:	2040      	movs	r0, #64	; 0x40
    26b8:	7150      	strb	r0, [r2, #5]
    26ba:	e77c      	b.n	25b6 <usb_device_endpoint_set_config+0xf2>
    26bc:	015d      	lsls	r5, r3, #5
    26be:	6802      	ldr	r2, [r0, #0]
    26c0:	4694      	mov	ip, r2
    26c2:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    26c4:	2280      	movs	r2, #128	; 0x80
    26c6:	0052      	lsls	r2, r2, #1
    26c8:	5caf      	ldrb	r7, [r5, r2]
    26ca:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    26cc:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    26ce:	4237      	tst	r7, r6
    26d0:	d000      	beq.n	26d4 <usb_device_endpoint_set_config+0x210>
    26d2:	e78d      	b.n	25f0 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    26d4:	3690      	adds	r6, #144	; 0x90
    26d6:	5daa      	ldrb	r2, [r5, r6]
    26d8:	2740      	movs	r7, #64	; 0x40
    26da:	433a      	orrs	r2, r7
    26dc:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    26de:	6802      	ldr	r2, [r0, #0]
    26e0:	0018      	movs	r0, r3
    26e2:	3008      	adds	r0, #8
    26e4:	0140      	lsls	r0, r0, #5
    26e6:	1812      	adds	r2, r2, r0
    26e8:	2080      	movs	r0, #128	; 0x80
    26ea:	7110      	strb	r0, [r2, #4]
    26ec:	e763      	b.n	25b6 <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    26ee:	6869      	ldr	r1, [r5, #4]
    26f0:	2380      	movs	r3, #128	; 0x80
    26f2:	061b      	lsls	r3, r3, #24
    26f4:	430b      	orrs	r3, r1
    26f6:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    26f8:	2200      	movs	r2, #0
    26fa:	e779      	b.n	25f0 <usb_device_endpoint_set_config+0x12c>
    26fc:	000033e8 	.word	0x000033e8
    2700:	2000035c 	.word	0x2000035c
    2704:	8fffffff 	.word	0x8fffffff

00002708 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    2708:	230f      	movs	r3, #15
    270a:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    270c:	b249      	sxtb	r1, r1
    270e:	2900      	cmp	r1, #0
    2710:	db0a      	blt.n	2728 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2712:	3308      	adds	r3, #8
    2714:	015b      	lsls	r3, r3, #5
    2716:	6802      	ldr	r2, [r0, #0]
    2718:	18d2      	adds	r2, r2, r3
    271a:	2140      	movs	r1, #64	; 0x40
    271c:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    271e:	6802      	ldr	r2, [r0, #0]
    2720:	18d3      	adds	r3, r2, r3
    2722:	2201      	movs	r2, #1
    2724:	71da      	strb	r2, [r3, #7]
	}
}
    2726:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2728:	3308      	adds	r3, #8
    272a:	015b      	lsls	r3, r3, #5
    272c:	6802      	ldr	r2, [r0, #0]
    272e:	18d2      	adds	r2, r2, r3
    2730:	2180      	movs	r1, #128	; 0x80
    2732:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    2734:	6802      	ldr	r2, [r0, #0]
    2736:	18d3      	adds	r3, r2, r3
    2738:	2202      	movs	r2, #2
    273a:	71da      	strb	r2, [r3, #7]
    273c:	e7f3      	b.n	2726 <usb_device_endpoint_abort_job+0x1e>

0000273e <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    273e:	230f      	movs	r3, #15
    2740:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    2742:	b249      	sxtb	r1, r1
    2744:	2900      	cmp	r1, #0
    2746:	db07      	blt.n	2758 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    2748:	6802      	ldr	r2, [r0, #0]
    274a:	3308      	adds	r3, #8
    274c:	015b      	lsls	r3, r3, #5
    274e:	18d3      	adds	r3, r2, r3
    2750:	7998      	ldrb	r0, [r3, #6]
    2752:	06c0      	lsls	r0, r0, #27
    2754:	0fc0      	lsrs	r0, r0, #31
	}
}
    2756:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    2758:	6802      	ldr	r2, [r0, #0]
    275a:	3308      	adds	r3, #8
    275c:	015b      	lsls	r3, r3, #5
    275e:	18d3      	adds	r3, r2, r3
    2760:	7998      	ldrb	r0, [r3, #6]
    2762:	0680      	lsls	r0, r0, #26
    2764:	0fc0      	lsrs	r0, r0, #31
    2766:	e7f6      	b.n	2756 <usb_device_endpoint_is_halted+0x18>

00002768 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2768:	230f      	movs	r3, #15
    276a:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    276c:	b249      	sxtb	r1, r1
    276e:	2900      	cmp	r1, #0
    2770:	db06      	blt.n	2780 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    2772:	6802      	ldr	r2, [r0, #0]
    2774:	3308      	adds	r3, #8
    2776:	015b      	lsls	r3, r3, #5
    2778:	18d3      	adds	r3, r2, r3
    277a:	2210      	movs	r2, #16
    277c:	715a      	strb	r2, [r3, #5]
	}
}
    277e:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    2780:	6802      	ldr	r2, [r0, #0]
    2782:	3308      	adds	r3, #8
    2784:	015b      	lsls	r3, r3, #5
    2786:	18d3      	adds	r3, r2, r3
    2788:	2220      	movs	r2, #32
    278a:	715a      	strb	r2, [r3, #5]
    278c:	e7f7      	b.n	277e <usb_device_endpoint_set_halt+0x16>

0000278e <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    278e:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2790:	230f      	movs	r3, #15
    2792:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    2794:	b249      	sxtb	r1, r1
    2796:	2900      	cmp	r1, #0
    2798:	db1d      	blt.n	27d6 <usb_device_endpoint_clear_halt+0x48>
    279a:	0159      	lsls	r1, r3, #5
    279c:	6802      	ldr	r2, [r0, #0]
    279e:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    27a0:	2483      	movs	r4, #131	; 0x83
    27a2:	0064      	lsls	r4, r4, #1
    27a4:	5d14      	ldrb	r4, [r2, r4]
    27a6:	06e4      	lsls	r4, r4, #27
    27a8:	d514      	bpl.n	27d4 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    27aa:	2510      	movs	r5, #16
    27ac:	2482      	movs	r4, #130	; 0x82
    27ae:	0064      	lsls	r4, r4, #1
    27b0:	5515      	strb	r5, [r2, r4]
    27b2:	6802      	ldr	r2, [r0, #0]
    27b4:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    27b6:	2108      	movs	r1, #8
    27b8:	31ff      	adds	r1, #255	; 0xff
    27ba:	5c51      	ldrb	r1, [r2, r1]
    27bc:	0689      	lsls	r1, r1, #26
    27be:	d509      	bpl.n	27d4 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    27c0:	3ce4      	subs	r4, #228	; 0xe4
    27c2:	2108      	movs	r1, #8
    27c4:	31ff      	adds	r1, #255	; 0xff
    27c6:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    27c8:	6802      	ldr	r2, [r0, #0]
    27ca:	3308      	adds	r3, #8
    27cc:	015b      	lsls	r3, r3, #5
    27ce:	18d3      	adds	r3, r2, r3
    27d0:	2201      	movs	r2, #1
    27d2:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    27d4:	bd30      	pop	{r4, r5, pc}
    27d6:	0159      	lsls	r1, r3, #5
    27d8:	6802      	ldr	r2, [r0, #0]
    27da:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    27dc:	2483      	movs	r4, #131	; 0x83
    27de:	0064      	lsls	r4, r4, #1
    27e0:	5d14      	ldrb	r4, [r2, r4]
    27e2:	06a4      	lsls	r4, r4, #26
    27e4:	d5f6      	bpl.n	27d4 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    27e6:	2520      	movs	r5, #32
    27e8:	2482      	movs	r4, #130	; 0x82
    27ea:	0064      	lsls	r4, r4, #1
    27ec:	5515      	strb	r5, [r2, r4]
    27ee:	6802      	ldr	r2, [r0, #0]
    27f0:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    27f2:	2108      	movs	r1, #8
    27f4:	31ff      	adds	r1, #255	; 0xff
    27f6:	5c51      	ldrb	r1, [r2, r1]
    27f8:	0649      	lsls	r1, r1, #25
    27fa:	d5eb      	bpl.n	27d4 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    27fc:	3cc4      	subs	r4, #196	; 0xc4
    27fe:	2108      	movs	r1, #8
    2800:	31ff      	adds	r1, #255	; 0xff
    2802:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    2804:	6802      	ldr	r2, [r0, #0]
    2806:	3308      	adds	r3, #8
    2808:	015b      	lsls	r3, r3, #5
    280a:	18d3      	adds	r3, r2, r3
    280c:	2202      	movs	r2, #2
    280e:	711a      	strb	r2, [r3, #4]
    2810:	e7e0      	b.n	27d4 <usb_device_endpoint_clear_halt+0x46>
	...

00002814 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    2814:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    2816:	000c      	movs	r4, r1
    2818:	3408      	adds	r4, #8
    281a:	0164      	lsls	r4, r4, #5
    281c:	6805      	ldr	r5, [r0, #0]
    281e:	5d64      	ldrb	r4, [r4, r5]
    2820:	0664      	lsls	r4, r4, #25
    2822:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    2824:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    2826:	2c00      	cmp	r4, #0
    2828:	d101      	bne.n	282e <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    282a:	0028      	movs	r0, r5
    282c:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    282e:	014c      	lsls	r4, r1, #5
    2830:	4d0b      	ldr	r5, [pc, #44]	; (2860 <usb_device_endpoint_write_buffer_job+0x4c>)
    2832:	192d      	adds	r5, r5, r4
    2834:	002c      	movs	r4, r5
    2836:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    2838:	696a      	ldr	r2, [r5, #20]
    283a:	4d0a      	ldr	r5, [pc, #40]	; (2864 <usb_device_endpoint_write_buffer_job+0x50>)
    283c:	402a      	ands	r2, r5
    283e:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    2840:	6962      	ldr	r2, [r4, #20]
    2842:	049b      	lsls	r3, r3, #18
    2844:	0c9b      	lsrs	r3, r3, #18
    2846:	0b92      	lsrs	r2, r2, #14
    2848:	0392      	lsls	r2, r2, #14
    284a:	4313      	orrs	r3, r2
    284c:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    284e:	6803      	ldr	r3, [r0, #0]
    2850:	3108      	adds	r1, #8
    2852:	0149      	lsls	r1, r1, #5
    2854:	1859      	adds	r1, r3, r1
    2856:	2380      	movs	r3, #128	; 0x80
    2858:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    285a:	2500      	movs	r5, #0
    285c:	e7e5      	b.n	282a <usb_device_endpoint_write_buffer_job+0x16>
    285e:	46c0      	nop			; (mov r8, r8)
    2860:	2000035c 	.word	0x2000035c
    2864:	f0003fff 	.word	0xf0003fff

00002868 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    2868:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    286a:	000c      	movs	r4, r1
    286c:	3408      	adds	r4, #8
    286e:	0164      	lsls	r4, r4, #5
    2870:	6805      	ldr	r5, [r0, #0]
    2872:	5d64      	ldrb	r4, [r4, r5]
    2874:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    2876:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    2878:	2c00      	cmp	r4, #0
    287a:	d101      	bne.n	2880 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    287c:	0028      	movs	r0, r5
    287e:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    2880:	4c0b      	ldr	r4, [pc, #44]	; (28b0 <usb_device_endpoint_read_buffer_job+0x48>)
    2882:	014d      	lsls	r5, r1, #5
    2884:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    2886:	1962      	adds	r2, r4, r5
    2888:	6854      	ldr	r4, [r2, #4]
    288a:	049b      	lsls	r3, r3, #18
    288c:	091b      	lsrs	r3, r3, #4
    288e:	4d09      	ldr	r5, [pc, #36]	; (28b4 <usb_device_endpoint_read_buffer_job+0x4c>)
    2890:	402c      	ands	r4, r5
    2892:	4323      	orrs	r3, r4
    2894:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    2896:	6853      	ldr	r3, [r2, #4]
    2898:	0b9b      	lsrs	r3, r3, #14
    289a:	039b      	lsls	r3, r3, #14
    289c:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    289e:	6803      	ldr	r3, [r0, #0]
    28a0:	3108      	adds	r1, #8
    28a2:	0149      	lsls	r1, r1, #5
    28a4:	1859      	adds	r1, r3, r1
    28a6:	2340      	movs	r3, #64	; 0x40
    28a8:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    28aa:	2500      	movs	r5, #0
    28ac:	e7e6      	b.n	287c <usb_device_endpoint_read_buffer_job+0x14>
    28ae:	46c0      	nop			; (mov r8, r8)
    28b0:	2000035c 	.word	0x2000035c
    28b4:	f0003fff 	.word	0xf0003fff

000028b8 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    28b8:	4b09      	ldr	r3, [pc, #36]	; (28e0 <usb_device_endpoint_setup_buffer_job+0x28>)
    28ba:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    28bc:	685a      	ldr	r2, [r3, #4]
    28be:	4909      	ldr	r1, [pc, #36]	; (28e4 <usb_device_endpoint_setup_buffer_job+0x2c>)
    28c0:	4011      	ands	r1, r2
    28c2:	2280      	movs	r2, #128	; 0x80
    28c4:	0292      	lsls	r2, r2, #10
    28c6:	430a      	orrs	r2, r1
    28c8:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    28ca:	685a      	ldr	r2, [r3, #4]
    28cc:	0b92      	lsrs	r2, r2, #14
    28ce:	0392      	lsls	r2, r2, #14
    28d0:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    28d2:	6802      	ldr	r2, [r0, #0]
    28d4:	2140      	movs	r1, #64	; 0x40
    28d6:	2382      	movs	r3, #130	; 0x82
    28d8:	005b      	lsls	r3, r3, #1
    28da:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    28dc:	2000      	movs	r0, #0
    28de:	4770      	bx	lr
    28e0:	2000035c 	.word	0x2000035c
    28e4:	f0003fff 	.word	0xf0003fff

000028e8 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    28e8:	6802      	ldr	r2, [r0, #0]
    28ea:	7813      	ldrb	r3, [r2, #0]
    28ec:	2102      	movs	r1, #2
    28ee:	430b      	orrs	r3, r1
    28f0:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    28f2:	6802      	ldr	r2, [r0, #0]
    28f4:	7893      	ldrb	r3, [r2, #2]
    28f6:	2b02      	cmp	r3, #2
    28f8:	d0fc      	beq.n	28f4 <usb_enable+0xc>
}
    28fa:	4770      	bx	lr

000028fc <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    28fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    28fe:	46de      	mov	lr, fp
    2900:	4657      	mov	r7, sl
    2902:	464e      	mov	r6, r9
    2904:	4645      	mov	r5, r8
    2906:	b5e0      	push	{r5, r6, r7, lr}
    2908:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    290a:	4ba9      	ldr	r3, [pc, #676]	; (2bb0 <USB_Handler+0x2b4>)
    290c:	6818      	ldr	r0, [r3, #0]
    290e:	6806      	ldr	r6, [r0, #0]
    2910:	7833      	ldrb	r3, [r6, #0]
    2912:	09db      	lsrs	r3, r3, #7
    2914:	d006      	beq.n	2924 <USB_Handler+0x28>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    2916:	b003      	add	sp, #12
    2918:	bc3c      	pop	{r2, r3, r4, r5}
    291a:	4690      	mov	r8, r2
    291c:	4699      	mov	r9, r3
    291e:	46a2      	mov	sl, r4
    2920:	46ab      	mov	fp, r5
    2922:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    2924:	8c37      	ldrh	r7, [r6, #32]
    2926:	b2bf      	uxth	r7, r7
	if (0 == ep_inst) {
    2928:	2f00      	cmp	r7, #0
    292a:	d12e      	bne.n	298a <USB_Handler+0x8e>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    292c:	8bb6      	ldrh	r6, [r6, #28]
    292e:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    2930:	33a2      	adds	r3, #162	; 0xa2
		flags_run = flags &
    2932:	5ac3      	ldrh	r3, [r0, r3]
    2934:	22a0      	movs	r2, #160	; 0xa0
    2936:	5a85      	ldrh	r5, [r0, r2]
    2938:	401d      	ands	r5, r3
    293a:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    293c:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    293e:	4f9d      	ldr	r7, [pc, #628]	; (2bb4 <USB_Handler+0x2b8>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    2940:	4b9b      	ldr	r3, [pc, #620]	; (2bb0 <USB_Handler+0x2b4>)
    2942:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    2944:	4698      	mov	r8, r3
    2946:	e00b      	b.n	2960 <USB_Handler+0x64>
    2948:	00a3      	lsls	r3, r4, #2
    294a:	4642      	mov	r2, r8
    294c:	6812      	ldr	r2, [r2, #0]
    294e:	4694      	mov	ip, r2
    2950:	4463      	add	r3, ip
    2952:	685b      	ldr	r3, [r3, #4]
    2954:	4998      	ldr	r1, [pc, #608]	; (2bb8 <USB_Handler+0x2bc>)
    2956:	4660      	mov	r0, ip
    2958:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    295a:	3401      	adds	r4, #1
    295c:	2c07      	cmp	r4, #7
    295e:	d0da      	beq.n	2916 <USB_Handler+0x1a>
			if (flags & _usb_device_irq_bits[i]) {
    2960:	0063      	lsls	r3, r4, #1
    2962:	5bdb      	ldrh	r3, [r3, r7]
    2964:	4233      	tst	r3, r6
    2966:	d003      	beq.n	2970 <USB_Handler+0x74>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    2968:	464a      	mov	r2, r9
    296a:	6812      	ldr	r2, [r2, #0]
    296c:	6812      	ldr	r2, [r2, #0]
    296e:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    2970:	422b      	tst	r3, r5
    2972:	d0f2      	beq.n	295a <USB_Handler+0x5e>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    2974:	2c06      	cmp	r4, #6
    2976:	d1e7      	bne.n	2948 <USB_Handler+0x4c>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    2978:	4b90      	ldr	r3, [pc, #576]	; (2bbc <USB_Handler+0x2c0>)
    297a:	891b      	ldrh	r3, [r3, #8]
    297c:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    297e:	2280      	movs	r2, #128	; 0x80
    2980:	0052      	lsls	r2, r2, #1
    2982:	4013      	ands	r3, r2
    2984:	4a8c      	ldr	r2, [pc, #560]	; (2bb8 <USB_Handler+0x2bc>)
    2986:	6013      	str	r3, [r2, #0]
    2988:	e7de      	b.n	2948 <USB_Handler+0x4c>
    298a:	0005      	movs	r5, r0
    298c:	35a4      	adds	r5, #164	; 0xa4
	if (0 == ep_inst) {
    298e:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    2990:	2201      	movs	r2, #1
    2992:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    2994:	325f      	adds	r2, #95	; 0x5f
    2996:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2998:	3a50      	subs	r2, #80	; 0x50
    299a:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    299c:	3a0d      	subs	r2, #13
    299e:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    29a0:	4680      	mov	r8, r0
    29a2:	e0ae      	b.n	2b02 <USB_Handler+0x206>
    29a4:	0002      	movs	r2, r0
    29a6:	4640      	mov	r0, r8
    29a8:	4690      	mov	r8, r2
    29aa:	015b      	lsls	r3, r3, #5
    29ac:	18f6      	adds	r6, r6, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    29ae:	2308      	movs	r3, #8
    29b0:	33ff      	adds	r3, #255	; 0xff
    29b2:	5cf3      	ldrb	r3, [r6, r3]
    29b4:	065b      	lsls	r3, r3, #25
    29b6:	d513      	bpl.n	29e0 <USB_Handler+0xe4>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    29b8:	2240      	movs	r2, #64	; 0x40
    29ba:	2308      	movs	r3, #8
    29bc:	33ff      	adds	r3, #255	; 0xff
    29be:	54f2      	strb	r2, [r6, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    29c0:	3b88      	subs	r3, #136	; 0x88
    29c2:	3bff      	subs	r3, #255	; 0xff
    29c4:	4642      	mov	r2, r8
    29c6:	4313      	orrs	r3, r2
    29c8:	4a7d      	ldr	r2, [pc, #500]	; (2bc0 <USB_Handler+0x2c4>)
    29ca:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    29cc:	2360      	movs	r3, #96	; 0x60
    29ce:	420b      	tst	r3, r1
    29d0:	d0a1      	beq.n	2916 <USB_Handler+0x1a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    29d2:	9b01      	ldr	r3, [sp, #4]
    29d4:	011b      	lsls	r3, r3, #4
    29d6:	18c3      	adds	r3, r0, r3
    29d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    29da:	4979      	ldr	r1, [pc, #484]	; (2bc0 <USB_Handler+0x2c4>)
    29dc:	4798      	blx	r3
    29de:	e79a      	b.n	2916 <USB_Handler+0x1a>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    29e0:	2308      	movs	r3, #8
    29e2:	33ff      	adds	r3, #255	; 0xff
    29e4:	5cf3      	ldrb	r3, [r6, r3]
    29e6:	069b      	lsls	r3, r3, #26
    29e8:	d5f0      	bpl.n	29cc <USB_Handler+0xd0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    29ea:	2220      	movs	r2, #32
    29ec:	2308      	movs	r3, #8
    29ee:	33ff      	adds	r3, #255	; 0xff
    29f0:	54f2      	strb	r2, [r6, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    29f2:	4b73      	ldr	r3, [pc, #460]	; (2bc0 <USB_Handler+0x2c4>)
    29f4:	4642      	mov	r2, r8
    29f6:	719a      	strb	r2, [r3, #6]
    29f8:	e7e8      	b.n	29cc <USB_Handler+0xd0>
    29fa:	4640      	mov	r0, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    29fc:	9a01      	ldr	r2, [sp, #4]
    29fe:	0013      	movs	r3, r2
    2a00:	3308      	adds	r3, #8
    2a02:	015b      	lsls	r3, r3, #5
    2a04:	18f6      	adds	r6, r6, r3
    2a06:	2310      	movs	r3, #16
    2a08:	71f3      	strb	r3, [r6, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    2a0a:	1883      	adds	r3, r0, r2
    2a0c:	33ac      	adds	r3, #172	; 0xac
    2a0e:	781b      	ldrb	r3, [r3, #0]
    2a10:	06db      	lsls	r3, r3, #27
    2a12:	d400      	bmi.n	2a16 <USB_Handler+0x11a>
    2a14:	e77f      	b.n	2916 <USB_Handler+0x1a>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    2a16:	0014      	movs	r4, r2
    2a18:	0152      	lsls	r2, r2, #5
    2a1a:	4b68      	ldr	r3, [pc, #416]	; (2bbc <USB_Handler+0x2c0>)
    2a1c:	189b      	adds	r3, r3, r2
    2a1e:	685b      	ldr	r3, [r3, #4]
    2a20:	049b      	lsls	r3, r3, #18
    2a22:	0c9b      	lsrs	r3, r3, #18
    2a24:	4966      	ldr	r1, [pc, #408]	; (2bc0 <USB_Handler+0x2c4>)
    2a26:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    2a28:	0123      	lsls	r3, r4, #4
    2a2a:	18c3      	adds	r3, r0, r3
    2a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a2e:	4798      	blx	r3
    2a30:	e771      	b.n	2916 <USB_Handler+0x1a>
    2a32:	0002      	movs	r2, r0
    2a34:	4640      	mov	r0, r8
    2a36:	4690      	mov	r8, r2
    2a38:	015b      	lsls	r3, r3, #5
    2a3a:	18f6      	adds	r6, r6, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2a3c:	2308      	movs	r3, #8
    2a3e:	33ff      	adds	r3, #255	; 0xff
    2a40:	5cf3      	ldrb	r3, [r6, r3]
    2a42:	079b      	lsls	r3, r3, #30
    2a44:	d51c      	bpl.n	2a80 <USB_Handler+0x184>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    2a46:	2202      	movs	r2, #2
    2a48:	2308      	movs	r3, #8
    2a4a:	33ff      	adds	r3, #255	; 0xff
    2a4c:	54f2      	strb	r2, [r6, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    2a4e:	4c5c      	ldr	r4, [pc, #368]	; (2bc0 <USB_Handler+0x2c4>)
    2a50:	3b88      	subs	r3, #136	; 0x88
    2a52:	3bff      	subs	r3, #255	; 0xff
    2a54:	4642      	mov	r2, r8
    2a56:	4313      	orrs	r3, r2
    2a58:	71a3      	strb	r3, [r4, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    2a5a:	9b01      	ldr	r3, [sp, #4]
    2a5c:	015a      	lsls	r2, r3, #5
    2a5e:	4b57      	ldr	r3, [pc, #348]	; (2bbc <USB_Handler+0x2c0>)
    2a60:	189b      	adds	r3, r3, r2
    2a62:	3310      	adds	r3, #16
    2a64:	685b      	ldr	r3, [r3, #4]
    2a66:	049b      	lsls	r3, r3, #18
    2a68:	0c9b      	lsrs	r3, r3, #18
    2a6a:	8063      	strh	r3, [r4, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    2a6c:	078b      	lsls	r3, r1, #30
    2a6e:	d100      	bne.n	2a72 <USB_Handler+0x176>
    2a70:	e751      	b.n	2916 <USB_Handler+0x1a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    2a72:	9b01      	ldr	r3, [sp, #4]
    2a74:	3302      	adds	r3, #2
    2a76:	011b      	lsls	r3, r3, #4
    2a78:	581b      	ldr	r3, [r3, r0]
    2a7a:	4951      	ldr	r1, [pc, #324]	; (2bc0 <USB_Handler+0x2c4>)
    2a7c:	4798      	blx	r3
    2a7e:	e74a      	b.n	2916 <USB_Handler+0x1a>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2a80:	2308      	movs	r3, #8
    2a82:	33ff      	adds	r3, #255	; 0xff
    2a84:	5cf3      	ldrb	r3, [r6, r3]
    2a86:	07db      	lsls	r3, r3, #31
    2a88:	d5f0      	bpl.n	2a6c <USB_Handler+0x170>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    2a8a:	2201      	movs	r2, #1
    2a8c:	2308      	movs	r3, #8
    2a8e:	33ff      	adds	r3, #255	; 0xff
    2a90:	54f2      	strb	r2, [r6, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2a92:	4c4b      	ldr	r4, [pc, #300]	; (2bc0 <USB_Handler+0x2c4>)
    2a94:	4643      	mov	r3, r8
    2a96:	71a3      	strb	r3, [r4, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    2a98:	9b01      	ldr	r3, [sp, #4]
    2a9a:	015b      	lsls	r3, r3, #5
    2a9c:	4a47      	ldr	r2, [pc, #284]	; (2bbc <USB_Handler+0x2c0>)
    2a9e:	18d2      	adds	r2, r2, r3
    2aa0:	6853      	ldr	r3, [r2, #4]
    2aa2:	049b      	lsls	r3, r3, #18
    2aa4:	0c9b      	lsrs	r3, r3, #18
    2aa6:	8023      	strh	r3, [r4, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    2aa8:	6853      	ldr	r3, [r2, #4]
    2aaa:	011b      	lsls	r3, r3, #4
    2aac:	0c9b      	lsrs	r3, r3, #18
    2aae:	80a3      	strh	r3, [r4, #4]
    2ab0:	e7dc      	b.n	2a6c <USB_Handler+0x170>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2ab2:	2208      	movs	r2, #8
    2ab4:	32ff      	adds	r2, #255	; 0xff
    2ab6:	5c9a      	ldrb	r2, [r3, r2]
    2ab8:	0752      	lsls	r2, r2, #29
    2aba:	d56d      	bpl.n	2b98 <USB_Handler+0x29c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    2abc:	2404      	movs	r4, #4
    2abe:	2208      	movs	r2, #8
    2ac0:	32ff      	adds	r2, #255	; 0xff
    2ac2:	549c      	strb	r4, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    2ac4:	9c01      	ldr	r4, [sp, #4]
    2ac6:	0162      	lsls	r2, r4, #5
    2ac8:	4b3c      	ldr	r3, [pc, #240]	; (2bbc <USB_Handler+0x2c0>)
    2aca:	189b      	adds	r3, r3, r2
    2acc:	7a9b      	ldrb	r3, [r3, #10]
    2ace:	079b      	lsls	r3, r3, #30
    2ad0:	d505      	bpl.n	2ade <USB_Handler+0x1e2>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    2ad2:	4b3a      	ldr	r3, [pc, #232]	; (2bbc <USB_Handler+0x2c0>)
    2ad4:	189b      	adds	r3, r3, r2
    2ad6:	7a9a      	ldrb	r2, [r3, #10]
    2ad8:	2402      	movs	r4, #2
    2ada:	43a2      	bics	r2, r4
    2adc:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2ade:	4b38      	ldr	r3, [pc, #224]	; (2bc0 <USB_Handler+0x2c4>)
    2ae0:	4642      	mov	r2, r8
    2ae2:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2ae4:	9b01      	ldr	r3, [sp, #4]
    2ae6:	3308      	adds	r3, #8
    2ae8:	015b      	lsls	r3, r3, #5
    2aea:	6802      	ldr	r2, [r0, #0]
    2aec:	4694      	mov	ip, r2
    2aee:	4463      	add	r3, ip
    2af0:	79db      	ldrb	r3, [r3, #7]
    2af2:	07db      	lsls	r3, r3, #31
    2af4:	d550      	bpl.n	2b98 <USB_Handler+0x29c>
    2af6:	e70e      	b.n	2916 <USB_Handler+0x1a>
    2af8:	3301      	adds	r3, #1
    2afa:	3501      	adds	r5, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    2afc:	2b08      	cmp	r3, #8
    2afe:	d100      	bne.n	2b02 <USB_Handler+0x206>
    2b00:	e709      	b.n	2916 <USB_Handler+0x1a>
    2b02:	b2d8      	uxtb	r0, r3
			if (ep_inst & (1 << i)) {
    2b04:	9301      	str	r3, [sp, #4]
    2b06:	003a      	movs	r2, r7
    2b08:	411a      	asrs	r2, r3
    2b0a:	4661      	mov	r1, ip
    2b0c:	4211      	tst	r1, r2
    2b0e:	d0f3      	beq.n	2af8 <USB_Handler+0x1fc>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    2b10:	001a      	movs	r2, r3
    2b12:	3208      	adds	r2, #8
    2b14:	0152      	lsls	r2, r2, #5
    2b16:	18b2      	adds	r2, r6, r2
    2b18:	79d2      	ldrb	r2, [r2, #7]
    2b1a:	b2d2      	uxtb	r2, r2
    2b1c:	7a29      	ldrb	r1, [r5, #8]
    2b1e:	4011      	ands	r1, r2
    2b20:	782c      	ldrb	r4, [r5, #0]
    2b22:	4021      	ands	r1, r4
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    2b24:	464c      	mov	r4, r9
    2b26:	4214      	tst	r4, r2
    2b28:	d000      	beq.n	2b2c <USB_Handler+0x230>
    2b2a:	e73b      	b.n	29a4 <USB_Handler+0xa8>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2b2c:	4654      	mov	r4, sl
    2b2e:	4214      	tst	r4, r2
    2b30:	d000      	beq.n	2b34 <USB_Handler+0x238>
    2b32:	e762      	b.n	29fa <USB_Handler+0xfe>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    2b34:	465c      	mov	r4, fp
    2b36:	4214      	tst	r4, r2
    2b38:	d000      	beq.n	2b3c <USB_Handler+0x240>
    2b3a:	e77a      	b.n	2a32 <USB_Handler+0x136>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    2b3c:	240c      	movs	r4, #12
    2b3e:	4214      	tst	r4, r2
    2b40:	d0da      	beq.n	2af8 <USB_Handler+0x1fc>
    2b42:	0002      	movs	r2, r0
    2b44:	4640      	mov	r0, r8
    2b46:	4690      	mov	r8, r2
    2b48:	015b      	lsls	r3, r3, #5
    2b4a:	18f3      	adds	r3, r6, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2b4c:	2208      	movs	r2, #8
    2b4e:	32ff      	adds	r2, #255	; 0xff
    2b50:	5c9a      	ldrb	r2, [r3, r2]
    2b52:	0712      	lsls	r2, r2, #28
    2b54:	d5ad      	bpl.n	2ab2 <USB_Handler+0x1b6>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    2b56:	3c04      	subs	r4, #4
    2b58:	2208      	movs	r2, #8
    2b5a:	32ff      	adds	r2, #255	; 0xff
    2b5c:	549c      	strb	r4, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    2b5e:	9c01      	ldr	r4, [sp, #4]
    2b60:	0162      	lsls	r2, r4, #5
    2b62:	4b16      	ldr	r3, [pc, #88]	; (2bbc <USB_Handler+0x2c0>)
    2b64:	189b      	adds	r3, r3, r2
    2b66:	7e9b      	ldrb	r3, [r3, #26]
    2b68:	079b      	lsls	r3, r3, #30
    2b6a:	d505      	bpl.n	2b78 <USB_Handler+0x27c>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    2b6c:	4b13      	ldr	r3, [pc, #76]	; (2bbc <USB_Handler+0x2c0>)
    2b6e:	189b      	adds	r3, r3, r2
    2b70:	7e9a      	ldrb	r2, [r3, #26]
    2b72:	2402      	movs	r4, #2
    2b74:	43a2      	bics	r2, r4
    2b76:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    2b78:	2380      	movs	r3, #128	; 0x80
    2b7a:	425b      	negs	r3, r3
    2b7c:	4642      	mov	r2, r8
    2b7e:	4313      	orrs	r3, r2
    2b80:	4a0f      	ldr	r2, [pc, #60]	; (2bc0 <USB_Handler+0x2c4>)
    2b82:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2b84:	9b01      	ldr	r3, [sp, #4]
    2b86:	3308      	adds	r3, #8
    2b88:	015b      	lsls	r3, r3, #5
    2b8a:	6802      	ldr	r2, [r0, #0]
    2b8c:	4694      	mov	ip, r2
    2b8e:	4463      	add	r3, ip
    2b90:	79db      	ldrb	r3, [r3, #7]
    2b92:	079b      	lsls	r3, r3, #30
    2b94:	d500      	bpl.n	2b98 <USB_Handler+0x29c>
    2b96:	e6be      	b.n	2916 <USB_Handler+0x1a>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    2b98:	230c      	movs	r3, #12
    2b9a:	420b      	tst	r3, r1
    2b9c:	d100      	bne.n	2ba0 <USB_Handler+0x2a4>
    2b9e:	e6ba      	b.n	2916 <USB_Handler+0x1a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    2ba0:	9b01      	ldr	r3, [sp, #4]
    2ba2:	011b      	lsls	r3, r3, #4
    2ba4:	18c3      	adds	r3, r0, r3
    2ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2ba8:	4905      	ldr	r1, [pc, #20]	; (2bc0 <USB_Handler+0x2c4>)
    2baa:	4798      	blx	r3
    2bac:	e6b3      	b.n	2916 <USB_Handler+0x1a>
    2bae:	46c0      	nop			; (mov r8, r8)
    2bb0:	200001ac 	.word	0x200001ac
    2bb4:	000033fc 	.word	0x000033fc
    2bb8:	200001b0 	.word	0x200001b0
    2bbc:	2000035c 	.word	0x2000035c
    2bc0:	200001b4 	.word	0x200001b4

00002bc4 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    2bc4:	2200      	movs	r2, #0
    2bc6:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    2bc8:	2301      	movs	r3, #1
    2bca:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    2bcc:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    2bce:	70c3      	strb	r3, [r0, #3]
}
    2bd0:	4770      	bx	lr
	...

00002bd4 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    2bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bd6:	46ce      	mov	lr, r9
    2bd8:	4647      	mov	r7, r8
    2bda:	b580      	push	{r7, lr}
    2bdc:	b083      	sub	sp, #12
    2bde:	0005      	movs	r5, r0
    2be0:	000c      	movs	r4, r1
    2be2:	0016      	movs	r6, r2

#if !SAMD11
	host_pipe_job_busy_status = 0;
#endif

	_usb_instances = module_inst;
    2be4:	4b59      	ldr	r3, [pc, #356]	; (2d4c <usb_init+0x178>)
    2be6:	6018      	str	r0, [r3, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    2be8:	6029      	str	r1, [r5, #0]
			PM->APBBMASK.reg |= mask;
    2bea:	4a59      	ldr	r2, [pc, #356]	; (2d50 <usb_init+0x17c>)
    2bec:	69d3      	ldr	r3, [r2, #28]
    2bee:	2120      	movs	r1, #32
    2bf0:	430b      	orrs	r3, r1
    2bf2:	61d3      	str	r3, [r2, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2bf4:	af01      	add	r7, sp, #4
    2bf6:	2300      	movs	r3, #0
    2bf8:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2bfa:	2201      	movs	r2, #1
    2bfc:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    2bfe:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    2c00:	3306      	adds	r3, #6
    2c02:	4699      	mov	r9, r3
    2c04:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    2c06:	0039      	movs	r1, r7
    2c08:	2018      	movs	r0, #24
    2c0a:	4b52      	ldr	r3, [pc, #328]	; (2d54 <usb_init+0x180>)
    2c0c:	4698      	mov	r8, r3
    2c0e:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    2c10:	464b      	mov	r3, r9
    2c12:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    2c14:	0039      	movs	r1, r7
    2c16:	2019      	movs	r0, #25
    2c18:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    2c1a:	78b3      	ldrb	r3, [r6, #2]
    2c1c:	466a      	mov	r2, sp
    2c1e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    2c20:	4669      	mov	r1, sp
    2c22:	2006      	movs	r0, #6
    2c24:	4b4c      	ldr	r3, [pc, #304]	; (2d58 <usb_init+0x184>)
    2c26:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    2c28:	2006      	movs	r0, #6
    2c2a:	4b4c      	ldr	r3, [pc, #304]	; (2d5c <usb_init+0x188>)
    2c2c:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    2c2e:	7823      	ldrb	r3, [r4, #0]
    2c30:	2201      	movs	r2, #1
    2c32:	4313      	orrs	r3, r2
    2c34:	7023      	strb	r3, [r4, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    2c36:	78a3      	ldrb	r3, [r4, #2]
    2c38:	07db      	lsls	r3, r3, #31
    2c3a:	d4fc      	bmi.n	2c36 <usb_init+0x62>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2c3c:	4a48      	ldr	r2, [pc, #288]	; (2d60 <usb_init+0x18c>)
    2c3e:	78d3      	ldrb	r3, [r2, #3]
    2c40:	2103      	movs	r1, #3
    2c42:	438b      	bics	r3, r1
    2c44:	2102      	movs	r1, #2
    2c46:	430b      	orrs	r3, r1
    2c48:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2c4a:	78d3      	ldrb	r3, [r2, #3]
    2c4c:	210c      	movs	r1, #12
    2c4e:	438b      	bics	r3, r1
    2c50:	2108      	movs	r1, #8
    2c52:	430b      	orrs	r3, r1
    2c54:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    2c56:	4b43      	ldr	r3, [pc, #268]	; (2d64 <usb_init+0x190>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    2c58:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    2c5a:	039b      	lsls	r3, r3, #14
    2c5c:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    2c5e:	2b1f      	cmp	r3, #31
    2c60:	d068      	beq.n	2d34 <usb_init+0x160>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    2c62:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    2c64:	019b      	lsls	r3, r3, #6
    2c66:	4940      	ldr	r1, [pc, #256]	; (2d68 <usb_init+0x194>)
    2c68:	400a      	ands	r2, r1
    2c6a:	4313      	orrs	r3, r2
    2c6c:	8523      	strh	r3, [r4, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    2c6e:	4b3d      	ldr	r3, [pc, #244]	; (2d64 <usb_init+0x190>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    2c70:	681b      	ldr	r3, [r3, #0]
    2c72:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    2c74:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    2c76:	2b1f      	cmp	r3, #31
    2c78:	d05e      	beq.n	2d38 <usb_init+0x164>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    2c7a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    2c7c:	211f      	movs	r1, #31
    2c7e:	438a      	bics	r2, r1
    2c80:	4313      	orrs	r3, r2
    2c82:	8523      	strh	r3, [r4, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    2c84:	4b37      	ldr	r3, [pc, #220]	; (2d64 <usb_init+0x190>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    2c86:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    2c88:	019b      	lsls	r3, r3, #6
    2c8a:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    2c8c:	2b07      	cmp	r3, #7
    2c8e:	d055      	beq.n	2d3c <usb_init+0x168>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    2c90:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    2c92:	031b      	lsls	r3, r3, #12
    2c94:	4935      	ldr	r1, [pc, #212]	; (2d6c <usb_init+0x198>)
    2c96:	400a      	ands	r2, r1
    2c98:	4313      	orrs	r3, r2
    2c9a:	8523      	strh	r3, [r4, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    2c9c:	7832      	ldrb	r2, [r6, #0]
    2c9e:	7821      	ldrb	r1, [r4, #0]
    2ca0:	01d2      	lsls	r2, r2, #7
    2ca2:	237f      	movs	r3, #127	; 0x7f
    2ca4:	400b      	ands	r3, r1
    2ca6:	4313      	orrs	r3, r2
    2ca8:	7023      	strb	r3, [r4, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    2caa:	7871      	ldrb	r1, [r6, #1]
    2cac:	7823      	ldrb	r3, [r4, #0]
    2cae:	2201      	movs	r2, #1
    2cb0:	400a      	ands	r2, r1
    2cb2:	0092      	lsls	r2, r2, #2
    2cb4:	2104      	movs	r1, #4
    2cb6:	438b      	bics	r3, r1
    2cb8:	4313      	orrs	r3, r2
    2cba:	7023      	strb	r3, [r4, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    2cbc:	4b2c      	ldr	r3, [pc, #176]	; (2d70 <usb_init+0x19c>)
    2cbe:	6263      	str	r3, [r4, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    2cc0:	78f3      	ldrb	r3, [r6, #3]
    2cc2:	2b01      	cmp	r3, #1
    2cc4:	d03c      	beq.n	2d40 <usb_init+0x16c>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    2cc6:	2b00      	cmp	r3, #0
    2cc8:	d106      	bne.n	2cd8 <usb_init+0x104>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    2cca:	682a      	ldr	r2, [r5, #0]
    2ccc:	8913      	ldrh	r3, [r2, #8]
    2cce:	210c      	movs	r1, #12
    2cd0:	438b      	bics	r3, r1
    2cd2:	2104      	movs	r1, #4
    2cd4:	430b      	orrs	r3, r1
    2cd6:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    2cd8:	2280      	movs	r2, #128	; 0x80
    2cda:	0052      	lsls	r2, r2, #1
    2cdc:	2100      	movs	r1, #0
    2cde:	4824      	ldr	r0, [pc, #144]	; (2d70 <usb_init+0x19c>)
    2ce0:	4b24      	ldr	r3, [pc, #144]	; (2d74 <usb_init+0x1a0>)
    2ce2:	4798      	blx	r3
    2ce4:	1d2b      	adds	r3, r5, #4
    2ce6:	0029      	movs	r1, r5
    2ce8:	3120      	adds	r1, #32
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    2cea:	2200      	movs	r2, #0
    2cec:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    2cee:	428b      	cmp	r3, r1
    2cf0:	d1fc      	bne.n	2cec <usb_init+0x118>
    2cf2:	0029      	movs	r1, r5
    2cf4:	31a0      	adds	r1, #160	; 0xa0
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    2cf6:	2200      	movs	r2, #0
    2cf8:	601a      	str	r2, [r3, #0]
    2cfa:	605a      	str	r2, [r3, #4]
    2cfc:	609a      	str	r2, [r3, #8]
    2cfe:	60da      	str	r2, [r3, #12]
    2d00:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    2d02:	4299      	cmp	r1, r3
    2d04:	d1f8      	bne.n	2cf8 <usb_init+0x124>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    2d06:	2300      	movs	r3, #0
    2d08:	22a0      	movs	r2, #160	; 0xa0
    2d0a:	52ab      	strh	r3, [r5, r2]
	module_inst->device_enabled_callback_mask = 0;
    2d0c:	3202      	adds	r2, #2
    2d0e:	52ab      	strh	r3, [r5, r2]
    2d10:	002b      	movs	r3, r5
    2d12:	33a4      	adds	r3, #164	; 0xa4
    2d14:	35ac      	adds	r5, #172	; 0xac
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    2d16:	2200      	movs	r2, #0
    2d18:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    2d1a:	721a      	strb	r2, [r3, #8]
    2d1c:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    2d1e:	42ab      	cmp	r3, r5
    2d20:	d1fa      	bne.n	2d18 <usb_init+0x144>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2d22:	2280      	movs	r2, #128	; 0x80
    2d24:	4b14      	ldr	r3, [pc, #80]	; (2d78 <usb_init+0x1a4>)
    2d26:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    2d28:	2000      	movs	r0, #0
    2d2a:	b003      	add	sp, #12
    2d2c:	bc0c      	pop	{r2, r3}
    2d2e:	4690      	mov	r8, r2
    2d30:	4699      	mov	r9, r3
    2d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    2d34:	3b1a      	subs	r3, #26
    2d36:	e794      	b.n	2c62 <usb_init+0x8e>
		pad_transp = 29;
    2d38:	3b02      	subs	r3, #2
    2d3a:	e79e      	b.n	2c7a <usb_init+0xa6>
		pad_trim = 3;
    2d3c:	3b04      	subs	r3, #4
    2d3e:	e7a7      	b.n	2c90 <usb_init+0xbc>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    2d40:	682a      	ldr	r2, [r5, #0]
    2d42:	8913      	ldrh	r3, [r2, #8]
    2d44:	3108      	adds	r1, #8
    2d46:	438b      	bics	r3, r1
    2d48:	8113      	strh	r3, [r2, #8]
    2d4a:	e7c5      	b.n	2cd8 <usb_init+0x104>
    2d4c:	200001ac 	.word	0x200001ac
    2d50:	40000400 	.word	0x40000400
    2d54:	000014b9 	.word	0x000014b9
    2d58:	000013c1 	.word	0x000013c1
    2d5c:	00001335 	.word	0x00001335
    2d60:	41005000 	.word	0x41005000
    2d64:	00806024 	.word	0x00806024
    2d68:	fffff83f 	.word	0xfffff83f
    2d6c:	ffff8fff 	.word	0xffff8fff
    2d70:	2000035c 	.word	0x2000035c
    2d74:	0000338f 	.word	0x0000338f
    2d78:	e000e100 	.word	0xe000e100

00002d7c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2d7c:	e7fe      	b.n	2d7c <Dummy_Handler>
	...

00002d80 <Reset_Handler>:
{
    2d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2d82:	4a2a      	ldr	r2, [pc, #168]	; (2e2c <Reset_Handler+0xac>)
    2d84:	4b2a      	ldr	r3, [pc, #168]	; (2e30 <Reset_Handler+0xb0>)
    2d86:	429a      	cmp	r2, r3
    2d88:	d011      	beq.n	2dae <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2d8a:	001a      	movs	r2, r3
    2d8c:	4b29      	ldr	r3, [pc, #164]	; (2e34 <Reset_Handler+0xb4>)
    2d8e:	429a      	cmp	r2, r3
    2d90:	d20d      	bcs.n	2dae <Reset_Handler+0x2e>
    2d92:	4a29      	ldr	r2, [pc, #164]	; (2e38 <Reset_Handler+0xb8>)
    2d94:	3303      	adds	r3, #3
    2d96:	1a9b      	subs	r3, r3, r2
    2d98:	089b      	lsrs	r3, r3, #2
    2d9a:	3301      	adds	r3, #1
    2d9c:	009b      	lsls	r3, r3, #2
    2d9e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2da0:	4823      	ldr	r0, [pc, #140]	; (2e30 <Reset_Handler+0xb0>)
    2da2:	4922      	ldr	r1, [pc, #136]	; (2e2c <Reset_Handler+0xac>)
    2da4:	588c      	ldr	r4, [r1, r2]
    2da6:	5084      	str	r4, [r0, r2]
    2da8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2daa:	429a      	cmp	r2, r3
    2dac:	d1fa      	bne.n	2da4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2dae:	4a23      	ldr	r2, [pc, #140]	; (2e3c <Reset_Handler+0xbc>)
    2db0:	4b23      	ldr	r3, [pc, #140]	; (2e40 <Reset_Handler+0xc0>)
    2db2:	429a      	cmp	r2, r3
    2db4:	d20a      	bcs.n	2dcc <Reset_Handler+0x4c>
    2db6:	43d3      	mvns	r3, r2
    2db8:	4921      	ldr	r1, [pc, #132]	; (2e40 <Reset_Handler+0xc0>)
    2dba:	185b      	adds	r3, r3, r1
    2dbc:	2103      	movs	r1, #3
    2dbe:	438b      	bics	r3, r1
    2dc0:	3304      	adds	r3, #4
    2dc2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2dc4:	2100      	movs	r1, #0
    2dc6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2dc8:	4293      	cmp	r3, r2
    2dca:	d1fc      	bne.n	2dc6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2dcc:	4a1d      	ldr	r2, [pc, #116]	; (2e44 <Reset_Handler+0xc4>)
    2dce:	21ff      	movs	r1, #255	; 0xff
    2dd0:	4b1d      	ldr	r3, [pc, #116]	; (2e48 <Reset_Handler+0xc8>)
    2dd2:	438b      	bics	r3, r1
    2dd4:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2dd6:	39fd      	subs	r1, #253	; 0xfd
    2dd8:	2390      	movs	r3, #144	; 0x90
    2dda:	005b      	lsls	r3, r3, #1
    2ddc:	4a1b      	ldr	r2, [pc, #108]	; (2e4c <Reset_Handler+0xcc>)
    2dde:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2de0:	4a1b      	ldr	r2, [pc, #108]	; (2e50 <Reset_Handler+0xd0>)
    2de2:	78d3      	ldrb	r3, [r2, #3]
    2de4:	2503      	movs	r5, #3
    2de6:	43ab      	bics	r3, r5
    2de8:	2402      	movs	r4, #2
    2dea:	4323      	orrs	r3, r4
    2dec:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2dee:	78d3      	ldrb	r3, [r2, #3]
    2df0:	270c      	movs	r7, #12
    2df2:	43bb      	bics	r3, r7
    2df4:	2608      	movs	r6, #8
    2df6:	4333      	orrs	r3, r6
    2df8:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2dfa:	4b16      	ldr	r3, [pc, #88]	; (2e54 <Reset_Handler+0xd4>)
    2dfc:	7b98      	ldrb	r0, [r3, #14]
    2dfe:	2230      	movs	r2, #48	; 0x30
    2e00:	4390      	bics	r0, r2
    2e02:	2220      	movs	r2, #32
    2e04:	4310      	orrs	r0, r2
    2e06:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2e08:	7b99      	ldrb	r1, [r3, #14]
    2e0a:	43b9      	bics	r1, r7
    2e0c:	4331      	orrs	r1, r6
    2e0e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2e10:	7b9a      	ldrb	r2, [r3, #14]
    2e12:	43aa      	bics	r2, r5
    2e14:	4322      	orrs	r2, r4
    2e16:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2e18:	4a0f      	ldr	r2, [pc, #60]	; (2e58 <Reset_Handler+0xd8>)
    2e1a:	6853      	ldr	r3, [r2, #4]
    2e1c:	2180      	movs	r1, #128	; 0x80
    2e1e:	430b      	orrs	r3, r1
    2e20:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2e22:	4b0e      	ldr	r3, [pc, #56]	; (2e5c <Reset_Handler+0xdc>)
    2e24:	4798      	blx	r3
        main();
    2e26:	4b0e      	ldr	r3, [pc, #56]	; (2e60 <Reset_Handler+0xe0>)
    2e28:	4798      	blx	r3
    2e2a:	e7fe      	b.n	2e2a <Reset_Handler+0xaa>
    2e2c:	00003430 	.word	0x00003430
    2e30:	20000000 	.word	0x20000000
    2e34:	200000e0 	.word	0x200000e0
    2e38:	20000004 	.word	0x20000004
    2e3c:	200000e0 	.word	0x200000e0
    2e40:	2000045c 	.word	0x2000045c
    2e44:	e000ed00 	.word	0xe000ed00
    2e48:	00000000 	.word	0x00000000
    2e4c:	41007000 	.word	0x41007000
    2e50:	41005000 	.word	0x41005000
    2e54:	41004800 	.word	0x41004800
    2e58:	41004000 	.word	0x41004000
    2e5c:	00003335 	.word	0x00003335
    2e60:	00002e69 	.word	0x00002e69

00002e64 <SysTick_Handler>:
static volatile bool main_b_generic_enable = false;

void SysTick_Handler(void)
{
	//port_pin_toggle_output_level(PIN_PA22);
}
    2e64:	4770      	bx	lr
	...

00002e68 <main>:

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    2e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e6a:	46de      	mov	lr, fp
    2e6c:	4657      	mov	r7, sl
    2e6e:	464e      	mov	r6, r9
    2e70:	4645      	mov	r5, r8
    2e72:	b5e0      	push	{r5, r6, r7, lr}
    2e74:	b083      	sub	sp, #12

	irq_initialize_vectors();
	cpu_irq_enable();
    2e76:	2101      	movs	r1, #1
    2e78:	4b3e      	ldr	r3, [pc, #248]	; (2f74 <main+0x10c>)
    2e7a:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    2e7c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2e80:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    2e82:	4b3d      	ldr	r3, [pc, #244]	; (2f78 <main+0x110>)
    2e84:	2200      	movs	r2, #0
    2e86:	701a      	strb	r2, [r3, #0]
    2e88:	705a      	strb	r2, [r3, #1]
    2e8a:	709a      	strb	r2, [r3, #2]
    2e8c:	70da      	strb	r2, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2e8e:	7119      	strb	r1, [r3, #4]

	// Initialize the sleep manager
	sleepmgr_init();

	system_init();
    2e90:	4b3a      	ldr	r3, [pc, #232]	; (2f7c <main+0x114>)
    2e92:	4798      	blx	r3

	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_3));
    2e94:	2003      	movs	r0, #3
    2e96:	4b3a      	ldr	r3, [pc, #232]	; (2f80 <main+0x118>)
    2e98:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    2e9a:	3801      	subs	r0, #1
    2e9c:	4b39      	ldr	r3, [pc, #228]	; (2f84 <main+0x11c>)
    2e9e:	4298      	cmp	r0, r3
    2ea0:	d80d      	bhi.n	2ebe <main+0x56>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    2ea2:	4a39      	ldr	r2, [pc, #228]	; (2f88 <main+0x120>)
    2ea4:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2ea6:	4839      	ldr	r0, [pc, #228]	; (2f8c <main+0x124>)
    2ea8:	6a03      	ldr	r3, [r0, #32]
    2eaa:	021b      	lsls	r3, r3, #8
    2eac:	0a1b      	lsrs	r3, r3, #8
    2eae:	21c0      	movs	r1, #192	; 0xc0
    2eb0:	0609      	lsls	r1, r1, #24
    2eb2:	430b      	orrs	r3, r1
    2eb4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    2eb6:	2300      	movs	r3, #0
    2eb8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    2eba:	3307      	adds	r3, #7
    2ebc:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2ebe:	a901      	add	r1, sp, #4
    2ec0:	2301      	movs	r3, #1
    2ec2:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    2ec4:	2200      	movs	r2, #0
    2ec6:	708a      	strb	r2, [r1, #2]
static void config_led(void)
{
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2ec8:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(PIN_PA22, &pin_conf);
    2eca:	2016      	movs	r0, #22
    2ecc:	4b30      	ldr	r3, [pc, #192]	; (2f90 <main+0x128>)
    2ece:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    2ed0:	2280      	movs	r2, #128	; 0x80
    2ed2:	03d2      	lsls	r2, r2, #15
    2ed4:	4b2f      	ldr	r3, [pc, #188]	; (2f94 <main+0x12c>)
    2ed6:	615a      	str	r2, [r3, #20]
	ui_init();
    2ed8:	4b2f      	ldr	r3, [pc, #188]	; (2f98 <main+0x130>)
    2eda:	4798      	blx	r3
	ui_powerdown();
    2edc:	4b2f      	ldr	r3, [pc, #188]	; (2f9c <main+0x134>)
    2ede:	4798      	blx	r3
	udc_start();
    2ee0:	4b2f      	ldr	r3, [pc, #188]	; (2fa0 <main+0x138>)
    2ee2:	4798      	blx	r3
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    2ee4:	4f23      	ldr	r7, [pc, #140]	; (2f74 <main+0x10c>)
    2ee6:	2400      	movs	r4, #0
    2ee8:	1c26      	adds	r6, r4, #0
	while (!(*lock_ptr)) {
    2eea:	4d23      	ldr	r5, [pc, #140]	; (2f78 <main+0x110>)

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
    2eec:	46b8      	mov	r8, r7
    2eee:	2301      	movs	r3, #1
    2ef0:	469c      	mov	ip, r3

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    2ef2:	46bb      	mov	fp, r7

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
	cpu_irq_enable();
    2ef4:	46ba      	mov	sl, r7

	switch (sleep_mode) {
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    2ef6:	4b25      	ldr	r3, [pc, #148]	; (2f8c <main+0x124>)
    2ef8:	4699      	mov	r9, r3
    2efa:	e00e      	b.n	2f1a <main+0xb2>
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    2efc:	0019      	movs	r1, r3
		lock_ptr++;
    2efe:	3201      	adds	r2, #1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    2f00:	1c4b      	adds	r3, r1, #1
    2f02:	b2db      	uxtb	r3, r3
	while (!(*lock_ptr)) {
    2f04:	7810      	ldrb	r0, [r2, #0]
    2f06:	2800      	cmp	r0, #0
    2f08:	d0f8      	beq.n	2efc <main+0x94>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    2f0a:	2b00      	cmp	r3, #0
    2f0c:	d10f      	bne.n	2f2e <main+0xc6>
		cpu_irq_enable();
    2f0e:	4643      	mov	r3, r8
    2f10:	4662      	mov	r2, ip
    2f12:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    2f14:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2f18:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
    2f1a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2f1c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2f20:	703e      	strb	r6, [r7, #0]
	while (!(*lock_ptr)) {
    2f22:	782b      	ldrb	r3, [r5, #0]
    2f24:	2b00      	cmp	r3, #0
    2f26:	d1f2      	bne.n	2f0e <main+0xa6>
    2f28:	0021      	movs	r1, r4
    2f2a:	4a13      	ldr	r2, [pc, #76]	; (2f78 <main+0x110>)
    2f2c:	e7e7      	b.n	2efe <main+0x96>
  __ASM volatile ("cpsid i" : : : "memory");
    2f2e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2f30:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2f34:	465b      	mov	r3, fp
    2f36:	701c      	strb	r4, [r3, #0]
	switch (sleep_mode) {
    2f38:	2902      	cmp	r1, #2
    2f3a:	d90b      	bls.n	2f54 <main+0xec>
    2f3c:	2903      	cmp	r1, #3
    2f3e:	d012      	beq.n	2f66 <main+0xfe>
	cpu_irq_enable();
    2f40:	4653      	mov	r3, sl
    2f42:	4662      	mov	r2, ip
    2f44:	701a      	strb	r2, [r3, #0]
    2f46:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2f4a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2f4c:	f3bf 8f4f 	dsb	sy
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
	__DSB();
	__WFI();
    2f50:	bf30      	wfi
    2f52:	e7e2      	b.n	2f1a <main+0xb2>
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    2f54:	464b      	mov	r3, r9
    2f56:	691b      	ldr	r3, [r3, #16]
    2f58:	2204      	movs	r2, #4
    2f5a:	4393      	bics	r3, r2
    2f5c:	464a      	mov	r2, r9
    2f5e:	6113      	str	r3, [r2, #16]
			PM->SLEEP.reg = sleep_mode;
    2f60:	4b10      	ldr	r3, [pc, #64]	; (2fa4 <main+0x13c>)
    2f62:	7059      	strb	r1, [r3, #1]
    2f64:	e7ec      	b.n	2f40 <main+0xd8>
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    2f66:	464b      	mov	r3, r9
    2f68:	691b      	ldr	r3, [r3, #16]
    2f6a:	2204      	movs	r2, #4
    2f6c:	4313      	orrs	r3, r2
    2f6e:	464a      	mov	r2, r9
    2f70:	6113      	str	r3, [r2, #16]
    2f72:	e7e5      	b.n	2f40 <main+0xd8>
    2f74:	200000df 	.word	0x200000df
    2f78:	200001c0 	.word	0x200001c0
    2f7c:	000014ed 	.word	0x000014ed
    2f80:	000012a9 	.word	0x000012a9
    2f84:	00ffffff 	.word	0x00ffffff
    2f88:	e000e010 	.word	0xe000e010
    2f8c:	e000ed00 	.word	0xe000ed00
    2f90:	00000e55 	.word	0x00000e55
    2f94:	41004400 	.word	0x41004400
    2f98:	000000ed 	.word	0x000000ed
    2f9c:	000000fd 	.word	0x000000fd
    2fa0:	00000761 	.word	0x00000761
    2fa4:	40000400 	.word	0x40000400

00002fa8 <main_suspend_action>:
{
    2fa8:	b510      	push	{r4, lr}
	ui_powerdown();
    2faa:	4b01      	ldr	r3, [pc, #4]	; (2fb0 <main_suspend_action+0x8>)
    2fac:	4798      	blx	r3
}
    2fae:	bd10      	pop	{r4, pc}
    2fb0:	000000fd 	.word	0x000000fd

00002fb4 <main_resume_action>:
{
    2fb4:	b510      	push	{r4, lr}
	ui_wakeup();
    2fb6:	4b01      	ldr	r3, [pc, #4]	; (2fbc <main_resume_action+0x8>)
    2fb8:	4798      	blx	r3
}
    2fba:	bd10      	pop	{r4, pc}
    2fbc:	00000111 	.word	0x00000111

00002fc0 <main_sof_action>:
{
    2fc0:	b510      	push	{r4, lr}
	if (!main_b_generic_enable)
    2fc2:	4b05      	ldr	r3, [pc, #20]	; (2fd8 <main_sof_action+0x18>)
    2fc4:	781b      	ldrb	r3, [r3, #0]
    2fc6:	2b00      	cmp	r3, #0
    2fc8:	d100      	bne.n	2fcc <main_sof_action+0xc>
}
    2fca:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    2fcc:	4b03      	ldr	r3, [pc, #12]	; (2fdc <main_sof_action+0x1c>)
    2fce:	4798      	blx	r3
    2fd0:	4b03      	ldr	r3, [pc, #12]	; (2fe0 <main_sof_action+0x20>)
    2fd2:	4798      	blx	r3
    2fd4:	e7f9      	b.n	2fca <main_sof_action+0xa>
    2fd6:	46c0      	nop			; (mov r8, r8)
    2fd8:	200001bc 	.word	0x200001bc
    2fdc:	00001bd1 	.word	0x00001bd1
    2fe0:	00000121 	.word	0x00000121

00002fe4 <main_remotewakeup_enable>:
{
    2fe4:	b510      	push	{r4, lr}
	ui_wakeup_enable();
    2fe6:	4b01      	ldr	r3, [pc, #4]	; (2fec <main_remotewakeup_enable+0x8>)
    2fe8:	4798      	blx	r3
}
    2fea:	bd10      	pop	{r4, pc}
    2fec:	0000010d 	.word	0x0000010d

00002ff0 <main_remotewakeup_disable>:
{
    2ff0:	b510      	push	{r4, lr}
	ui_wakeup_disable();
    2ff2:	4b01      	ldr	r3, [pc, #4]	; (2ff8 <main_remotewakeup_disable+0x8>)
    2ff4:	4798      	blx	r3
}
    2ff6:	bd10      	pop	{r4, pc}
    2ff8:	0000010f 	.word	0x0000010f

00002ffc <main_generic_enable>:
	main_b_generic_enable = true;
    2ffc:	2201      	movs	r2, #1
    2ffe:	4b02      	ldr	r3, [pc, #8]	; (3008 <main_generic_enable+0xc>)
    3000:	701a      	strb	r2, [r3, #0]
}
    3002:	2001      	movs	r0, #1
    3004:	4770      	bx	lr
    3006:	46c0      	nop			; (mov r8, r8)
    3008:	200001bc 	.word	0x200001bc

0000300c <main_generic_disable>:
	main_b_generic_enable = false;
    300c:	2200      	movs	r2, #0
    300e:	4b01      	ldr	r3, [pc, #4]	; (3014 <main_generic_disable+0x8>)
    3010:	701a      	strb	r2, [r3, #0]
}
    3012:	4770      	bx	lr
    3014:	200001bc 	.word	0x200001bc

00003018 <main_hid_set_feature>:
{
    3018:	b510      	push	{r4, lr}
	if (report[0] == 0xAA && report[1] == 0x55
    301a:	7803      	ldrb	r3, [r0, #0]
    301c:	2baa      	cmp	r3, #170	; 0xaa
    301e:	d000      	beq.n	3022 <main_hid_set_feature+0xa>
}
    3020:	bd10      	pop	{r4, pc}
	if (report[0] == 0xAA && report[1] == 0x55
    3022:	7843      	ldrb	r3, [r0, #1]
    3024:	2b55      	cmp	r3, #85	; 0x55
    3026:	d1fb      	bne.n	3020 <main_hid_set_feature+0x8>
			&& report[2] == 0xAA && report[3] == 0x55) {
    3028:	7883      	ldrb	r3, [r0, #2]
    302a:	2baa      	cmp	r3, #170	; 0xaa
    302c:	d1f8      	bne.n	3020 <main_hid_set_feature+0x8>
    302e:	78c3      	ldrb	r3, [r0, #3]
    3030:	2b55      	cmp	r3, #85	; 0x55
    3032:	d1f5      	bne.n	3020 <main_hid_set_feature+0x8>
		udc_stop();
    3034:	4b02      	ldr	r3, [pc, #8]	; (3040 <main_hid_set_feature+0x28>)
    3036:	4798      	blx	r3
		ui_powerdown();
    3038:	4b02      	ldr	r3, [pc, #8]	; (3044 <main_hid_set_feature+0x2c>)
    303a:	4798      	blx	r3
}
    303c:	e7f0      	b.n	3020 <main_hid_set_feature+0x8>
    303e:	46c0      	nop			; (mov r8, r8)
    3040:	000007cd 	.word	0x000007cd
    3044:	000000fd 	.word	0x000000fd

00003048 <__udivsi3>:
    3048:	2200      	movs	r2, #0
    304a:	0843      	lsrs	r3, r0, #1
    304c:	428b      	cmp	r3, r1
    304e:	d374      	bcc.n	313a <__udivsi3+0xf2>
    3050:	0903      	lsrs	r3, r0, #4
    3052:	428b      	cmp	r3, r1
    3054:	d35f      	bcc.n	3116 <__udivsi3+0xce>
    3056:	0a03      	lsrs	r3, r0, #8
    3058:	428b      	cmp	r3, r1
    305a:	d344      	bcc.n	30e6 <__udivsi3+0x9e>
    305c:	0b03      	lsrs	r3, r0, #12
    305e:	428b      	cmp	r3, r1
    3060:	d328      	bcc.n	30b4 <__udivsi3+0x6c>
    3062:	0c03      	lsrs	r3, r0, #16
    3064:	428b      	cmp	r3, r1
    3066:	d30d      	bcc.n	3084 <__udivsi3+0x3c>
    3068:	22ff      	movs	r2, #255	; 0xff
    306a:	0209      	lsls	r1, r1, #8
    306c:	ba12      	rev	r2, r2
    306e:	0c03      	lsrs	r3, r0, #16
    3070:	428b      	cmp	r3, r1
    3072:	d302      	bcc.n	307a <__udivsi3+0x32>
    3074:	1212      	asrs	r2, r2, #8
    3076:	0209      	lsls	r1, r1, #8
    3078:	d065      	beq.n	3146 <__udivsi3+0xfe>
    307a:	0b03      	lsrs	r3, r0, #12
    307c:	428b      	cmp	r3, r1
    307e:	d319      	bcc.n	30b4 <__udivsi3+0x6c>
    3080:	e000      	b.n	3084 <__udivsi3+0x3c>
    3082:	0a09      	lsrs	r1, r1, #8
    3084:	0bc3      	lsrs	r3, r0, #15
    3086:	428b      	cmp	r3, r1
    3088:	d301      	bcc.n	308e <__udivsi3+0x46>
    308a:	03cb      	lsls	r3, r1, #15
    308c:	1ac0      	subs	r0, r0, r3
    308e:	4152      	adcs	r2, r2
    3090:	0b83      	lsrs	r3, r0, #14
    3092:	428b      	cmp	r3, r1
    3094:	d301      	bcc.n	309a <__udivsi3+0x52>
    3096:	038b      	lsls	r3, r1, #14
    3098:	1ac0      	subs	r0, r0, r3
    309a:	4152      	adcs	r2, r2
    309c:	0b43      	lsrs	r3, r0, #13
    309e:	428b      	cmp	r3, r1
    30a0:	d301      	bcc.n	30a6 <__udivsi3+0x5e>
    30a2:	034b      	lsls	r3, r1, #13
    30a4:	1ac0      	subs	r0, r0, r3
    30a6:	4152      	adcs	r2, r2
    30a8:	0b03      	lsrs	r3, r0, #12
    30aa:	428b      	cmp	r3, r1
    30ac:	d301      	bcc.n	30b2 <__udivsi3+0x6a>
    30ae:	030b      	lsls	r3, r1, #12
    30b0:	1ac0      	subs	r0, r0, r3
    30b2:	4152      	adcs	r2, r2
    30b4:	0ac3      	lsrs	r3, r0, #11
    30b6:	428b      	cmp	r3, r1
    30b8:	d301      	bcc.n	30be <__udivsi3+0x76>
    30ba:	02cb      	lsls	r3, r1, #11
    30bc:	1ac0      	subs	r0, r0, r3
    30be:	4152      	adcs	r2, r2
    30c0:	0a83      	lsrs	r3, r0, #10
    30c2:	428b      	cmp	r3, r1
    30c4:	d301      	bcc.n	30ca <__udivsi3+0x82>
    30c6:	028b      	lsls	r3, r1, #10
    30c8:	1ac0      	subs	r0, r0, r3
    30ca:	4152      	adcs	r2, r2
    30cc:	0a43      	lsrs	r3, r0, #9
    30ce:	428b      	cmp	r3, r1
    30d0:	d301      	bcc.n	30d6 <__udivsi3+0x8e>
    30d2:	024b      	lsls	r3, r1, #9
    30d4:	1ac0      	subs	r0, r0, r3
    30d6:	4152      	adcs	r2, r2
    30d8:	0a03      	lsrs	r3, r0, #8
    30da:	428b      	cmp	r3, r1
    30dc:	d301      	bcc.n	30e2 <__udivsi3+0x9a>
    30de:	020b      	lsls	r3, r1, #8
    30e0:	1ac0      	subs	r0, r0, r3
    30e2:	4152      	adcs	r2, r2
    30e4:	d2cd      	bcs.n	3082 <__udivsi3+0x3a>
    30e6:	09c3      	lsrs	r3, r0, #7
    30e8:	428b      	cmp	r3, r1
    30ea:	d301      	bcc.n	30f0 <__udivsi3+0xa8>
    30ec:	01cb      	lsls	r3, r1, #7
    30ee:	1ac0      	subs	r0, r0, r3
    30f0:	4152      	adcs	r2, r2
    30f2:	0983      	lsrs	r3, r0, #6
    30f4:	428b      	cmp	r3, r1
    30f6:	d301      	bcc.n	30fc <__udivsi3+0xb4>
    30f8:	018b      	lsls	r3, r1, #6
    30fa:	1ac0      	subs	r0, r0, r3
    30fc:	4152      	adcs	r2, r2
    30fe:	0943      	lsrs	r3, r0, #5
    3100:	428b      	cmp	r3, r1
    3102:	d301      	bcc.n	3108 <__udivsi3+0xc0>
    3104:	014b      	lsls	r3, r1, #5
    3106:	1ac0      	subs	r0, r0, r3
    3108:	4152      	adcs	r2, r2
    310a:	0903      	lsrs	r3, r0, #4
    310c:	428b      	cmp	r3, r1
    310e:	d301      	bcc.n	3114 <__udivsi3+0xcc>
    3110:	010b      	lsls	r3, r1, #4
    3112:	1ac0      	subs	r0, r0, r3
    3114:	4152      	adcs	r2, r2
    3116:	08c3      	lsrs	r3, r0, #3
    3118:	428b      	cmp	r3, r1
    311a:	d301      	bcc.n	3120 <__udivsi3+0xd8>
    311c:	00cb      	lsls	r3, r1, #3
    311e:	1ac0      	subs	r0, r0, r3
    3120:	4152      	adcs	r2, r2
    3122:	0883      	lsrs	r3, r0, #2
    3124:	428b      	cmp	r3, r1
    3126:	d301      	bcc.n	312c <__udivsi3+0xe4>
    3128:	008b      	lsls	r3, r1, #2
    312a:	1ac0      	subs	r0, r0, r3
    312c:	4152      	adcs	r2, r2
    312e:	0843      	lsrs	r3, r0, #1
    3130:	428b      	cmp	r3, r1
    3132:	d301      	bcc.n	3138 <__udivsi3+0xf0>
    3134:	004b      	lsls	r3, r1, #1
    3136:	1ac0      	subs	r0, r0, r3
    3138:	4152      	adcs	r2, r2
    313a:	1a41      	subs	r1, r0, r1
    313c:	d200      	bcs.n	3140 <__udivsi3+0xf8>
    313e:	4601      	mov	r1, r0
    3140:	4152      	adcs	r2, r2
    3142:	4610      	mov	r0, r2
    3144:	4770      	bx	lr
    3146:	e7ff      	b.n	3148 <__udivsi3+0x100>
    3148:	b501      	push	{r0, lr}
    314a:	2000      	movs	r0, #0
    314c:	f000 f8f0 	bl	3330 <__aeabi_idiv0>
    3150:	bd02      	pop	{r1, pc}
    3152:	46c0      	nop			; (mov r8, r8)

00003154 <__aeabi_uidivmod>:
    3154:	2900      	cmp	r1, #0
    3156:	d0f7      	beq.n	3148 <__udivsi3+0x100>
    3158:	e776      	b.n	3048 <__udivsi3>
    315a:	4770      	bx	lr

0000315c <__divsi3>:
    315c:	4603      	mov	r3, r0
    315e:	430b      	orrs	r3, r1
    3160:	d47f      	bmi.n	3262 <__divsi3+0x106>
    3162:	2200      	movs	r2, #0
    3164:	0843      	lsrs	r3, r0, #1
    3166:	428b      	cmp	r3, r1
    3168:	d374      	bcc.n	3254 <__divsi3+0xf8>
    316a:	0903      	lsrs	r3, r0, #4
    316c:	428b      	cmp	r3, r1
    316e:	d35f      	bcc.n	3230 <__divsi3+0xd4>
    3170:	0a03      	lsrs	r3, r0, #8
    3172:	428b      	cmp	r3, r1
    3174:	d344      	bcc.n	3200 <__divsi3+0xa4>
    3176:	0b03      	lsrs	r3, r0, #12
    3178:	428b      	cmp	r3, r1
    317a:	d328      	bcc.n	31ce <__divsi3+0x72>
    317c:	0c03      	lsrs	r3, r0, #16
    317e:	428b      	cmp	r3, r1
    3180:	d30d      	bcc.n	319e <__divsi3+0x42>
    3182:	22ff      	movs	r2, #255	; 0xff
    3184:	0209      	lsls	r1, r1, #8
    3186:	ba12      	rev	r2, r2
    3188:	0c03      	lsrs	r3, r0, #16
    318a:	428b      	cmp	r3, r1
    318c:	d302      	bcc.n	3194 <__divsi3+0x38>
    318e:	1212      	asrs	r2, r2, #8
    3190:	0209      	lsls	r1, r1, #8
    3192:	d065      	beq.n	3260 <__divsi3+0x104>
    3194:	0b03      	lsrs	r3, r0, #12
    3196:	428b      	cmp	r3, r1
    3198:	d319      	bcc.n	31ce <__divsi3+0x72>
    319a:	e000      	b.n	319e <__divsi3+0x42>
    319c:	0a09      	lsrs	r1, r1, #8
    319e:	0bc3      	lsrs	r3, r0, #15
    31a0:	428b      	cmp	r3, r1
    31a2:	d301      	bcc.n	31a8 <__divsi3+0x4c>
    31a4:	03cb      	lsls	r3, r1, #15
    31a6:	1ac0      	subs	r0, r0, r3
    31a8:	4152      	adcs	r2, r2
    31aa:	0b83      	lsrs	r3, r0, #14
    31ac:	428b      	cmp	r3, r1
    31ae:	d301      	bcc.n	31b4 <__divsi3+0x58>
    31b0:	038b      	lsls	r3, r1, #14
    31b2:	1ac0      	subs	r0, r0, r3
    31b4:	4152      	adcs	r2, r2
    31b6:	0b43      	lsrs	r3, r0, #13
    31b8:	428b      	cmp	r3, r1
    31ba:	d301      	bcc.n	31c0 <__divsi3+0x64>
    31bc:	034b      	lsls	r3, r1, #13
    31be:	1ac0      	subs	r0, r0, r3
    31c0:	4152      	adcs	r2, r2
    31c2:	0b03      	lsrs	r3, r0, #12
    31c4:	428b      	cmp	r3, r1
    31c6:	d301      	bcc.n	31cc <__divsi3+0x70>
    31c8:	030b      	lsls	r3, r1, #12
    31ca:	1ac0      	subs	r0, r0, r3
    31cc:	4152      	adcs	r2, r2
    31ce:	0ac3      	lsrs	r3, r0, #11
    31d0:	428b      	cmp	r3, r1
    31d2:	d301      	bcc.n	31d8 <__divsi3+0x7c>
    31d4:	02cb      	lsls	r3, r1, #11
    31d6:	1ac0      	subs	r0, r0, r3
    31d8:	4152      	adcs	r2, r2
    31da:	0a83      	lsrs	r3, r0, #10
    31dc:	428b      	cmp	r3, r1
    31de:	d301      	bcc.n	31e4 <__divsi3+0x88>
    31e0:	028b      	lsls	r3, r1, #10
    31e2:	1ac0      	subs	r0, r0, r3
    31e4:	4152      	adcs	r2, r2
    31e6:	0a43      	lsrs	r3, r0, #9
    31e8:	428b      	cmp	r3, r1
    31ea:	d301      	bcc.n	31f0 <__divsi3+0x94>
    31ec:	024b      	lsls	r3, r1, #9
    31ee:	1ac0      	subs	r0, r0, r3
    31f0:	4152      	adcs	r2, r2
    31f2:	0a03      	lsrs	r3, r0, #8
    31f4:	428b      	cmp	r3, r1
    31f6:	d301      	bcc.n	31fc <__divsi3+0xa0>
    31f8:	020b      	lsls	r3, r1, #8
    31fa:	1ac0      	subs	r0, r0, r3
    31fc:	4152      	adcs	r2, r2
    31fe:	d2cd      	bcs.n	319c <__divsi3+0x40>
    3200:	09c3      	lsrs	r3, r0, #7
    3202:	428b      	cmp	r3, r1
    3204:	d301      	bcc.n	320a <__divsi3+0xae>
    3206:	01cb      	lsls	r3, r1, #7
    3208:	1ac0      	subs	r0, r0, r3
    320a:	4152      	adcs	r2, r2
    320c:	0983      	lsrs	r3, r0, #6
    320e:	428b      	cmp	r3, r1
    3210:	d301      	bcc.n	3216 <__divsi3+0xba>
    3212:	018b      	lsls	r3, r1, #6
    3214:	1ac0      	subs	r0, r0, r3
    3216:	4152      	adcs	r2, r2
    3218:	0943      	lsrs	r3, r0, #5
    321a:	428b      	cmp	r3, r1
    321c:	d301      	bcc.n	3222 <__divsi3+0xc6>
    321e:	014b      	lsls	r3, r1, #5
    3220:	1ac0      	subs	r0, r0, r3
    3222:	4152      	adcs	r2, r2
    3224:	0903      	lsrs	r3, r0, #4
    3226:	428b      	cmp	r3, r1
    3228:	d301      	bcc.n	322e <__divsi3+0xd2>
    322a:	010b      	lsls	r3, r1, #4
    322c:	1ac0      	subs	r0, r0, r3
    322e:	4152      	adcs	r2, r2
    3230:	08c3      	lsrs	r3, r0, #3
    3232:	428b      	cmp	r3, r1
    3234:	d301      	bcc.n	323a <__divsi3+0xde>
    3236:	00cb      	lsls	r3, r1, #3
    3238:	1ac0      	subs	r0, r0, r3
    323a:	4152      	adcs	r2, r2
    323c:	0883      	lsrs	r3, r0, #2
    323e:	428b      	cmp	r3, r1
    3240:	d301      	bcc.n	3246 <__divsi3+0xea>
    3242:	008b      	lsls	r3, r1, #2
    3244:	1ac0      	subs	r0, r0, r3
    3246:	4152      	adcs	r2, r2
    3248:	0843      	lsrs	r3, r0, #1
    324a:	428b      	cmp	r3, r1
    324c:	d301      	bcc.n	3252 <__divsi3+0xf6>
    324e:	004b      	lsls	r3, r1, #1
    3250:	1ac0      	subs	r0, r0, r3
    3252:	4152      	adcs	r2, r2
    3254:	1a41      	subs	r1, r0, r1
    3256:	d200      	bcs.n	325a <__divsi3+0xfe>
    3258:	4601      	mov	r1, r0
    325a:	4152      	adcs	r2, r2
    325c:	4610      	mov	r0, r2
    325e:	4770      	bx	lr
    3260:	e05d      	b.n	331e <__divsi3+0x1c2>
    3262:	0fca      	lsrs	r2, r1, #31
    3264:	d000      	beq.n	3268 <__divsi3+0x10c>
    3266:	4249      	negs	r1, r1
    3268:	1003      	asrs	r3, r0, #32
    326a:	d300      	bcc.n	326e <__divsi3+0x112>
    326c:	4240      	negs	r0, r0
    326e:	4053      	eors	r3, r2
    3270:	2200      	movs	r2, #0
    3272:	469c      	mov	ip, r3
    3274:	0903      	lsrs	r3, r0, #4
    3276:	428b      	cmp	r3, r1
    3278:	d32d      	bcc.n	32d6 <__divsi3+0x17a>
    327a:	0a03      	lsrs	r3, r0, #8
    327c:	428b      	cmp	r3, r1
    327e:	d312      	bcc.n	32a6 <__divsi3+0x14a>
    3280:	22fc      	movs	r2, #252	; 0xfc
    3282:	0189      	lsls	r1, r1, #6
    3284:	ba12      	rev	r2, r2
    3286:	0a03      	lsrs	r3, r0, #8
    3288:	428b      	cmp	r3, r1
    328a:	d30c      	bcc.n	32a6 <__divsi3+0x14a>
    328c:	0189      	lsls	r1, r1, #6
    328e:	1192      	asrs	r2, r2, #6
    3290:	428b      	cmp	r3, r1
    3292:	d308      	bcc.n	32a6 <__divsi3+0x14a>
    3294:	0189      	lsls	r1, r1, #6
    3296:	1192      	asrs	r2, r2, #6
    3298:	428b      	cmp	r3, r1
    329a:	d304      	bcc.n	32a6 <__divsi3+0x14a>
    329c:	0189      	lsls	r1, r1, #6
    329e:	d03a      	beq.n	3316 <__divsi3+0x1ba>
    32a0:	1192      	asrs	r2, r2, #6
    32a2:	e000      	b.n	32a6 <__divsi3+0x14a>
    32a4:	0989      	lsrs	r1, r1, #6
    32a6:	09c3      	lsrs	r3, r0, #7
    32a8:	428b      	cmp	r3, r1
    32aa:	d301      	bcc.n	32b0 <__divsi3+0x154>
    32ac:	01cb      	lsls	r3, r1, #7
    32ae:	1ac0      	subs	r0, r0, r3
    32b0:	4152      	adcs	r2, r2
    32b2:	0983      	lsrs	r3, r0, #6
    32b4:	428b      	cmp	r3, r1
    32b6:	d301      	bcc.n	32bc <__divsi3+0x160>
    32b8:	018b      	lsls	r3, r1, #6
    32ba:	1ac0      	subs	r0, r0, r3
    32bc:	4152      	adcs	r2, r2
    32be:	0943      	lsrs	r3, r0, #5
    32c0:	428b      	cmp	r3, r1
    32c2:	d301      	bcc.n	32c8 <__divsi3+0x16c>
    32c4:	014b      	lsls	r3, r1, #5
    32c6:	1ac0      	subs	r0, r0, r3
    32c8:	4152      	adcs	r2, r2
    32ca:	0903      	lsrs	r3, r0, #4
    32cc:	428b      	cmp	r3, r1
    32ce:	d301      	bcc.n	32d4 <__divsi3+0x178>
    32d0:	010b      	lsls	r3, r1, #4
    32d2:	1ac0      	subs	r0, r0, r3
    32d4:	4152      	adcs	r2, r2
    32d6:	08c3      	lsrs	r3, r0, #3
    32d8:	428b      	cmp	r3, r1
    32da:	d301      	bcc.n	32e0 <__divsi3+0x184>
    32dc:	00cb      	lsls	r3, r1, #3
    32de:	1ac0      	subs	r0, r0, r3
    32e0:	4152      	adcs	r2, r2
    32e2:	0883      	lsrs	r3, r0, #2
    32e4:	428b      	cmp	r3, r1
    32e6:	d301      	bcc.n	32ec <__divsi3+0x190>
    32e8:	008b      	lsls	r3, r1, #2
    32ea:	1ac0      	subs	r0, r0, r3
    32ec:	4152      	adcs	r2, r2
    32ee:	d2d9      	bcs.n	32a4 <__divsi3+0x148>
    32f0:	0843      	lsrs	r3, r0, #1
    32f2:	428b      	cmp	r3, r1
    32f4:	d301      	bcc.n	32fa <__divsi3+0x19e>
    32f6:	004b      	lsls	r3, r1, #1
    32f8:	1ac0      	subs	r0, r0, r3
    32fa:	4152      	adcs	r2, r2
    32fc:	1a41      	subs	r1, r0, r1
    32fe:	d200      	bcs.n	3302 <__divsi3+0x1a6>
    3300:	4601      	mov	r1, r0
    3302:	4663      	mov	r3, ip
    3304:	4152      	adcs	r2, r2
    3306:	105b      	asrs	r3, r3, #1
    3308:	4610      	mov	r0, r2
    330a:	d301      	bcc.n	3310 <__divsi3+0x1b4>
    330c:	4240      	negs	r0, r0
    330e:	2b00      	cmp	r3, #0
    3310:	d500      	bpl.n	3314 <__divsi3+0x1b8>
    3312:	4249      	negs	r1, r1
    3314:	4770      	bx	lr
    3316:	4663      	mov	r3, ip
    3318:	105b      	asrs	r3, r3, #1
    331a:	d300      	bcc.n	331e <__divsi3+0x1c2>
    331c:	4240      	negs	r0, r0
    331e:	b501      	push	{r0, lr}
    3320:	2000      	movs	r0, #0
    3322:	f000 f805 	bl	3330 <__aeabi_idiv0>
    3326:	bd02      	pop	{r1, pc}

00003328 <__aeabi_idivmod>:
    3328:	2900      	cmp	r1, #0
    332a:	d0f8      	beq.n	331e <__divsi3+0x1c2>
    332c:	e716      	b.n	315c <__divsi3>
    332e:	4770      	bx	lr

00003330 <__aeabi_idiv0>:
    3330:	4770      	bx	lr
    3332:	46c0      	nop			; (mov r8, r8)

00003334 <__libc_init_array>:
    3334:	b570      	push	{r4, r5, r6, lr}
    3336:	2600      	movs	r6, #0
    3338:	4d0c      	ldr	r5, [pc, #48]	; (336c <__libc_init_array+0x38>)
    333a:	4c0d      	ldr	r4, [pc, #52]	; (3370 <__libc_init_array+0x3c>)
    333c:	1b64      	subs	r4, r4, r5
    333e:	10a4      	asrs	r4, r4, #2
    3340:	42a6      	cmp	r6, r4
    3342:	d109      	bne.n	3358 <__libc_init_array+0x24>
    3344:	2600      	movs	r6, #0
    3346:	f000 f863 	bl	3410 <_init>
    334a:	4d0a      	ldr	r5, [pc, #40]	; (3374 <__libc_init_array+0x40>)
    334c:	4c0a      	ldr	r4, [pc, #40]	; (3378 <__libc_init_array+0x44>)
    334e:	1b64      	subs	r4, r4, r5
    3350:	10a4      	asrs	r4, r4, #2
    3352:	42a6      	cmp	r6, r4
    3354:	d105      	bne.n	3362 <__libc_init_array+0x2e>
    3356:	bd70      	pop	{r4, r5, r6, pc}
    3358:	00b3      	lsls	r3, r6, #2
    335a:	58eb      	ldr	r3, [r5, r3]
    335c:	4798      	blx	r3
    335e:	3601      	adds	r6, #1
    3360:	e7ee      	b.n	3340 <__libc_init_array+0xc>
    3362:	00b3      	lsls	r3, r6, #2
    3364:	58eb      	ldr	r3, [r5, r3]
    3366:	4798      	blx	r3
    3368:	3601      	adds	r6, #1
    336a:	e7f2      	b.n	3352 <__libc_init_array+0x1e>
    336c:	0000341c 	.word	0x0000341c
    3370:	0000341c 	.word	0x0000341c
    3374:	0000341c 	.word	0x0000341c
    3378:	00003420 	.word	0x00003420

0000337c <memcpy>:
    337c:	2300      	movs	r3, #0
    337e:	b510      	push	{r4, lr}
    3380:	429a      	cmp	r2, r3
    3382:	d100      	bne.n	3386 <memcpy+0xa>
    3384:	bd10      	pop	{r4, pc}
    3386:	5ccc      	ldrb	r4, [r1, r3]
    3388:	54c4      	strb	r4, [r0, r3]
    338a:	3301      	adds	r3, #1
    338c:	e7f8      	b.n	3380 <memcpy+0x4>

0000338e <memset>:
    338e:	0003      	movs	r3, r0
    3390:	1882      	adds	r2, r0, r2
    3392:	4293      	cmp	r3, r2
    3394:	d100      	bne.n	3398 <memset+0xa>
    3396:	4770      	bx	lr
    3398:	7019      	strb	r1, [r3, #0]
    339a:	3301      	adds	r3, #1
    339c:	e7f9      	b.n	3392 <memset+0x4>
    339e:	0000      	movs	r0, r0
    33a0:	00000e8a 	.word	0x00000e8a
    33a4:	00000e86 	.word	0x00000e86
    33a8:	00000e86 	.word	0x00000e86
    33ac:	00000eec 	.word	0x00000eec
    33b0:	00000eec 	.word	0x00000eec
    33b4:	00000e9e 	.word	0x00000e9e
    33b8:	00000e90 	.word	0x00000e90
    33bc:	00000ea4 	.word	0x00000ea4
    33c0:	00000eda 	.word	0x00000eda
    33c4:	00000ff4 	.word	0x00000ff4
    33c8:	00000fd4 	.word	0x00000fd4
    33cc:	00000fd4 	.word	0x00000fd4
    33d0:	00001060 	.word	0x00001060
    33d4:	00000fe6 	.word	0x00000fe6
    33d8:	00001002 	.word	0x00001002
    33dc:	00000fd8 	.word	0x00000fd8
    33e0:	00001010 	.word	0x00001010
    33e4:	00001050 	.word	0x00001050
    33e8:	000024dc 	.word	0x000024dc
    33ec:	000024ea 	.word	0x000024ea
    33f0:	00002584 	.word	0x00002584
    33f4:	00002624 	.word	0x00002624
    33f8:	00002688 	.word	0x00002688

000033fc <_usb_device_irq_bits>:
    33fc:	00080004 00800070 01000001 00000200     ....p...........

0000340c <_usb_endpoint_irq_bits>:
    340c:	60100c03                                ...`

00003410 <_init>:
    3410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3412:	46c0      	nop			; (mov r8, r8)
    3414:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3416:	bc08      	pop	{r3}
    3418:	469e      	mov	lr, r3
    341a:	4770      	bx	lr

0000341c <__init_array_start>:
    341c:	000000b5 	.word	0x000000b5

00003420 <_fini>:
    3420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3422:	46c0      	nop			; (mov r8, r8)
    3424:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3426:	bc08      	pop	{r3}
    3428:	469e      	mov	lr, r3
    342a:	4770      	bx	lr

0000342c <__fini_array_start>:
    342c:	0000008d 	.word	0x0000008d
